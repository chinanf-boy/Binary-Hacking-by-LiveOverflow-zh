1
00:00:00,250 --> 00:00:06,670
exploit-exercises/protostar offers a linux image with several challenges to learn binary

2
00:00:06,670 --> 00:00:11,800
exploitation. But a lot has changed over the years and if you compile these challenges

3
00:00:11,800 --> 00:00:16,810
yourself on a modern system it’s not as easy anymore. I already showed you that in

4
00:00:16,810 --> 00:00:23,380
the previous videos about the stack challenge. I had to make a 3 part video series to explain

5
00:00:23,380 --> 00:00:29,650
how we can still do it. And that also only on 32bit. So if you are just starting out,

6
00:00:29,650 --> 00:00:34,100
make sure that you use the Linux image that you can download here and don’t compile

7
00:00:34,100 --> 00:00:41,260
it yourself. Otherwise all the tutorials about it won’t work. And now for this video, let’s

8
00:00:41,260 --> 00:00:46,230
continue with some other challenge. We compile them on a current Ubuntu version, without

9
00:00:46,230 --> 00:00:55,430
any compile flags and see what we get.

10
00:00:55,430 --> 00:01:01,190
Obviously the rules of the game, that is hacking, are, that maybe there are techniques I just

11
00:01:01,190 --> 00:01:05,720
don’t know about. I don’t really know the edge cases in exploitation, I mostly know

12
00:01:05,720 --> 00:01:10,140
the general techniques and I think I have some reasonable amount of creativity. But

13
00:01:10,140 --> 00:01:14,460
I don’t know everything. So it’s likely that there are people out there that could

14
00:01:14,460 --> 00:01:20,590
exploit it. In that case, I’d love to see a PoC for that. That being said, let’s continue

15
00:01:20,590 --> 00:01:22,960
with format0.

16
00:01:22,960 --> 00:01:28,950
So what is this challenge about? The attacker can pass in an argument, that argument is

17
00:01:28,950 --> 00:01:35,510
then being passed as the string variable to the format parameter of sprintf. So we can

18
00:01:35,509 --> 00:01:39,039
inject stuff like %d or %s.

19
00:01:39,040 --> 00:01:46,670
It’s also vulnerable to a buffer overflow, because sprintf, does not print to the console,

20
00:01:46,670 --> 00:01:54,790
to stdout, like regular printf, but prints, or stores the formatted string, in buffer.

21
00:01:54,790 --> 00:01:57,520
And the buffer is only 64 bytes long.

22
00:01:57,520 --> 00:02:02,690
Now when you attack this on the VM that you can download here that has these challenges

23
00:02:02,689 --> 00:02:08,659
precompiled, the target variable would be placed after the buffer so that you can overflow

24
00:02:08,660 --> 00:02:14,330
the buffer, and write into target. And then you have target modified and when you make

25
00:02:14,330 --> 00:02:20,290
it so that it’s overflown with 0xdeadbeef you pass this check.

26
00:02:20,290 --> 00:02:25,480
So enter 64characters, and 0xdeadbeef and you won.

27
00:02:25,480 --> 00:02:30,370
But the challenge here also said, try it with less than 10 bytes. And you would do that

28
00:02:30,370 --> 00:02:36,160
by abusing format string modifiers that would stretch the formatted output to for example

29
00:02:36,160 --> 00:02:44,870
64 characters, and then you can simply enter 0xdeadbeef afterwards. So for example %64d

30
00:02:44,870 --> 00:02:51,850
would output a number with a up to 64 character padding. And so 64 characters plus 0xdeadbeef

31
00:02:51,850 --> 00:02:55,570
are written into buffer and you win.

32
00:02:55,569 --> 00:02:59,069
Well is that still possible?

33
00:02:59,070 --> 00:03:05,490
First we have to install gcc and gdb on this fresh maschine and I’m also going ahead

34
00:03:05,489 --> 00:03:11,149
to install peda, a gdb extension that makes things look nicer.

35
00:03:11,150 --> 00:03:15,520
So let’s start with the simple buffer overflow example. But first let’s set a breakpoint

36
00:03:15,519 --> 00:03:21,599
in vuln() before we compare deadbeef. Then let’s start the binary and pass in an input

37
00:03:21,599 --> 00:03:29,369
that is much larger than 64bytes. Okay. So we hit the breakpoint and it compares eax

38
00:03:29,370 --> 00:03:37,260
with 0xdeadbeef. But eax is 0. How can that be? Didn’t we overflow the stack?

39
00:03:37,260 --> 00:03:43,220
Well, we certainly did, the issue is that the target variable doesn’t come after the

40
00:03:43,220 --> 00:03:50,160
buffer. It is before, so we can write as much data as we want, we won’t overwrite target.

41
00:03:50,160 --> 00:03:57,140
You can also see this here. Eax is loaded from base pointer - 0x54, while the address

42
00:03:57,140 --> 00:04:06,280
for the string is loaded from basepointer - 0x50, so it’s located after target.

43
00:04:06,280 --> 00:04:08,980
Well does this mean it’s not exploitable?

44
00:04:08,980 --> 00:04:14,200
mmhh... So if you are familiar with format string exploits, you also know that you can

45
00:04:14,200 --> 00:04:21,190
write data with it, by abusing the %n modifier which writes the amount of already printed

46
00:04:21,190 --> 00:04:26,960
characters to an address on the stack. And we can overflow the stack, so we could place

47
00:04:26,960 --> 00:04:32,710
an address there and then carefully construct the number of characters printed before, such

48
00:04:32,710 --> 00:04:38,900
that it writes 0xdeadbeef to an address. And so we could write to target, and win that

49
00:04:38,900 --> 00:04:39,900
way, right?

50
00:04:39,900 --> 00:04:47,560
But ASLR is our problem. Let me add a printf to the code to print the address of target.

51
00:04:47,560 --> 00:04:52,250
ampercant target returns the reference of a variable, so that’s the address.

52
00:04:52,250 --> 00:04:58,100
And when we compile it and run it in a nice while true loop, you see how crazy the address

53
00:04:58,100 --> 00:05:03,800
of target changes. Target is a local variable so it’s located on the stack. So this is

54
00:05:03,800 --> 00:05:09,590
also a stack address. But how much does it change? It always starts

55
00:05:09,590 --> 00:05:17,680
with 0x7ff and ends in a C. And this one nibble here only appears to be C,D,E or F. That’s

56
00:05:17,680 --> 00:05:25,390
a huge number. It’s over 1 billion. but maybe in this case actually doable. Just takes

57
00:05:25,389 --> 00:05:30,429
some time. Maybe a day or so. I just like to refer to the previous three part video

58
00:05:30,430 --> 00:05:36,640
where we bruteforced a 3 byte stack cookie, that was roughly 16 million possible options.

59
00:05:36,639 --> 00:05:41,879
And so here, 260 million, is in reach, I would say. At least for a very small binary like

60
00:05:41,880 --> 00:05:47,960
this. The execution speed is quite fast. Let’s see how it looks like on 32bit. We

61
00:05:47,960 --> 00:05:53,400
have to install the gcc multilib to do that. And then we can compile it with -m32.

62
00:05:53,400 --> 00:06:00,110
When we execute it a few times, you can see that it obviously has less randomness than

63
00:06:00,110 --> 00:06:06,680
on 64bit. It’s only two full bytes and then again a nibble. That’s about 1 million attempts

64
00:06:06,680 --> 00:06:14,050
to hit it. So definitely even more in reach. But of course it’s only feasible if you

65
00:06:14,050 --> 00:06:19,990
can do millions of attempts reasonably fast, for example locally. If this were an application

66
00:06:19,990 --> 00:06:25,070
that takes longer to start or a remote service, then that would probably mean you couldn’t

67
00:06:25,069 --> 00:06:26,799
really do it.

68
00:06:26,800 --> 00:06:30,660
How to create a format string exploit and how that exactly works with %n you can watch

69
00:06:30,660 --> 00:06:34,920
in multiple other videos that I have done. But there is one additional trick that comes

70
00:06:34,919 --> 00:06:41,519
to mind we could look out for. So to write with %n we expect the target address to be

71
00:06:41,520 --> 00:06:46,570
on the stack. In a classic format string exploit you would use your input that is maybe also

72
00:06:46,569 --> 00:06:52,679
placed on the stack and reference itself. But nobody says it has to be an address you

73
00:06:52,680 --> 00:06:58,550
place there, the stack is full of values, maybe you get lucky. If we look on the stack

74
00:06:58,550 --> 00:07:03,800
when we are at the 0xdeadbeef compare in the execution flow, you can see a lot of stack

75
00:07:03,800 --> 00:07:10,240
addresses. And so these would always be valid stack addresses even with ASLR. Now if one

76
00:07:10,240 --> 00:07:15,460
of those would magically point to target, then we could just reuse it. We could just

77
00:07:15,460 --> 00:07:20,190
reference that address. But if we check the address we know of target,

78
00:07:20,190 --> 00:07:26,600
we can see that it doesn’t show up. Oh well. But you see how creative you can get with

79
00:07:26,599 --> 00:07:32,179
exploitation. We could have been lucky. But let’s actually continue that train of

80
00:07:32,180 --> 00:07:35,660
thought. Ok we don’t have the whole target address

81
00:07:35,660 --> 00:07:41,900
on the stack, but we do have a lot of other stack addresses. And we have an overflow,

82
00:07:41,900 --> 00:07:47,740
so we can overflow into the addresses. And just overwrite some low bytes and keep the

83
00:07:47,740 --> 00:07:52,500
whole front. Let’s add another printf to print the target

84
00:07:52,500 --> 00:07:58,540
value. And print the resulting formatted buffer. And let’s play with that. Here you can see

85
00:07:58,539 --> 00:08:05,609
the sprintf formatted result. Let try to find AAAABBBB on the stack by consuming

86
00:08:05,610 --> 00:08:11,880
values from the stack with someformat modifiers. I wanna find the offset where on the stack

87
00:08:11,879 --> 00:08:19,699
this value is placed, and we can explore that with %lx and the dollar notation.So at stack

88
00:08:19,699 --> 00:08:25,269
offset 1 it’s not, at offset 2 it’s not at offset 3 it’s not. And so forth. But

89
00:08:25,271 --> 00:08:29,701
here at offset 9 we now printed the hex value of our input.

90
00:08:29,699 --> 00:08:36,349
Now let’s look at the stack layout for a nice stack address we could partially overwrite.

91
00:08:36,349 --> 00:08:42,989
Ok so down here is one, let’s see what offset that has. Let’s keep going.

92
00:08:42,990 --> 00:08:48,330
There it is, at offset 19. Which also means from the start at offset

93
00:08:48,330 --> 00:08:54,860
9 to offset 19 we have 10 groups of 8 bytes, so 80 bytes to fill and reach this value.

94
00:08:54,860 --> 00:08:59,980
We can achieve that with a format string that pads a number to 80 bytes, and then some input

95
00:08:59,980 --> 00:09:05,270
to proof that we overflow. And when we now execute it, we see that the

96
00:09:05,269 --> 00:09:11,929
end of our address that got printed by our 19 lx, got overwritten with As.

97
00:09:11,930 --> 00:09:17,680
If you paid attention you saw that target is always at an offset with a c, so we can

98
00:09:17,680 --> 00:09:23,930
choose some input that ends’ with a C as well to overwrite it. For example L, that

99
00:09:23,930 --> 00:09:28,620
is 0x4c. Let’s execute that now, and you can compare

100
00:09:28,620 --> 00:09:35,200
what address we got now through the overwrite with L, and what target really was. You see

101
00:09:35,200 --> 00:09:40,850
that often it’s not the same, but eventually, it will match.

102
00:09:40,850 --> 00:09:49,890
And so if we replace the %lx to print a 8 byte hex value to %n, then we will WRITE to

103
00:09:49,890 --> 00:09:53,470
that address. So now we are writing the amount of printed

104
00:09:53,470 --> 00:10:00,930
characters, 81, because 80 + the single L to this address. And maybe at some point we

105
00:10:00,930 --> 00:10:08,570
hit target. Let’s keep trying. BOOM! There we hit target, we wrote 0x51 to

106
00:10:08,570 --> 00:10:15,060
it, which is 81 in decimal. And that works fairly reliably, we can try those few attempts

107
00:10:15,060 --> 00:10:19,860
by hand. And I think that’s awesome, unfortunately

108
00:10:19,860 --> 00:10:24,510
it’s not quite the solution, because target has to be 0xdeadbeef. And that’s 3 billion

109
00:10:24,510 --> 00:10:30,190
in decimal. So with this technique we would have to first print 3 billion characters before

110
00:10:30,190 --> 00:10:34,040
we can do %n, and that’s not possible.

111
00:10:34,040 --> 00:10:39,500
Anyway I think you can see how much exploitation can become a puzzle that you slowly try to

112
00:10:39,500 --> 00:10:44,720
piece together. In the end I didn’t manage to solve it but exploring this was really

113
00:10:44,720 --> 00:10:47,670
fun. I really wonder if somebody is able to make

114
00:10:47,670 --> 00:10:49,700
a semi reliable exploit for this.

