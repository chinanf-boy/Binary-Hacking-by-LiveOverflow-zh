1
00:00:06,910 --> 00:00:12,780
在这段视频中，我们又进行了一次反向C程序的旅行。具体来说，我们会

2
00:00:12,780 --> 00:00:18,580
讨论全局偏移表（short-got）和过程链接表（short）

3
00:00:18,580 --> 00:00:19,580
PLT).

4
00:00:19,580 --> 00:00:24,660
Let’s start by creating a very simple C program that just calls a couple of libc functions.

5
00:00:24,660 --> 00:00:30,120
所以我只写了两个printfs和一个出口。这两个功能显然是外部功能，

6
00:00:30,119 --> 00:00:35,799
我自己还没有定义。他们来自伦敦银行同业拆借中心。当我编译这个二进制文件时

7
00:00:35,800 --> 00:00:42,850
使用gcc，libc将动态链接到此二进制文件。这意味着libc不是

8
00:00:42,850 --> 00:00:48,710
包括在程序中。使用“ldd”，我们可以看到引用自

9
00:00:48,710 --> 00:00:54,560
这个二进制文件显示它想要libc，它还显示了我系统上的路径。

10
00:00:54,559 --> 00:01:00,449
我的libc二进制文件在哪里。这很好，因为这样程序就可以小得多，而且

11
00:01:00,449 --> 00:01:04,789
libc can receive updates without having to recompile my binnary.

12
00:01:04,790 --> 00:01:10,860
But this also means, that the addresses in libc might be different for each version.

13
00:01:10,860 --> 00:01:16,450
所以，当我必须知道确切的地址时，我怎样才能把一个二进制编译成汇编程序呢？

14
00:01:16,450 --> 00:01:22,270
can create a call instruction? Well this is where the PLT and GOT comes into play.

15
00:01:22,270 --> 00:01:28,000
Let’s open this binary in hopper disassembler and let’s have a look at the main function.

16
00:01:28,000 --> 00:01:32,940
所以我们首先注意到的是，printfs（）到底在哪里？为什么有puts（）调用？

17
00:01:32,940 --> 00:01:37,150
反汇编程序发现我们指定了一个常量字符串，而不是动态格式字符串，

18
00:01:37,150 --> 00:01:42,270
因此决定用Puts替换printf。但不管怎样，我们这里有三个功能

19
00:01:42,270 --> 00:01:47,340
呼叫和Hopper决定在呼叫位置的名称前面加上一个j，可能是

20
00:01:47,340 --> 00:01:51,160
跳跃。不确定。所以如果我们接这个电话，我们注意到

21
00:01:51,160 --> 00:01:58,060
我们不会以libc-puts结尾。我们仍然是二进制的。我们会怎么做，因为

22
00:01:58,060 --> 00:02:05,830
libc is not included in this binary. We landed in the plt section. The process linkage table.

23
00:02:05,830 --> 00:02:13,090
在这里的呼叫会立即转到另一个人的地址

24
00:02:13,090 --> 00:02:20,490
location. And this location got the name puts @ GOT. So let’s go there.

25
00:02:20,490 --> 00:02:26,940
现在我们进入了一个叫做got的部分。全局偏移表。跳跃会跳到任何地方

26
00:02:26,940 --> 00:02:32,420
地址存储在这里。此时，存储在这里的地址正在引用

27
00:02:32,420 --> 00:02:38,670
外部符号。那么……那么他们在这里做什么？

28
00:02:38,670 --> 00:02:43,780
在编译期间，我们不知道看跌期权或退出期权的地址。所以我们只创建一个函数

29
00:02:43,780 --> 00:02:50,930
蹦床。我们叫一个我们知道它在哪里的位置，PLT区。其中包含一个跳转

30
00:02:50,930 --> 00:02:56,430
从该列表（或表，如果需要）中引用跳转位置。我们拥有的一切

31
00:02:56,430 --> 00:03:02,250
要做到这一点，要能够使用库中的外部函数，就必须以某种方式编写

32
00:03:02,250 --> 00:03:06,940
此表中libc函数的地址。这就是我们执行的过程

33
00:03:06,940 --> 00:03:12,840
二进制。正如您现在所知道的，ELF二进制不仅仅是简单的汇编程序代码。在我们之前

34
00:03:12,840 --> 00:03:20,060
代码被执行，复杂的ELF格式被解析，基于这个过程

35
00:03:20,060 --> 00:03:25,360
set up by the kernel. And during that time references like that might get resolved.

36
00:03:25,360 --> 00:03:30,500
所以让我们调试这个二进制文件。这次我们用漏斗吧。首先我们设置一个断点

37
00:03:30,500 --> 00:03:37,540
单击右行中的红色列。然后我们打开调试器界面

38
00:03:37,540 --> 00:03:43,630
with teh buttom on the top right. So let’s step forward until we follow the call to puts().

39
00:03:43,630 --> 00:03:49,860
如预期的那样，我们到达PLT部分，即将跳转到引用的地址。

40
00:03:49,860 --> 00:03:55,730
in the global offset table. Let’s step further and let’s see what happens. Oh… nope.

41
00:03:55,730 --> 00:04:00,860
我们不去写libc。不知怎的，我们就在跳跃之后，推了一个值

42
00:04:00,860 --> 00:04:04,840
现在在堆栈上。正如你看到的每一个PLT条目，也为我们的

43
00:04:04,840 --> 00:04:09,380
函数的作用是：先推一个数字，然后跳到上面的这个地址。和

44
00:04:09,381 --> 00:04:14,541
when we follow this jump we end up in a function called _dl_runtime_resolve.

45
00:04:14,540 --> 00:04:18,530
我们可以使用proc文件系统来查看这个进程的内存映射，以及

46
00:04:18,530 --> 00:04:25,100
我们可以看到_dl_runtime_resolve中的地址属于这个ld.so二进制文件。男性页面

47
00:04:25,100 --> 00:04:31,180
对于“ld.so”，它告诉我们这是动态链接器/加载程序。所以这个图书馆帮助我们

48
00:04:31,180 --> 00:04:36,310
设置对libc的外部引用。这个函数有魔力。不知道它是什么

49
00:04:36,310 --> 00:04:42,020
做了详细的操作，但它将在libc中找到puts（）函数的地址并进行更新

50
00:04:42,020 --> 00:04:48,780
得到表并执行Puts。现在，第二次执行puts（），

51
00:04:48,780 --> 00:04:54,350
当我们跳转到全局偏移量表中存储的地址时，得到了更新

52
00:04:54,350 --> 00:04:58,460
we end up in puts() from libc.

53
00:04:58,460 --> 00:05:04,640
这个全局偏移表在编写漏洞时非常有用，因为

54
00:05:04,639 --> 00:05:06,739
couple of things you can do with it.

55
00:05:06,740 --> 00:05:12,600
首先，我们有一个任意的写入。我们可以在任何地方写一个我们想要的值

56
00:05:12,600 --> 00:05:18,050
memory. So you can simply overwrite the address in the global offset table for a certain function.

57
00:05:18,050 --> 00:05:22,550
下次调用这个函数时，代码将被重定向到

58
00:05:22,550 --> 00:05:25,560
entered in the global offset table.

59
00:05:25,560 --> 00:05:30,410
假设您有一个内存泄漏，例如通过类似于

60
00:05:30,410 --> 00:05:35,890
上一个视频。二进制文件不使用aslr。嗯，系统本身仍然可以

61
00:05:35,889 --> 00:05:42,139
启用了aslr，因此libc的位置总是随机的。但是地址

62
00:05:42,139 --> 00:05:47,439
二进制文件中的全局偏移量表总是固定的。所以当你能从

63
00:05:47,440 --> 00:05:53,150
您控制的地址，可以读取全局偏移量表的一个条目，它是一个地址

64
00:05:53,150 --> 00:05:58,650
在LBC。然后您可以使用它来计算到libc其他位置的偏移量。哪个

65
00:05:58,651 --> 00:06:02,561
is useful if you have to find rop gadgets or you want to do a return-to-libc.

66
00:06:02,560 --> 00:06:03,560
即使您的二进制文件使用aslr，如果您能够泄漏二进制文件的地址

67
00:06:03,560 --> 00:06:04,560
为了避免地址随机化，您可以计算到全局偏移的偏移量。

68
00:06:04,560 --> 00:06:05,560
table and then leak an address of libc that way.

69
00:06:05,560 --> 00:06:08,840
有时甚至在函数中有缓冲区溢出或任意写入，但是

70
00:06:08,840 --> 00:06:14,840
函数本身永远不会返回，因为它调用exit（）或永远循环，从而覆盖

71
00:06:14,840 --> 00:06:20,840
堆栈上的返回指针对重定向代码执行没有帮助。那是

72
00:06:20,840 --> 00:06:25,950
正是利用-exercises.com格式级别4的挑战。我们不能改写

73
00:06:25,949 --> 00:06:37,139
堆栈上的返回地址，因此我们必须依赖不同的技术来获得控制权

74
00:06:37,139 --> 00:06:38,869
over the program execution.

75
00:06:38,870 --> 00:06:44,600
下次使用格式字符串漏洞覆盖

76
00:06:44,600 --> 00:06:46,470
global offset table to redirect code execution.

