1
00:00:06,220 --> 00:00:10,400
在这段视频中，我们将编写相同的程序
与前一部分不同

2
00:00:10,400 --> 00:00:11,560
语言。

3
00:00:11,559 --> 00:00:17,939
由编译器编译的C程序
可以直接执行的机器代码。

4
00:00:17,940 --> 00:00:20,750
另一方面，python是一个解释
语言。

5
00:00:20,750 --> 00:00:24,740
为了理解我试图做出的改变
一个抽象的例子。

6
00:00:24,740 --> 00:00:30,780
你可以把用C编写的程序想象成
为一项特殊任务而制造的机器。

7
00:00:30,779 --> 00:00:38,899
而python本身就是这样一个机器
但这是一台特殊的机器…机器人，

8
00:00:38,900 --> 00:00:43,980
用来解释不同的语言
代码-python代码。

9
00:00:43,980 --> 00:00:49,740
所以，有人写道
"python.c"文件中的C代码。

10
00:00:49,740 --> 00:00:54,890
然后像之前的视频一样使用gcc
将此源代码编译为二进制

11
00:00:54,890 --> 00:00:56,870
名字python。

12
00:00:56,870 --> 00:01:00,570
当使用工具"文件"时，您可以看到这一点。
显示文件信息。

13
00:01:00,570 --> 00:01:07,370
当你在我们的C矩阵程序中使用文件时，
它说它是一个ELF可执行文件。

14
00:01:07,369 --> 00:01:14,249
当你对python程序做同样的操作时
它还表示它是一个ELF可执行文件。

15
00:01:14,250 --> 00:01:17,830
现在，当您执行"python"程序时，
你会得到一个翻译提示，在那里你可以

16
00:01:17,830 --> 00:01:22,410
输入文本，python将解释它
你。

17
00:01:22,409 --> 00:01:27,989
或者只是传递一个python脚本文件，
将执行它。

18
00:01:27,990 --> 00:01:30,670
我希望这是有道理的。

19
00:01:30,670 --> 00:01:33,300
那么让我们创建一个新的python脚本
MyRix.Py

20
00:01:33,300 --> 00:01:38,470
我们还将打开以前的代码
比较它们。

21
00:01:38,470 --> 00:01:43,780
我们可以通过同时指定
带负号大写O的文件名。

22
00:01:43,780 --> 00:01:48,670
这告诉Vim打开垂直拆分的文件。

23
00:01:48,670 --> 00:01:51,110
现在检查光标是否在正确的位置
文件。

24
00:01:51,110 --> 00:01:57,790
如果没有，可以使用ctrl+w左或右
在视图之间切换。

25
00:01:57,790 --> 00:02:02,020
现在按i和进入插入模式
我们开始吧。

26
00:02:02,020 --> 00:02:04,830
在python中，我们不必指定主
功能。

27
00:02:04,830 --> 00:02:09,450
代码将按顺序执行
从文件的开头到结尾。

28
00:02:09,450 --> 00:02:15,260
访问命令行参数argv
我们必须导入一个名为sys的python模块。

29
00:02:15,260 --> 00:02:21,300
使用print sys.argv，我们可以打印内容
这个变量。

30
00:02:21,300 --> 00:02:25,550
那么让我们看看这个sys.argv变量
看起来像。

31
00:02:25,550 --> 00:02:28,720
首先用esc、colon和w保存文件。

32
00:02:28,720 --> 00:02:32,690
然后你可以用冒号！执行命令。

33
00:02:32,690 --> 00:02:34,690
例如LS。

34
00:02:34,690 --> 00:02:39,040
你会看到编辑消失在
背景和它显示的结果

35
00:02:39,040 --> 00:02:41,070
在ls命令中。

36
00:02:41,070 --> 00:02:43,990
所以让我们用它来执行我们的python
程序。

37
00:02:43,989 --> 00:02:46,649
按回车键返回。

38
00:02:46,650 --> 00:02:52,590
冒号！python启动python
参数我们指定脚本名

39
00:02:52,590 --> 00:02:54,080
是Matrx.Py。

40
00:02:54,080 --> 00:03:00,680
除了写名字，你还可以
使用%。VIM将自动更换

41
00:03:00,680 --> 00:03:03,780
%使用当前文件名。

42
00:03:03,780 --> 00:03:06,600
你现在可以看到第一个参数是
MyRix.Py

43
00:03:06,599 --> 00:03:09,059
我们只有这些。

44
00:03:09,060 --> 00:03:14,090
就像我在上一个视频中解释的那样，
传递给程序从程序开始

45
00:03:14,090 --> 00:03:15,090
文件名。

46
00:03:15,090 --> 00:03:17,410
现在让我们添加一些任意参数。

47
00:03:17,410 --> 00:03:23,260
一个普通的，有引号和空格的，还有
再多说几句。

48
00:03:23,260 --> 00:03:26,830
甚至在中间有更多的空间，
看看会发生什么。

49
00:03:26,830 --> 00:03:29,420
有输出。

50
00:03:29,420 --> 00:03:34,710
所以方括号表示python中的一个列表。
元素是逗号分隔的。

51
00:03:34,710 --> 00:03:40,100
列表中包含许多字符串
文件名和我们放的东西

52
00:03:40,099 --> 00:03:41,099
之后。

53
00:03:41,099 --> 00:03:43,409
希望能让命令行参数有点
更清楚。

54
00:03:43,410 --> 00:03:49,290
好的，为了检查我们是否有两个参数，
我们不需要像

55
00:03:49,290 --> 00:03:50,910
ARCC

56
00:03:50,910 --> 00:03:56,040
我们可以检查len（sys.argv）==2。

57
00:03:56,040 --> 00:03:59,160
注意python不使用大括号
定义上下文。

58
00:03:59,159 --> 00:04:02,839
我们得用压痕……呃。

59
00:04:02,840 --> 00:04:05,390
当我按下tab键时，我会得到tab键。

60
00:04:05,390 --> 00:04:06,690
那太难看了。

61
00:04:06,690 --> 00:04:10,150
我喜欢一切都用简单的
空间。

62
00:04:10,150 --> 00:04:17,030
所以可以使用set expandtab shiftwidth=4
软tab止＝4。

63
00:04:17,030 --> 00:04:19,770
现在，当按下tab键时，我们得到4个空格。

64
00:04:19,769 --> 00:04:22,709
现在我们不想发表第一个参数。

65
00:04:22,710 --> 00:04:29,330
所以有了打印和蟒蛇的特殊格式字符串
语法我们可以像在

66
00:04:29,330 --> 00:04:35,340
C.在有花括号的字符串中，
可以定义以下格式参数

67
00:04:35,340 --> 00:04:36,940
应该放在这里。

68
00:04:36,940 --> 00:04:40,270
我们从0开始计数，所以这里会
是第一个格式参数。和不恰当地

69
00:04:40,270 --> 00:04:43,280
我们的第一个格式参数将是sys.argv[1]。

70
00:04:43,280 --> 00:04:50,520
然后我们再按标准打印
错误我们必须直接通过访问stderr

71
00:04:50,520 --> 00:04:52,330
sys模块。

72
00:04:52,330 --> 00:05:01,650
所以sys.stderr.write和再次使用curley
此处指示的大括号0应为第一个

73
00:05:01,650 --> 00:05:09,380
格式化变量。第一个格式变量
是argv列表的第一个元素。

74
00:05:09,380 --> 00:05:13,290
请注意，简单的打印不需要
尾端的反斜杠N换行符。

75
00:05:13,290 --> 00:05:14,860
但写作需要它。

76
00:05:14,860 --> 00:05:19,020
那是因为蟒蛇说印刷术
换行是很常见的，

77
00:05:19,020 --> 00:05:22,000
所以它会自动打印出来。

78
00:05:22,000 --> 00:05:26,880
但是如果你使用一点低级别的访问
函数，然后我们必须自己添加它。

79
00:05:26,880 --> 00:05:31,500
同时，我们使用"写"来
输出文本应该是你的好奇心的顶点。

80
00:05:31,500 --> 00:05:33,530
听起来像是在写文件？

81
00:05:33,530 --> 00:05:34,530
好。

82
00:05:34,530 --> 00:05:37,500
一切都是你记忆中的文件
Linux简介视频。

83
00:05:37,500 --> 00:05:41,840
所以当我们谈论这个的时候要记住这一点
更多。

84
00:05:41,840 --> 00:05:42,840
好的。

85
00:05:42,840 --> 00:05:44,380
让我们测试一下。

86
00:05:44,380 --> 00:05:47,300
保存并退出Vim。

87
00:05:47,300 --> 00:05:56,920
确保两个打开时退出两次
意见。

88
00:05:56,920 --> 00:05:58,760
python matrix.py工作。

89
00:05:58,759 --> 00:06:00,939
就像我们的C程序一样。

90
00:06:00,940 --> 00:06:04,840
如果之前不想输入python
你的python脚本

91
00:06:04,840 --> 00:06:06,290
关于这个。

92
00:06:06,289 --> 00:06:11,039
再次打开脚本并创建新行
在进口上方。

93
00:06:11,039 --> 00:06:14,789
记住你怎么按O而不是I
进入插入模式，这将创建一个新的

94
00:06:14,789 --> 00:06:17,109
光标下的空行？

95
00:06:17,110 --> 00:06:19,530
猜猜当你使用shift o时会发生什么。

96
00:06:19,530 --> 00:06:24,050
它会在光标上方创建一个新的空行
进入插入模式。

97
00:06:24,050 --> 00:06:27,060
现在将shebang添加到python的路径中
二元的。

98
00:06:27,060 --> 00:06:30,030
哎呀！/urr/bin／python
还有一个不错的维基百科词条

99
00:06:30,030 --> 00:06:32,790
Shebang，看看。

100
00:06:32,789 --> 00:06:37,419
这一行告诉程序加载器
是应该用Python执行的脚本。

101
00:06:37,419 --> 00:06:41,789
所以它基本上做了python matrix.py
我们。

102
00:06:41,790 --> 00:06:48,300
现在我们可以像执行C程序一样执行它，
通过使用python脚本的路径…

103
00:06:48,300 --> 00:06:49,300
权限被拒绝？

104
00:06:49,300 --> 00:06:50,300
为什么会这样？

105
00:06:50,300 --> 00:06:52,180
让我们看看权限。

106
00:06:52,180 --> 00:06:59,750
ls-la显示所有文件及其
权限，但也使用矩阵*。这基本上

107
00:06:59,750 --> 00:07:05,010
意味着它应该显示
从矩阵开始，然后一切都可以。

108
00:07:05,010 --> 00:07:10,410
当我们将矩阵二进制与
我们注意到，Matrix python脚本

109
00:07:10,410 --> 00:07:12,050
一对X。

110
00:07:12,050 --> 00:07:14,390
X代表可执行文件。

111
00:07:14,389 --> 00:07:19,399
但是我们的档案只有R和W，代表
用于读写权限。

112
00:07:19,400 --> 00:07:24,920
所以要被允许执行它，我们必须
向该文件添加执行权限。

113
00:07:24,919 --> 00:07:31,099
我们可以起诉希莫德，这代表
更改文件的模式位。

114
00:07:31,100 --> 00:07:36,260
记住要经常阅读手册来学习
有关命令的详细信息。

115
00:07:36,259 --> 00:07:41,789
所以我们可以使用chmod+x添加执行权限
以及文件名。

116
00:07:41,790 --> 00:07:51,170
当我们现在列出文件时，我们看到它
现在具有执行权限。

117
00:07:51,169 --> 00:07:56,409
我在第一个视频中简单地提到了这一点，
但也许现在是谈论的好时机

118
00:07:56,410 --> 00:07:57,890
再多一点。

119
00:07:57,889 --> 00:08:00,209
制表完成非常方便。

120
00:08:00,210 --> 00:08:03,810
例如，当我开始输入当前
带点斜线的路径。

121
00:08:03,810 --> 00:08:08,560
点击两次标签，它显示了所有可能的
可以跟踪的文件。

122
00:08:08,560 --> 00:08:10,020
所以我们要矩阵。

123
00:08:10,020 --> 00:08:13,750
我们只需输入一个字母M，然后点击标签
再一次。

124
00:08:13,750 --> 00:08:16,860
现在它会自动填写
作为矩阵。

125
00:08:16,860 --> 00:08:20,690
因为有多个矩阵文件
停在他们开始的地方

126
00:08:20,690 --> 00:08:21,950
不同。

127
00:08:21,950 --> 00:08:23,750
双选项卡显示所有选项。

128
00:08:23,750 --> 00:08:29,960
现在添加一个。这是唯一的选择
MyRix.Py

129
00:08:29,960 --> 00:08:33,060
又是tab，我们得到了整个文件名。

130
00:08:33,060 --> 00:08:35,700
我经常用蟒蛇。

131
00:08:35,699 --> 00:08:38,359
几乎所有我用python编写的程序。

132
00:08:38,360 --> 00:08:42,520
所以我的大部分例子都会写在
而且它也是一种语言

133
00:08:42,519 --> 00:08:44,729
建议一般学习。

134
00:08:44,730 --> 00:08:51,350
所以也许可以结帐codecademy python课程
或者自己搜索。

135
00:08:51,350 --> 00:08:54,260
在我们结束之前，让我们保持我们的系统
更新。

136
00:08:54,260 --> 00:08:57,970
键入sudo apt get update，更新包
从存储库中列出。

137
00:08:57,970 --> 00:09:20,020
以及apt-get升级，以安装新版本
对于已安装的软件。

