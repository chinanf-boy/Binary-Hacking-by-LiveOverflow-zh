1
00:00:06,220 --> 00:00:11,560
在这段视频中，我们将编写相同的程序，只是使用不同的编程语言： Python。 

2
00:00:11,560 --> 00:00:17,939
由编译器编译的 C 程序，是可以直接执行的机器代码。

3
00:00:17,940 --> 00:00:20,750
Python不同，是一个解释语言。

4
00:00:20,750 --> 00:00:24,740
为了便于理解，我试图做一个抽象的例子。

5
00:00:24,740 --> 00:00:30,780
你可以把用 C编写的程序 ，想象成为一项特殊任务，而制造的机器。

6
00:00:30,780 --> 00:00:38,899
而Python本身就是这样一个机器，但却是一台特殊的机器… 一台机器人，

7
00:00:38,900 --> 00:00:43,980
它用来解释，不同的语言代码 - python代码。

8
00:00:43,980 --> 00:00:49,740
所以，如同有人，在一个"python.c"文件中，编写 C 代码。

9
00:00:49,740 --> 00:00:54,890
然后，像之前视频使用的 "gcc" 一样，将此源代码，编译为一个二进制文件

10
00:00:54,890 --> 00:00:56,870
名字叫做：python。

11
00:00:56,870 --> 00:01:00,570
当，使用显示文件信息的工具"file"时，您可以看到这一点。

12
00:01:00,570 --> 00:01:07,369
当对我们的 "matrix" C 程序，使用 "file" 时，它说，该程序是一个 ELF 可执行文件。

13
00:01:07,369 --> 00:01:14,249
当你对生出的"python"程序，做同样的操作时，它同样表示，该程序是一个 ELF 可执行文件。

14
00:01:14,250 --> 00:01:17,830
现在，当您执行"python"程序时，你会得到一个解释提示">>> "，

15
00:01:17,830 --> 00:01:22,409
在这里，你可以输入文本，而 "python" 将解释它。

16
00:01:22,409 --> 00:01:27,989
或者是，传递一个 python 脚本文件，也能够执行。

17
00:01:27,990 --> 00:01:30,670
我希望，这是讲得明白。

18
00:01:30,670 --> 00:01:33,300
那么，让我们创建一个新的 python脚本，"matrix.py"。

19
00:01:33,300 --> 00:01:38,470
我们还会在旁边，打开以前的代码文件，比较一下它们。

20
00:01:38,470 --> 00:01:43,780
我们可以通过"-O"带文件名，同时指定两文件。

21
00:01:43,780 --> 00:01:48,670
这告诉 Vim，打开垂直拆分的文件布局。

22
00:01:48,670 --> 00:01:51,110
现在检查光标，是否在正确的文件。

23
00:01:51,110 --> 00:01:57,790
如果没有，可以使用 "ctrl+w"加上左或右箭头，在视图之间切换。

24
00:01:57,790 --> 00:02:02,020
现在，按 "i"，进入插入模式我们开始吧。

25
00:02:02,020 --> 00:02:04,830
在 python 中，我们不必指定 "main" 函数。

26
00:02:04,830 --> 00:02:09,450
代码将按顺序执行，从文件的开头到结尾。

27
00:02:09,450 --> 00:02:15,260
访问命令行参数"argv"，我们必须导入一个名为 "sys" 的 python模块。

28
00:02:15,260 --> 00:02:21,300
使用"print sys.argv"，我们可以打印这个变量的内容。

29
00:02:21,300 --> 00:02:25,550
那么，让我们看看这个"sys.argv"变量是怎么样的。

30
00:02:25,550 --> 00:02:28,720
首先用"esc"、":w"，保存文件。

31
00:02:28,720 --> 00:02:32,690
然后你可以用 ":!" 去执行(终端)命令。

32
00:02:32,690 --> 00:02:34,690
例如 "ls"。

33
00:02:34,690 --> 00:02:39,040
你会看到，编辑画面消失在背景，然后

34
00:02:39,040 --> 00:02:41,070
显示 "ls" 命令结果。

35
00:02:41,070 --> 00:02:43,989
所以，让我们用它来执行我们的 python 程序。

36
00:02:43,989 --> 00:02:46,649
按回车键，返回。

37
00:02:46,650 --> 00:02:52,590
":!python" 启动 python，其跟着的第一个参数，我们指定脚本名

38
00:02:52,590 --> 00:02:54,080
是 "matrix.py"。

39
00:02:54,080 --> 00:03:00,680
除了，写名字，你还可以使用"%"。Vim会将"%"

40
00:03:00,680 --> 00:03:03,780
自动更换为当前文件名。

41
00:03:03,780 --> 00:03:06,599
你现在可以看到第一个参数是"matrix.py"。

42
00:03:06,599 --> 00:03:09,059
这就是我们所做的一切

43
00:03:09,060 --> 00:03:14,090
就像，我在上一个视频中，解释的那样，程序名后面，开始传递的，就是程序的

44
00:03:14,090 --> 00:03:15,090
参数。

45
00:03:15,090 --> 00:03:17,410
现在，让我们添加一些任意参数。

46
00:03:17,410 --> 00:03:23,260
一个普通的，有引号和空格的，还有多些字。

47
00:03:23,260 --> 00:03:26,830
甚至在中间有更多的空格，看看会发生什么。

48
00:03:26,830 --> 00:03:29,420
有输出啦。

49
00:03:29,420 --> 00:03:34,710
所以，方括号"[]"，代表 python 中的一个列表。其中的元素用逗号分隔。

50
00:03:34,710 --> 00:03:40,099
这个列表中，包含许多字符串，有开始的文件名，和

51
00:03:40,099 --> 00:03:41,099
之后我们放的东西。

52
00:03:41,099 --> 00:03:43,409
希望，能让命令行参数更清楚。

53
00:03:43,410 --> 00:03:49,290
OK，为了检查我们是否有两个参数，我们不需要

54
00:03:49,290 --> 00:03:50,910
"argc" 那样的

55
00:03:50,910 --> 00:03:56,040
我们仅用"if len(sys.argv)==2"就可以检查啦。

56
00:03:56,040 --> 00:03:59,160
注意 python 不使用大括号'{'，定义作用域。

57
00:03:59,160 --> 00:04:02,839
我们得用缩进(与一个":")… 呃。

58
00:04:02,840 --> 00:04:05,390
当我按下 tab键 时，我会得到 tab（2/4个空格合并的大小）。

59
00:04:05,390 --> 00:04:06,690
但这太难看了。

60
00:04:06,690 --> 00:04:10,150
我喜欢一切，都用简单的空格。

61
00:04:10,150 --> 00:04:17,030
所以，可以使用"set expandtab shiftwidth=4 softtabstop=4"。

62
00:04:17,030 --> 00:04:19,770
现在，当按下 tab键 时，我们得到 4个空格。

63
00:04:19,770 --> 00:04:22,709
现在，我们不想打印第一个参数。

64
00:04:22,710 --> 00:04:29,330
所以，有了 "print" 和 Python 特殊格式字符串语法，我们可以像 C 一样。

65
00:04:29,330 --> 00:04:35,340
在我们定义的花括号字符串中，决定格式参数接下来

66
00:04:35,340 --> 00:04:36,940
所占的位置。

67
00:04:36,940 --> 00:04:39,100
我们从 0 开始计数，所以这里是第一个格式参数。

68
00:04:39,100 --> 00:04:44,450
很明显，我们的第一个格式参数是 "sys.argv[1]"。

69
00:04:44,450 --> 00:04:50,520
然后 'else'，我们向 标准错误流 打印，我们必须直接通过'sys'模块访问

70
00:04:50,520 --> 00:04:52,330
stderr(标准错误流)

71
00:04:52,330 --> 00:05:01,650
所以，"sys.stderr.write"是同样用法，花括号中的"0"，此处应为

72
00:05:01,650 --> 00:05:09,380
第一个格式变量，正是 "argv"列表的第一个元素。

73
00:05:09,380 --> 00:05:13,290
请注意，简单的 print 不需要，尾端加上换行符。

74
00:05:13,290 --> 00:05:14,860
但"write"需要。

75
00:05:14,860 --> 00:05:19,020
那是因为 Python说: "print"函数要换行很常见，

76
00:05:19,020 --> 00:05:22,000
所以，它会自动打印出来。

77
00:05:22,000 --> 00:05:26,880
但是，如果你使用一点底层的访问函数，那我们必须自己添加它。

78
00:05:26,880 --> 00:05:31,500
同时，我们使用"write"来输出文本，应该引起了你的好奇。

79
00:05:31,500 --> 00:05:33,530
听起来像是，在写(write)入文件？

80
00:05:33,530 --> 00:05:34,530
Well。

81
00:05:34,530 --> 00:05:37,500
"一切都是文件"，正如 Linux简介那视频 所说。

82
00:05:37,500 --> 00:05:41,840
所以，要记住这一点，稍后讨论。

83
00:05:41,840 --> 00:05:42,840
OK，好了。

84
00:05:42,840 --> 00:05:44,380
让我们测试一下。

85
00:05:44,380 --> 00:05:47,300
保存，并退出Vim。

86
00:05:47,300 --> 00:05:54,300
确保打开的两个，都退出了视图。

87
00:05:54,300 --> 00:05:56,920
现在"python matrix.py"，工作啦。

88
00:05:56,920 --> 00:05:58,759
现在"python matrix.py"，工作啦。

89
00:05:58,759 --> 00:06:00,939
就像我们的 C程序 一样。

90
00:06:00,940 --> 00:06:04,840
如果之前不想在你的 python脚本 之前，输入 python，

91
00:06:04,840 --> 00:06:06,289
关于这一点嘛。

92
00:06:06,289 --> 00:06:11,039
再次，打开脚本，并在"import"之上，创建新行

93
00:06:11,039 --> 00:06:14,789
记住你是可以按 "o，而不是"i"进入插入模式，这将

94
00:06:14,789 --> 00:06:17,109
在光标下，创建一个新的的空行？

95
00:06:17,110 --> 00:06:19,530
猜猜当你使用"shift o"时，会发生什么。

96
00:06:19,530 --> 00:06:24,050
它会在光标上方，创建一个新的空行，进入插入模式。

97
00:06:24,050 --> 00:06:27,060
现在，添加二进制 python 的 "shebang"路径。

98
00:06:27,060 --> 00:06:30,030
"#!/usr/bin/python"。"Shebang"，还有一个不错的维基百科词条

99
00:06:30,030 --> 00:06:32,789
可以看看。

100
00:06:32,789 --> 00:06:37,419
这一行，告诉程序加载器，这是应该用Python执行的脚本。

101
00:06:37,419 --> 00:06:41,789
所以它基本上，帮我们做了"python matrix.py"

102
00:06:41,790 --> 00:06:47,600
现在，我们可以像执行C程序一样执行它，就是，通过使用 python脚本的路径…

103
00:06:47,600 --> 00:06:49,225
权限被拒绝？

104
00:06:49,225 --> 00:06:49,295
permission denied?
105
00:06:49,300 --> 00:06:50,300
为什么会这样？

106
00:06:50,300 --> 00:06:52,180
让我们看看权限。

107
00:06:52,180 --> 00:06:59,750
"ls-la"显示所有文件及其权限，但也使用"matrix*"。这基本上

108
00:06:59,750 --> 00:07:05,010
意味着它应该显示，从"matrix"开始，后跟一切的文件。

109
00:07:05,010 --> 00:07:10,410
当我们将 "matrix" 二进制与 "matrix" python脚本进行对比

110
00:07:10,410 --> 00:07:12,050
我们注意到有，一对x。

111
00:07:12,050 --> 00:07:14,389
"x"代表，可执行文件。

112
00:07:14,389 --> 00:07:19,399
但是，我们的脚本只有"r"/"w"，代表 读/写 权限。

113
00:07:19,400 --> 00:07:24,919
所以，要被允许执行它，我们必须向该文件添加执行的权限。

114
00:07:24,919 --> 00:07:31,099
我们可以"chmod"，这个表现为，更改一个文件的模式位。

115
00:07:31,100 --> 00:07:36,259
记住要经常阅读手册，来学习有关命令的详细信息。

116
00:07:36,259 --> 00:07:41,789
所以，我们可以使用 "chmod +x"加上文件名，为该文件添加执行权限，。

117
00:07:41,790 --> 00:07:51,169
现在，我们列出文件，我们可以看到，它具有执行权限了。让我们先扩展知识下

118
00:07:51,169 --> 00:07:56,409
我在第一个视频中简单提到，但也许现在是个了解更好的

119
00:07:56,410 --> 00:07:57,889
机会。

120
00:07:57,889 --> 00:08:00,209
Tab 补全提示非常方便。

121
00:08:00,210 --> 00:08:03,810
例如，当我开始输入当前带 "./" 的路径。

122
00:08:03,810 --> 00:08:08,560
点击两次 "tab"，它显示了所有可能的，可以跟踪的文件。

123
00:08:08,560 --> 00:08:10,020
所以，若我们要 "matrix" 。

124
00:08:10,020 --> 00:08:13,750
我们，只需输入一个字母 m，然后再点击 tab。

125
00:08:13,750 --> 00:08:16,860
现在它会自动填写为 "matrix" 。

126
00:08:16,860 --> 00:08:20,690
因为有多个 "matrix" 文件，(提示)会停在它们

127
00:08:20,690 --> 00:08:21,950
开始不同的地方。

128
00:08:21,950 --> 00:08:23,750
双下Tab，会显示所有选项。

129
00:08:23,750 --> 00:08:29,960
现在添加一个 '.'。那唯一的选择就是 "matrix.py"

130
00:08:29,960 --> 00:08:33,060
再点 tab，我们得到了整个文件名。

131
00:08:33,060 --> 00:08:35,699
我经常用 Python。

132
00:08:35,699 --> 00:08:38,359
几乎所有程序，我是用 python 编写的。

133
00:08:38,360 --> 00:08:42,519
所以，我的大部分例子都是Python语言，且

134
00:08:42,519 --> 00:08:44,729
我一般推荐你学习。

135
00:08:44,730 --> 00:08:51,350
所以也许可以瞧瞧 codecademy 的 python课程，或者自己搜索下。

136
00:08:51,350 --> 00:08:54,260
在我们结束之前，让我们保持系统的最新版本。

137
00:08:54,260 --> 00:08:57,970
键入"sudo apt get update"，从存储库列表中，更新包。

138
00:08:57,970 --> 00:09:06,300
而这个"apt-get upgrade"，就是给已安装的软件，安装新版本的。

139
00:09:06,300 --> 00:09:20,020
虽然要等很久，但保持更新是个好习惯....

