1
00:00:00,240 --> 00:00:05,370
Last video we have explored a format string
vulnerability from the protostar examples,

2
00:00:05,370 --> 00:00:09,740
but had it compiled on a modern system with
ASLR and 64bit.

3
00:00:09,740 --> 00:00:13,930
At first I thought we couldn’t solve it
but explored some tricks and played around

4
00:00:13,929 --> 00:00:17,509
with it, but then actually figured out a reliable
technique.

5
00:00:17,510 --> 00:00:24,120
So let’s explore some more of the format
levels.

6
00:00:24,119 --> 00:00:31,289
Format1, at first, looks very simple.

7
00:00:31,289 --> 00:00:35,349
Remember last time we just failed because
it required that we write to target the exact

8
00:00:35,350 --> 00:00:39,670
value 0xdeadbeef, and here we just have to
write..

9
00:00:39,670 --> 00:00:40,670
Something?

10
00:00:40,670 --> 00:00:44,080
Let’s have quick look if our trick still
works.

11
00:00:44,080 --> 00:00:49,430
So this level also takes an argument, but
passes it directly to printf.

12
00:00:49,430 --> 00:00:51,860
No sprintf and buffer involved.

13
00:00:51,860 --> 00:00:52,860
Anyway.

14
00:00:52,860 --> 00:00:58,820
we compile it again on our 64bit ubuntu version
and open it in gdb.

15
00:00:58,820 --> 00:01:04,630
Then we set a breakpoint at the if compare
of target, run it and as arguments we use

16
00:01:04,629 --> 00:01:06,169
AAAAAAAAAA.

17
00:01:06,170 --> 00:01:08,410
Then we have a look at the stack.

18
00:01:08,409 --> 00:01:11,259
See how our As don’t show up?

19
00:01:11,259 --> 00:01:12,649
Where are they?

20
00:01:12,649 --> 00:01:14,819
Let’s keep looking further down.

21
00:01:14,820 --> 00:01:16,600
Oh wow.

22
00:01:16,600 --> 00:01:19,290
They are all the way down there.

23
00:01:19,290 --> 00:01:21,360
And what’s all this stuff again?

24
00:01:21,360 --> 00:01:22,360
Well so.

25
00:01:22,360 --> 00:01:27,200
See, we didn’t copy our string input to
a local variable like buffer did in the last

26
00:01:27,200 --> 00:01:28,200
challenge.

27
00:01:28,200 --> 00:01:30,470
We directly print the arguments.

28
00:01:30,469 --> 00:01:35,309
And the arguments are placed, along with the
environment variables all the way at the start

29
00:01:35,310 --> 00:01:36,680
of the stack.

30
00:01:36,679 --> 00:01:38,579
So these are the environment variables.

31
00:01:38,579 --> 00:01:43,599
And you see, there is no stack address we
could overwrite and abuse like we did last

32
00:01:43,600 --> 00:01:44,600
level.

33
00:01:44,600 --> 00:01:45,600
That sucks.

34
00:01:45,600 --> 00:01:51,070
But actually it’s still solveable, we don’t
need the trick from last video at all.

35
00:01:51,069 --> 00:01:53,309
It’s simpler than you might think.

36
00:01:53,310 --> 00:01:58,180
But let’s explore that with the next challenge,
format2, that one we haven’t looked at yet

37
00:01:58,179 --> 00:02:02,319
and boils down to the same thing.

38
00:02:02,319 --> 00:02:04,249
Looks a bit more promising, right?

39
00:02:04,249 --> 00:02:07,999
It does read data into a local variable on
the stack.

40
00:02:07,999 --> 00:02:11,719
But it doesn’t look like we can overflow
the buffer.

41
00:02:11,720 --> 00:02:15,700
This program gets the input from standard
input instead of an argument.

42
00:02:15,700 --> 00:02:19,490
And then later target is checked if it’s
64.

43
00:02:19,490 --> 00:02:20,500
Ok.

44
00:02:20,500 --> 00:02:24,300
So let’s compile it and open it in gdb.

45
00:02:24,300 --> 00:02:30,450
Again we look for the if-compare, seems to
be here, 0x40 is 64.

46
00:02:30,450 --> 00:02:32,970
And set a breakpoint then run it.

47
00:02:32,970 --> 00:02:37,110
This time it’s waiting for input, so enter
some As and Bs.

48
00:02:37,110 --> 00:02:40,440
Now we hit the breakpoint and let’s have
a look at the stack.

49
00:02:40,440 --> 00:02:46,560
Mh, we know that our buffer has 512 bytes,
and looks like there are a loot of stack addresses

50
00:02:46,560 --> 00:02:47,890
in range.

51
00:02:47,890 --> 00:02:54,200
But why is that, isn’t the 512 bytes buffer
unallocated or empty?

52
00:02:54,200 --> 00:02:55,660
Well no not really.

53
00:02:55,660 --> 00:03:00,200
You see it’s a local variable on the stack,
which means it simply moved the stack pointer

54
00:03:00,200 --> 00:03:04,320
further up to make space for it, but doesn’t
clear it.

55
00:03:04,320 --> 00:03:08,310
So these are leftover values from other functions
that ran before and had a stack there, which

56
00:03:08,310 --> 00:03:13,650
then got destroyed again when they returned,
but their values always remain there.

57
00:03:13,650 --> 00:03:18,150
For regular program execution that doesn’t
really matter, except that you must not expect

58
00:03:18,150 --> 00:03:23,100
a variable to be initialised with zeros, because
you can have bad luck and something was in

59
00:03:23,100 --> 00:03:24,640
it’s place before.

60
00:03:24,640 --> 00:03:25,640
Anyway.

61
00:03:25,640 --> 00:03:28,060
Let’s see where our target variable is.

62
00:03:28,060 --> 00:03:32,690
We can use print and then ampercant target
to get a pointer, so basically the address

63
00:03:32,690 --> 00:03:34,560
of target.

64
00:03:34,560 --> 00:03:36,060
But what is that?

65
00:03:36,060 --> 00:03:39,020
That doesn’t look like a stack address?

66
00:03:39,020 --> 00:03:43,660
Somebody who has some experience with exploitation
on 64bit knows already what that is.

67
00:03:43,660 --> 00:03:46,750
It’s a very recognisable address.

68
00:03:46,750 --> 00:03:52,310
With vmmap you can check the virtual memory
and see that it’s part of our binary?

69
00:03:52,310 --> 00:03:54,520
Look at the permissions for this memory region.

70
00:03:54,520 --> 00:03:57,840
It is read and writeable, not executable.

71
00:03:57,840 --> 00:03:59,560
So it’s not where code is.

72
00:03:59,560 --> 00:04:01,190
It’s in a data segment.

73
00:04:01,190 --> 00:04:07,170
And when we look at the code we see that target
isn’t defined in a function as local variable.

74
00:04:07,170 --> 00:04:12,450
It’s a global variable, so it’s placed
in a data segment.

75
00:04:12,450 --> 00:04:18,360
Now if you have some experience with exploitation
64bit targets, you also know that that means,

76
00:04:18,359 --> 00:04:22,439
this address is not affected by ASLR by default.

77
00:04:22,440 --> 00:04:27,260
Lets add another printf here, like we did
last video to print the address of target.

78
00:04:27,259 --> 00:04:32,859
And when we run it a few times, you see target
doesn’t change.

79
00:04:32,860 --> 00:04:34,000
Awesome!

80
00:04:34,000 --> 00:04:36,180
So it should be fairly straight forward.

81
00:04:36,180 --> 00:04:39,100
Step 1: let’s find our input on the stack.

82
00:04:39,099 --> 00:04:44,049
We enter some As followed by %x to print stack
values.

83
00:04:44,050 --> 00:04:45,050
And here we are.

84
00:04:45,050 --> 00:04:47,260
1, 2, 3, 4, 5, 6.

85
00:04:47,259 --> 00:04:50,379
At offset 6 we have our input.

86
00:04:50,379 --> 00:04:56,209
So we could place our address there instead
of the As, and then replace the 6th %x with

87
00:04:56,210 --> 00:04:59,040
the %n to write to it.

88
00:04:59,039 --> 00:05:01,399
Let’s try it.

89
00:05:01,400 --> 00:05:06,850
So we should now enter our input via echo,
so we can encode raw characters in hex.

90
00:05:06,849 --> 00:05:09,529
Then pipe the input into format2.

91
00:05:09,530 --> 00:05:11,610
So let’s enter the address of target.

92
00:05:11,610 --> 00:05:20,070
Ah see, there it is, but it’s 4 bytes, so
there is also a space still included.

93
00:05:20,070 --> 00:05:23,980
This has to be a zero, because the address
is only 3 bytes.

94
00:05:23,979 --> 00:05:27,599
So we add that, but now we don’t see any
output anymore.

95
00:05:27,599 --> 00:05:28,599
What happened?

96
00:05:28,599 --> 00:05:31,649
Well, printf prints strings.

97
00:05:31,650 --> 00:05:37,150
And strings are null-terminated in C. So printf
stops when it reahed the 0.

98
00:05:37,150 --> 00:05:40,010
So we never reach our %x format modifiers.

99
00:05:40,009 --> 00:05:47,399
This means, we should move our address to
the end, so we can have format stuff before.

100
00:05:47,400 --> 00:05:49,670
Now let’s try to find again our address.

101
00:05:49,669 --> 00:05:54,159
This time I’m using the dollar syntax to
enter an offset directly.

102
00:05:54,159 --> 00:05:59,529
So we know our start was at offset 6, so the
address has to be further down.

103
00:05:59,530 --> 00:06:04,370
Also don’t forget to escape the dollar here
on the commandline, because dollar is a special

104
00:06:04,370 --> 00:06:06,680
charachter for the shell.

105
00:06:06,680 --> 00:06:10,450
If we keep going with the offsets, we can
find the As.

106
00:06:10,449 --> 00:06:14,499
Now sometimes the offset might not be right,
so maybe you have to add or remove a few characters

107
00:06:14,500 --> 00:06:18,030
as padding to align it perfectly.

108
00:06:18,030 --> 00:06:19,800
Ok now looks good.

109
00:06:19,800 --> 00:06:22,850
Let’s change it to a %n.

110
00:06:22,849 --> 00:06:24,629
Segmentation fault.

111
00:06:24,630 --> 00:06:26,010
Well that didn’t work.

112
00:06:26,009 --> 00:06:27,009
Weird.

113
00:06:27,009 --> 00:06:32,269
Let’s write our input to a file, open gdb,
and use that file as input to investigate

114
00:06:32,270 --> 00:06:33,800
the crash.

115
00:06:33,800 --> 00:06:35,960
So here we are at a move.

116
00:06:35,960 --> 00:06:41,380
It tries to move whatever is in r15d into
the address in rax.

117
00:06:41,380 --> 00:06:44,280
And so rax appears to be an invalid address.

118
00:06:44,279 --> 00:06:46,309
It’s not our target.

119
00:06:46,310 --> 00:06:48,650
There is a 0xa.

120
00:06:48,650 --> 00:06:50,490
And that is obviously a newline.

121
00:06:50,490 --> 00:06:51,550
So that’s the issue.

122
00:06:51,550 --> 00:06:56,120
We are on 64bit, so we have 64bit addresses.

123
00:06:56,120 --> 00:07:00,190
But we only entered 4 bytes, and after the
echo is a newline.

124
00:07:00,189 --> 00:07:03,739
So we just have to add 4 more nullbytes.

125
00:07:03,740 --> 00:07:06,190
Ok we don’t get a crash now.

126
00:07:06,189 --> 00:07:08,489
But target is still 0.

127
00:07:08,490 --> 00:07:09,490
How is that?

128
00:07:09,490 --> 00:07:12,760
Let’s make it crash again by making the
address invalid again.

129
00:07:12,759 --> 00:07:16,919
This way we should be able to investigate
if our address would be correct and what is

130
00:07:16,919 --> 00:07:18,589
written to it.

131
00:07:18,590 --> 00:07:20,740
So we see, rax looks good.

132
00:07:20,740 --> 00:07:23,820
It only is invalid because of what we changed.

133
00:07:23,819 --> 00:07:25,829
Otherwise it would be great.

134
00:07:25,830 --> 00:07:30,710
And so it tries to write r15d to it, and that
is, 0?

135
00:07:30,710 --> 00:07:31,710
What?

136
00:07:31,710 --> 00:07:35,890
Shouldn’t %n write the amount of characters
already printed?

137
00:07:35,889 --> 00:07:38,649
Let’s think for a second.

138
00:07:38,650 --> 00:07:39,850
Ohhhhhh.

139
00:07:39,850 --> 00:07:41,430
Of course it’s 0.

140
00:07:41,430 --> 00:07:44,010
Because we didn’t pint anything yet.

141
00:07:44,009 --> 00:07:48,399
Before we do the %n we obviously have to print
something first.

142
00:07:48,400 --> 00:07:53,560
So let’s add %64d, to print 64 characters.

143
00:07:53,560 --> 00:07:59,330
Now that’s 4 characters long, this means
we shifted everything by 4, and in order to

144
00:07:59,330 --> 00:08:05,240
lign up everything again, that the address
is at the correct offset, we have to subtract

145
00:08:05,240 --> 00:08:07,060
4 characters somewhere.

146
00:08:07,060 --> 00:08:11,600
But luckily we made the padding earlier large
enough and so that’s simple.

147
00:08:11,600 --> 00:08:15,410
And here we go, it’s “you modified the
target”.

148
00:08:15,409 --> 00:08:21,019
FINALLYYY finally we managed to exploit a
simple example on a modern system without

149
00:08:21,020 --> 00:08:22,790
much hassle.

150
00:08:22,789 --> 00:08:24,309
Goddamit.

151
00:08:24,309 --> 00:08:29,919
So maybe now you wonder, but the system has
ASLR, why is this address fixed.

152
00:08:29,919 --> 00:08:36,009
Well, the system has aslr, and the system
libraries like libc are affected by aslr,

153
00:08:36,012 --> 00:08:37,102
you can see that when you use ldd to print
the library dependencies of the binary, it

154
00:08:37,099 --> 00:08:38,099
keeps changing.

155
00:08:38,099 --> 00:08:41,239
But the binary itself is not affected by ASLR.

156
00:08:41,240 --> 00:08:46,060
Unless we specifically compile it to be position
independent code.

157
00:08:46,060 --> 00:08:52,820
And wie can do that with the -pie flag for
position independent executable and -fPIC

158
00:08:52,820 --> 00:08:55,420
for position independent code.

159
00:08:55,420 --> 00:09:01,570
If we now execute format2 and check the address
of target, then we see it keeps changing a

160
00:09:01,570 --> 00:09:02,630
lot.

161
00:09:02,630 --> 00:09:05,250
Now it’s going to be much harder.

162
00:09:05,250 --> 00:09:08,320
Maybe with some strategies from the last video
it’s doable.

163
00:09:08,320 --> 00:09:10,910
I leave that as an exercise to you watching.

