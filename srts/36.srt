1
00:00:00,149 --> 00:00:05,679
This video is the third and final video where we will now finish the exploit for stack level

2
00:00:05,680 --> 00:00:10,050
0 from protostar, which we have compiled on a modern system.

3
00:00:10,049 --> 00:00:14,769
In the first part we got a general overview of what has changed when the code is compiled

4
00:00:14,769 --> 00:00:18,389
with a more modern compiler and looked more closely at the stack cookie.

5
00:00:18,390 --> 00:00:24,390
In the second part we then ignored the cookie for now and identified a few more exploitation

6
00:00:24,390 --> 00:00:27,800
mitigations and developed a bypass for them.

7
00:00:27,800 --> 00:00:30,500
So only one thing is left.

8
00:00:30,499 --> 00:00:39,839
Finally defeating the stack cookie.

9
00:00:39,840 --> 00:00:44,290
Like we talked about in the first video, we can bruteforce a stack cookie if the binary

10
00:00:44,290 --> 00:00:46,460
is a 32 bit binary.

11
00:00:46,460 --> 00:00:49,680
There are around 16 million possible values for a stack cookie.

12
00:00:49,680 --> 00:00:55,230
That’s not that much, but 16 million executions is maybe a number where you start want to

13
00:00:55,230 --> 00:00:56,780
optimize a bit.

14
00:00:56,780 --> 00:01:01,440
While I’m not an expert in super fast computing, I decided I didn’t want to write a potentially

15
00:01:01,440 --> 00:01:04,580
slow python script, but write some C code.

16
00:01:04,580 --> 00:01:09,250
But like I said I’m not an expert in what is the fastest and I actually suspect that

17
00:01:09,250 --> 00:01:13,860
maybe the bottleneck here would not be a slow script, but the kernel which has to do a lot

18
00:01:13,860 --> 00:01:16,860
of stuff to execute the program over and over again.

19
00:01:16,860 --> 00:01:21,670
So maybe it’s unnecessary to write C code and maybe my C code is very bad too.

20
00:01:21,670 --> 00:01:25,940
But I just wanted to mention it that it’s not always easy to decide what is the best

21
00:01:25,940 --> 00:01:27,050
approach.

22
00:01:27,050 --> 00:01:30,170
Now that we said that, let’s try to approach this step by step.

23
00:01:30,170 --> 00:01:31,170
First.

24
00:01:31,170 --> 00:01:36,870
How do you execute a program in C. Well, there is a system call for it called exec.

25
00:01:36,870 --> 00:01:41,320
But usually we never call syscalles ourselves directly, but use wrapper functions provided

26
00:01:41,320 --> 00:01:43,420
by something like libc.

27
00:01:43,420 --> 00:01:47,530
So libc offers a few different versions of exec, but they are ultimately all using the

28
00:01:47,530 --> 00:01:50,060
same exec syscall underneath.

29
00:01:50,060 --> 00:01:51,250
It says here in the man page:

30
00:01:51,250 --> 00:01:56,500
“The exec() family of functions replaces the current process image with a new process

31
00:01:56,500 --> 00:01:57,500
image.”

32
00:01:57,500 --> 00:02:01,880
I think when you never thought about how a program is executed before, this sounds really

33
00:02:01,880 --> 00:02:02,880
weird.

34
00:02:02,880 --> 00:02:06,470
“Why do you replaced the current process and not just execute it?

35
00:02:06,470 --> 00:02:07,870
That’s so weird”.

36
00:02:07,869 --> 00:02:11,789
Well that’s just how it works, that’s the execution model of Linux.

37
00:02:11,790 --> 00:02:16,540
And so in our case we don’t just want to exec and thus replace our program, but we

38
00:02:16,540 --> 00:02:21,860
want to execute the stack0 binary as a new process over and over again.

39
00:02:21,859 --> 00:02:27,329
To spawn a new process we have to fork the process before we exec.

40
00:02:27,329 --> 00:02:31,709
fork() creates a new process by duplicating the calling process.

41
00:02:31,709 --> 00:02:35,519
The new process is referred to as the child process.

42
00:02:35,519 --> 00:02:40,379
The calling process is referred to as the parent process.

43
00:02:40,379 --> 00:02:44,899
And maybe also interesting is this down here: Difference between C library function and

44
00:02:44,900 --> 00:02:46,230
the actual kernel.

45
00:02:46,230 --> 00:02:51,950
Since version 2.3.3, rather than invoking the kernel's fork() system call, the glibc

46
00:02:51,950 --> 00:02:56,750
fork() wrapper [...] invokes clone(2) with flags that provide the same effect as the

47
00:02:56,750 --> 00:02:59,100
traditional system call.

48
00:02:59,099 --> 00:03:03,109
So what you do to execute the process over and over is to:

49
00:03:03,109 --> 00:03:05,159
First fork our current process.

50
00:03:05,159 --> 00:03:06,829
now we have a child.

51
00:03:06,829 --> 00:03:09,149
An actual new separate process.

52
00:03:09,150 --> 00:03:14,880
And you have to imagine this code is now dooplicated, we have two processes running the same code,

53
00:03:14,879 --> 00:03:17,669
just one runs as the child and one runs as the parent.

54
00:03:17,670 --> 00:03:21,920
And you can check the return value of fork which process you are.

55
00:03:21,919 --> 00:03:24,259
In the parent process you get the pid of the child.

56
00:03:24,260 --> 00:03:26,160
In the child it’s just 0.

57
00:03:26,160 --> 00:03:31,290
And then in the child process we can call exec, to replace the current process with

58
00:03:31,290 --> 00:03:32,650
stack 0.

59
00:03:32,650 --> 00:03:35,270
Now in our case we want to communicate with the child.

60
00:03:35,269 --> 00:03:40,279
Meaning we want to write the exploit input to it, and read the output of it, to determine

61
00:03:40,280 --> 00:03:42,570
if we were successful.

62
00:03:42,569 --> 00:03:45,469
Usually you would do this by creating pipes.

63
00:03:45,470 --> 00:03:50,950
pipe() creates a pipe, a unidirectional data channel that can be used for interprocess

64
00:03:50,950 --> 00:03:52,390
communication.

65
00:03:52,389 --> 00:03:57,349
The array pipefd is used to return two file descriptors referring to the ends of the pipe.

66
00:03:57,349 --> 00:04:00,869
pipefd[0] refers to the read end of the pipe.

67
00:04:00,870 --> 00:04:04,360
pipefd[1] refers to the write end of the pipe.

68
00:04:04,359 --> 00:04:08,159
Data written to the write end of the pipe is buffered by the kernel until it is read

69
00:04:08,160 --> 00:04:11,510
from the read end of the pipe.

70
00:04:11,510 --> 00:04:14,280
Basically the same pipe you can use on the commandline.

71
00:04:14,280 --> 00:04:19,940
You pipe stdout from one program, cat, into the stdin of another program, grep.

72
00:04:19,940 --> 00:04:23,490
That’s why we call this character a “pipe”.

73
00:04:23,490 --> 00:04:27,580
So for basic stdin and stdout communication you would create two pipes.

74
00:04:27,580 --> 00:04:31,870
And then when you fork, because you clone the process, the child and the parent have

75
00:04:31,870 --> 00:04:33,860
access to the same pipe.

76
00:04:33,860 --> 00:04:37,980
Now obviously depending on if you are the parent or the child, you use one or the other

77
00:04:37,979 --> 00:04:38,979
side of it.

78
00:04:38,979 --> 00:04:44,019
And in case of the child, we are actually going the replace the default stdin and stdout

79
00:04:44,020 --> 00:04:45,430
now with those pipes.

80
00:04:45,430 --> 00:04:47,920
By calling dup2.

81
00:04:47,919 --> 00:04:51,839
The dup2() system call performs the same task as dup(),

82
00:04:51,840 --> 00:04:55,550
And The dup() system call creates a copy of the file descriptor.

83
00:04:55,550 --> 00:05:01,020
After a successful return, the old and new file descriptors may be used interchangeably.

84
00:05:01,020 --> 00:05:05,510
They refer to the same open file description and thus share everything.

85
00:05:05,509 --> 00:05:11,209
But dup2, instead of using the lowest-numbered unused file descriptor as dup(), it uses the

86
00:05:11,210 --> 00:05:15,490
descriptor number specified in newfd, the second paramenter.

87
00:05:15,490 --> 00:05:20,900
If the descriptor newfd was previously open, it is silently closed before being reused.

88
00:05:20,900 --> 00:05:27,390
So dup2 closes the current stdin and stdout of the child, and plugs in the new pipe we

89
00:05:27,389 --> 00:05:28,499
created.

90
00:05:28,500 --> 00:05:33,120
And when we exec, the stack0, and replace the current process with the new one, stuff

91
00:05:33,120 --> 00:05:36,000
like open fildescriptors stay in tact.

92
00:05:36,000 --> 00:05:42,580
So the new process will use the pipes we just connected for reading input and writing output.

93
00:05:42,580 --> 00:05:46,670
And then in the parent we can simply read and write to the other end of the pipe and

94
00:05:46,669 --> 00:05:49,049
thus communicate with the child process stack0.

95
00:05:49,050 --> 00:05:54,130
A nice thing to do is to close the ends of the pipes you are not using in either process.

96
00:05:54,130 --> 00:05:58,300
So for example we don’t need the reading side of the stdin pipe because we want to

97
00:05:58,300 --> 00:06:01,290
write, send data, to the child process.

98
00:06:01,289 --> 00:06:02,769
Ok.

99
00:06:02,770 --> 00:06:06,760
Once we have written our buffer overflow input, we can wait for the child process to finish

100
00:06:06,759 --> 00:06:10,119
and read the output to see if we were successful.

101
00:06:10,120 --> 00:06:13,280
Now here is a first big issue.

102
00:06:13,280 --> 00:06:14,300
Buffering.

103
00:06:14,300 --> 00:06:16,790
Libc will buffer output you write.

104
00:06:16,789 --> 00:06:19,839
So the output of the child process is buffered in the process.

105
00:06:19,840 --> 00:06:24,870
And you can imagine, that if we do a buffer overflow, screw with the stack and get a segfault

106
00:06:24,870 --> 00:06:26,390
this buffer is lost.

107
00:06:26,389 --> 00:06:29,509
The program is just dying horribly.

108
00:06:29,509 --> 00:06:33,329
But maybe you think that doesn’t make much sense, because we showed in part 2, that our

109
00:06:33,330 --> 00:06:37,960
exploit theoretically works and we see the output on the shell.

110
00:06:37,960 --> 00:06:40,670
We saw the modified variable message.

111
00:06:40,669 --> 00:06:44,399
SO how how does it make sense that the shell would see the output but I’m telling you

112
00:06:44,400 --> 00:06:47,730
now, we won’t see it with the code we just have written?

113
00:06:47,730 --> 00:06:48,730
Well.

114
00:06:48,730 --> 00:06:52,980
There is a difference to how libc buffers output depending on what kind of pipe it’s

115
00:06:52,979 --> 00:06:53,979
connected to.

116
00:06:53,979 --> 00:06:58,729
And in our case we have just used regular pipes and libc will buffer the output data

117
00:06:58,729 --> 00:07:03,549
until the process calls flush(), or maybe until it’s filled nicely, maybe after 1024

118
00:07:03,550 --> 00:07:04,550
bytes or so.

119
00:07:04,550 --> 00:07:05,550
I don’t know.

120
00:07:05,550 --> 00:07:10,340
But we have neither, the output is super short and the child process never calls flush().

121
00:07:10,340 --> 00:07:13,040
So what’s different on the shell.

122
00:07:13,040 --> 00:07:17,560
Well programs executed by the shell are not connected via regular pipes, but are connected

123
00:07:17,560 --> 00:07:19,500
to a pseudo terminal.

124
00:07:19,500 --> 00:07:20,650
Pty.

125
00:07:20,650 --> 00:07:21,860
And when libc sees.

126
00:07:21,860 --> 00:07:26,550
That the output is written to a pty, pseudo terminal, then it will flush() the buffer

127
00:07:26,550 --> 00:07:28,220
upon a newline.

128
00:07:28,219 --> 00:07:33,329
Because newlines are like the ultimative indication that you want to print a new line (laugh)

129
00:07:33,330 --> 00:07:35,130
on the terminal output.

130
00:07:35,129 --> 00:07:39,909
I think it’s like speed thing, you don’t want to flush if not necessary, but on the

131
00:07:39,909 --> 00:07:43,279
terminal you want to see outputs after a newline.

132
00:07:43,280 --> 00:07:48,390
This means, we could also execute the stack0 program in the context of a pty, so that we

133
00:07:48,389 --> 00:07:52,499
fool libc into flushing on every newline.

134
00:07:52,499 --> 00:07:55,329
And there is a convinient libc function that does that for us.

135
00:07:55,330 --> 00:07:58,040
Called forkpty()

136
00:07:58,039 --> 00:08:04,349
The forkpty() function combines openpty (open pseudo terminal), fork(2) (which we know),

137
00:08:04,349 --> 00:08:10,179
and login_tty() to create a new process operating in a pseudoterminal.

138
00:08:10,180 --> 00:08:13,700
The file descriptor of the master side of the pseudoterminal is returned in amaster.

139
00:08:13,699 --> 00:08:15,729
So that’s really cool.

140
00:08:15,729 --> 00:08:20,359
We fork a child process and already get the filedescriptor so we can communicate with

141
00:08:20,360 --> 00:08:21,940
the child process.

142
00:08:21,939 --> 00:08:27,119
Then I disable a few options of the terminal, for exampel I don’t want to echo the input

143
00:08:27,120 --> 00:08:28,460
again.

144
00:08:28,460 --> 00:08:32,650
For example if you watch my embedded hardware security CTF videos you notice that usually

145
00:08:32,650 --> 00:08:36,300
whenever I type something on the shell to the board, I don’t see the characters I

146
00:08:36,300 --> 00:08:39,980
type, that’s because I didn’t configure the terminal to echo back the characters.

147
00:08:39,980 --> 00:08:43,640
While it would have been nice there, I don’t need it here.

148
00:08:43,640 --> 00:08:47,590
And there are a few other options that could screw with what we want to do.

149
00:08:47,590 --> 00:08:50,370
And then we also don’t have to fiddle with pipes.

150
00:08:50,370 --> 00:08:52,830
So the child is just exec now.

151
00:08:52,830 --> 00:08:57,580
In the parent we define our bufferoverflow input, that’s basically the one we developed

152
00:08:57,580 --> 00:09:01,860
last video, and then also add some random() function to get three random bytes for the

153
00:09:01,860 --> 00:09:03,030
cookie.

154
00:09:03,030 --> 00:09:05,920
And place those into the buffer overflow string.

155
00:09:05,920 --> 00:09:11,200
A simple ugly loop to avoid newlines, because that would indicate the end of our input,

156
00:09:11,200 --> 00:09:12,420
and we dont’ want that.

157
00:09:12,420 --> 00:09:17,400
Then we write the bufferoverflow string to the master filedesriptor of our pseudo terminal

158
00:09:17,400 --> 00:09:21,680
and stack0 will read it and will get exploited.

159
00:09:21,680 --> 00:09:25,860
Then I create a short loop to check the status of the child, but I don’t want to block

160
00:09:25,860 --> 00:09:30,870
and wait for it, because the child could horribly die or not die because of the buffer overflow,

161
00:09:30,870 --> 00:09:36,720
so I just check the status a few times in a loop and if the child is dead, we continue,

162
00:09:36,720 --> 00:09:41,060
If we waited already a few times we decide to kill the child process,

163
00:09:41,060 --> 00:09:42,990
And otherwise we sleep a bit.

164
00:09:42,990 --> 00:09:46,810
Usually it shouldn’t loop much, as the child program is very short, but it’s a safety-net.

165
00:09:46,810 --> 00:09:52,180
BTW. program ids, pids, are prone to race conditions in linux.

166
00:09:52,180 --> 00:09:56,090
You see we don’t have some kind of handle direclty pointing to the child process, we

167
00:09:56,090 --> 00:09:57,310
only have the number.

168
00:09:57,310 --> 00:09:59,270
And numbers can be reused.

169
00:09:59,270 --> 00:10:04,310
So theoretically our child could have died, another process like a webserver could have

170
00:10:04,310 --> 00:10:09,120
been executed and assigned our old pid, and then we kill it here.

171
00:10:09,120 --> 00:10:12,660
And there is no better way, linux is just really ugly some times.

172
00:10:12,660 --> 00:10:13,690
Anyway.

173
00:10:13,690 --> 00:10:18,530
One other thing I want to add now is a signal handler, which will be notified if the child

174
00:10:18,530 --> 00:10:19,790
dies or so.

175
00:10:19,790 --> 00:10:24,030
We could just read the output after the wait, but we don’t know why and how the child

176
00:10:24,030 --> 00:10:29,080
might die and so forth, and I also found it to be a third slower if I do that.

177
00:10:29,080 --> 00:10:31,220
So used the signal handler instead.

178
00:10:31,220 --> 00:10:36,270
This handler function is called to notify us if anything happens to the child.

179
00:10:36,270 --> 00:10:39,230
So when it receives a SIGCHLD.

180
00:10:39,230 --> 00:10:44,650
And in the handler function we then read from the terminal the output of stack0.

181
00:10:44,650 --> 00:10:46,450
First we read the “Try again?”

182
00:10:46,450 --> 00:10:47,450
message.

183
00:10:47,450 --> 00:10:51,720
And then potentially read the stack smashing detected error, OR maybe the successful modified

184
00:10:51,720 --> 00:10:53,060
variable message.

185
00:10:53,060 --> 00:10:54,460
Or maybe nothing.

186
00:10:54,460 --> 00:10:59,390
Then I do an ugly check of the second output to see the success message.

187
00:10:59,390 --> 00:11:02,020
If that’s the case we print it and we are done.

188
00:11:02,020 --> 00:11:03,950
So now it’s basically ready.

189
00:11:03,950 --> 00:11:09,610
I add some more debug output to see whats going on, add an argument to supply a seed.

190
00:11:09,610 --> 00:11:11,390
and then we can compile it.

191
00:11:11,390 --> 00:11:16,010
Because we want to use forkpty, we have to also link the utils library.

192
00:11:16,010 --> 00:11:20,770
Here you can see how many executions we get per second per process.

193
00:11:20,770 --> 00:11:26,140
This machine has only one CPU, so this will take a while, let’s come back later.

194
00:11:26,140 --> 00:11:27,220
Let’s see.

195
00:11:27,220 --> 00:11:29,050
Mhhm… nothing happened yet.

196
00:11:29,050 --> 00:11:33,250
Maybe let’s rent a bigger server for a few hours with more CPU cores.

197
00:11:33,250 --> 00:11:34,460
Mmh maybe this one.

198
00:11:34,460 --> 00:11:37,270
Now to run it I do some ghetto parallelisation.

199
00:11:37,270 --> 00:11:38,270
But oh what.

200
00:11:38,270 --> 00:11:41,970
Only 9 executions per second, what kind of crap is that?

201
00:11:41,970 --> 00:11:45,380
If you look at the processes you can see something called apport.

202
00:11:45,380 --> 00:11:49,960
Apport is a system which: intercepts crashes right when they happen

203
00:11:49,960 --> 00:11:53,250
the first time, gathers potentially useful information about

204
00:11:53,250 --> 00:11:55,960
the crash and the OS environment,

205
00:11:55,960 --> 00:12:00,970
Ah, so because we constantly crash a process this thing is gatehring information and slowing

206
00:12:00,970 --> 00:12:02,110
everything down.

207
00:12:02,110 --> 00:12:07,660
Let’s disable this service.

208
00:12:07,660 --> 00:12:10,510
And then let’s wait for a bit.

209
00:12:10,510 --> 00:12:12,150
AWWW YEAH!

210
00:12:12,150 --> 00:12:16,200
See, one process output the modified variable message.

211
00:12:16,200 --> 00:12:17,480
How amazing is that.

212
00:12:17,480 --> 00:12:21,250
I admit not the most reliable exploit, but it worked.

213
00:12:21,250 --> 00:12:22,430
I’m happy.

214
00:12:22,430 --> 00:12:25,640
If you have a better exploit strategy for this here, please share it with us.

215
00:12:25,640 --> 00:12:29,270
I’m really curious what other techniques could be used to exploit this program in a

216
00:12:29,270 --> 00:12:30,820
more reliable way.

217
00:12:30,820 --> 00:12:32,420
Thanks guys, see you next time.

