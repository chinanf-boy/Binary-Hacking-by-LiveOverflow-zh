1
00:00:06,280 --> 00:00:08,919
Now I want to introduce how a CPU works.

2
00:00:08,920 --> 00:00:13,430
I hope I can take away any fear of assembler you might have, because it’s actually pretty

3
00:00:13,430 --> 00:00:14,430
simple.

4
00:00:14,430 --> 00:00:20,590
And in the next video you will be able to use this crack your first small program.

5
00:00:20,590 --> 00:00:25,190
First I had a long script where I basically tried to develop the concepts of a CPU step

6
00:00:25,190 --> 00:00:26,190
by step.

7
00:00:26,190 --> 00:00:29,700
But I realised it’s just too long and I think I didn’t get the point across.

8
00:00:29,701 --> 00:00:34,640
But then I came accross this hacking game by starfighters.io - at the time of creating

9
00:00:34,640 --> 00:00:37,050
this video, starfighters.io was not available yet.

10
00:00:37,050 --> 00:00:39,710
But when you see this here it should be up and running.

11
00:00:39,710 --> 00:00:41,130
So go check that out.

12
00:00:41,130 --> 00:00:47,480
And the creators of that site have uploaded an article as a preview of the game.

13
00:00:47,480 --> 00:00:53,589
That preview is a fictional report of reversing a hand-held device used for financial trading.

14
00:00:53,589 --> 00:00:58,299
And even though it’s fictional, it’s not far away from how it would look like in reality.

15
00:00:58,300 --> 00:01:01,170
That’s why I strongly recommend you to read it.

16
00:01:01,170 --> 00:01:05,560
But I will now take just the part where they introduce programming assembly and talk a

17
00:01:05,561 --> 00:01:07,300
little bit more around it.

18
00:01:07,300 --> 00:01:10,680
And then I hope you will start to understand how a CPU works.

19
00:01:10,680 --> 00:01:16,560
A CPU has amazingly simple concepts that can be used to solve very complex tasks.

20
00:01:16,560 --> 00:01:18,060
It’s pretty crazy.

21
00:01:18,060 --> 00:01:21,840
I hope you realise that by the end of this video.

22
00:01:21,840 --> 00:01:26,700
So Imagine just a sheet of paper, where you write instructions from the top to the bottom.

23
00:01:26,700 --> 00:01:29,799
This is your memory like the RAM in your computer.

24
00:01:29,799 --> 00:01:36,259
And each line on that paper has a number assigned, just like a location in memory has an address.

25
00:01:36,259 --> 00:01:41,179
So instead of line 5 on a paper, in memory it would be something like address in hex

26
00:01:41,180 --> 00:01:42,730
0x4005db.

27
00:01:42,730 --> 00:01:48,719
So that paper, or you know, your memory contains the assembly code.

28
00:01:48,719 --> 00:01:52,249
But what can assembly code do?

29
00:01:52,250 --> 00:01:56,950
So first of all, you're given 8-32 global variables of fixed size to work with, and

30
00:01:56,950 --> 00:01:59,560
they are called ‘registers’.

31
00:01:59,560 --> 00:02:05,040
So your CPU, depending on your architecture has a number of those registers.

32
00:02:05,040 --> 00:02:08,550
They call those registers ‘global variables’, and that is what they are.

33
00:02:08,550 --> 00:02:13,370
Just like in your C or python programming you can use them like variables.

34
00:02:13,370 --> 00:02:19,430
Store a value in them and perform some arithmetics on them like adding or multiplying.

35
00:02:19,430 --> 00:02:21,790
The next keyword here is the fixed size.

36
00:02:21,790 --> 00:02:24,750
In a 32bit machine, they are 32bit wide.

37
00:02:24,750 --> 00:02:28,349
And in a 64bit machine, they have 64bits.

38
00:02:28,349 --> 00:02:32,759
So this is the biggest number you can store in one of those registers.

39
00:02:32,760 --> 00:02:36,930
And when you want to have bigger numbers, you obviously have to write code to split

40
00:02:36,930 --> 00:02:40,780
up the number over multiple registers.

41
00:02:40,780 --> 00:02:43,599
And some of those registers are special registers.

42
00:02:43,599 --> 00:02:48,259
The most important is the "Program Counter", which tells the CPU which instruction

43
00:02:48,260 --> 00:02:50,480
we're executing next.

44
00:02:50,480 --> 00:02:54,840
Every time we execute an instruction, we advance the program counter.

45
00:02:54,840 --> 00:03:00,739
This register is often called PC, meaning Program Counter, but on our intel x86 architecture

46
00:03:00,739 --> 00:03:03,599
it’s referred to as the Instruction Pointer.

47
00:03:03,599 --> 00:03:04,599
IP.

48
00:03:04,599 --> 00:03:10,499
Or EIP, or RIP - depending on 16bit, 32bit or 64bit mode.

49
00:03:10,500 --> 00:03:15,129
So when you look at your paper with instructions in each line, the instruction pointer register

50
00:03:15,129 --> 00:03:18,829
will have the number of the line that will be executed next.

51
00:03:18,830 --> 00:03:21,670
We often also refer to this as pointing to.

52
00:03:21,670 --> 00:03:26,310
So the instruction pointer points to line

53
00:03:26,310 --> 00:03:32,190
And when it has executed that instruction it will be increased by one, to move it to the next line. 

54
00:03:32,190 --> 00:03:37,600
Virtually all computation is expressed in terms of simple operations on registers.

55
00:03:37,600 --> 00:03:39,219
Let’s do an example.

56
00:03:39,220 --> 00:03:42,819
In x86 assembler you can move a number into a register.

57
00:03:42,819 --> 00:03:45,229
Like ‘mov eax, 5’.

58
00:03:45,230 --> 00:03:48,180
This means that eax will now have the value

59
00:03:48,180 --> 00:03:51,770
And then you can add a number like 3 to it.

60
00:03:51,770 --> 00:03:54,500
‘add eax, 3’.

61
00:03:54,500 --> 00:03:57,260
Now let’s set another register to value

62
00:03:57,260 --> 00:04:00,680
So ‘mov ebx, 8’.

63
00:04:00,680 --> 00:04:05,780
And then you can subtract those to with ‘sub eax, ebx’.

64
00:04:05,780 --> 00:04:12,129
This means that ebx is subtracted from eax and the result is stored in eax.

65
00:04:12,129 --> 00:04:16,069
But Real programs need many more than 32 1-byte variables to work with.

66
00:04:16,069 --> 00:04:23,770
In our case of x86 architecture that would be more than 16 registers with 64bit, which is 8-byte. 

67
00:04:23,770 --> 00:04:26,710
Imagine to write a game like Super Mario in assembly.

68
00:04:26,710 --> 00:04:31,850
You would have to store marios x-/y-position, the lives, the enemies, the coins.

69
00:04:31,850 --> 00:04:34,729
You just need more than 16 variables.

70
00:04:34,729 --> 00:04:39,739
And when you want to collect more than 32bit worth of coins, you need more space.

71
00:04:39,740 --> 00:04:43,470
Next point is, what doesn't fit in registers lives in memory.

72
00:04:43,470 --> 00:04:48,530
You can just use other parts of the paper where there is no assembly code to store more values. 

73
00:04:48,530 --> 00:04:50,090
Makes sense, right?

74
00:04:50,090 --> 00:04:54,770
Memory is accessed either with loads and stores at addresses, as if it were a big array, or

75
00:04:54,770 --> 00:04:57,690
through PUSH and POP operations on a stack.

76
00:04:57,690 --> 00:05:02,090
So the load and store instructions are called move in x86 assembler.

77
00:05:02,090 --> 00:05:06,900
So we can move values from a memory address into a register, and we can move values from

78
00:05:06,900 --> 00:05:10,259
a register into memory.

79
00:05:10,259 --> 00:05:12,769
I like intel assembler syntax the most.

80
00:05:12,770 --> 00:05:16,490
So in this case the brackets are like brackets from an array or list.

81
00:05:16,490 --> 00:05:22,639
So for example in python to access a certain value in a list you would write ‘my_list[5]’

82
00:05:22,639 --> 00:05:25,339
to get the element at index 5.

83
00:05:25,340 --> 00:05:27,675
So we just do basically the same, 

84
00:05:27,675 --> 00:05:31,675

 just with a very big number 0x4005db, because our RAM is very big.

85
00:05:31,675 --> 00:05:31,919

86
00:05:31,919 --> 00:05:35,479
Also they talk about push and pop operations on a stack.

87
00:05:35,479 --> 00:05:39,379
The stack is nothing else than just an area at the bottom of the memory.

88
00:05:39,380 --> 00:05:41,669
So like at the bottom of our paper.

89
00:05:41,669 --> 00:05:47,519
And then you have a special register that always points at the top of the stack.

90
00:05:47,520 --> 00:05:49,639
The stack pointer SP.

91
00:05:49,639 --> 00:05:50,639
Or ESP.

92
00:05:50,639 --> 00:05:51,639
Or RSP.

93
00:05:51,639 --> 00:05:53,159
It’s special like the instruction pointer.

94
00:05:53,160 --> 00:05:58,450
And when you push a new value on top of the stack, for example `push 5`,

95
00:05:58,450 --> 00:06:04,580
 the stack pointer will be incremented, pointing to the next address and the value will be placed there.

96
00:06:04,580 --> 00:06:09,940
And when you do `pop eax`, the value at the address of the stack pointer will be saved

97
00:06:09,940 --> 00:06:14,259
in the eax register, and the stack pointer will be decremented.

98
00:06:14,259 --> 00:06:16,589
This is used in programs all the time.

99
00:06:16,590 --> 00:06:17,590
Eh…

100
00:06:17,590 --> 00:06:19,040
I have to correct myself.

101
00:06:19,040 --> 00:06:20,800
The stack is ususally upside down.

102
00:06:20,800 --> 00:06:23,460
so the stack grows downwards.

103
00:06:23,460 --> 00:06:26,925
Meaning it starts from the highest address and when we push a value 

104
00:06:26,925 --> 00:06:31,419
we don't increment the stack pointer, we decrement it. and with pop vice-versa.

105
00:06:31,419 --> 00:06:32,439
But doesn’t really matter.

106
00:06:32,440 --> 00:06:38,860
Just imagine literally a stack, where you put something on top, or take something away.

107
00:06:38,860 --> 00:06:43,979
Memory is to an assembly program what the disk is to a Ruby or Python program: you pull

108
00:06:43,979 --> 00:06:49,799
things out of memory into variables, do things with them, and eventually put them back into memory. 

109
00:06:49,800 --> 00:06:51,930
Now when we talk about efficiency and speed.

110
00:06:51,930 --> 00:06:55,069
Then calculations on registers are super super fast.

111
00:06:55,069 --> 00:06:58,579
And ideally your whole program should only use registers.

112
00:06:58,580 --> 00:07:02,830
But because that’s unlikely you have to put values sometimes into memory because you

113
00:07:02,830 --> 00:07:05,605
need the registers for more complex stuff.

114
00:07:05,605 --> 00:07:05,610
But if you would optimize your code, you would always want to make sure to access memory as little as possible. 

115
00:07:05,610 --> 00:07:10,810
But if you would optimize your code, you would always want to make sure to access memory as little as possible. 

116
00:07:10,810 --> 00:07:11,810
Well.

117
00:07:11,810 --> 00:07:15,949
This is also only half true, because you have something like caches near your CPU.

118
00:07:15,949 --> 00:07:17,449
Actually multiple levels of caches.

119
00:07:17,449 --> 00:07:22,229
So if you repeatedly use a certain memory address, it will be cached in a special super

120
00:07:22,229 --> 00:07:24,679
super fast memory near the CPU and not in RAM.

121
00:07:24,680 --> 00:07:26,630
Which is not too bad.

122
00:07:26,630 --> 00:07:28,539
But you get the idea.

123
00:07:28,539 --> 00:07:33,187
Control flow is done via GOTOs --- jumps, branches, or calls.

124
00:07:33,187 --> 00:07:33,199
The effect of these instructions is to alter the program counter directly. 

125
00:07:33,199 --> 00:07:37,910
The effect of these instructions is to alter the program counter directly. 

126
00:07:37,910 --> 00:07:42,789
Control flow means that a CPU would be less useful if it would just execute your program

127
00:07:42,789 --> 00:07:45,979
line by line, without being able to jump to somewhere else.

128
00:07:45,979 --> 00:07:49,359
For example to repeat a task, you want to constantly jump back.

129
00:07:49,360 --> 00:07:52,889
In assembler you have different instructions to do that.

130
00:07:52,889 --> 00:07:56,069
They are referred to as jumps, branches or calls.

131
00:07:56,069 --> 00:07:59,819
And they all basically change the instruction pointer to a different value.

132
00:07:59,819 --> 00:08:05,449
So when you read a ‘jump 2’, you would simply set the instruction pointer to 2, and

133
00:08:05,449 --> 00:08:07,049
continue with that line.

134
00:08:07,050 --> 00:08:08,979
Kind of like ‘mov eip, 2’

135
00:08:08,979 --> 00:08:12,669
A jump is just an unconditional GOTO.

136
00:08:12,669 --> 00:08:17,489
So when you encounter a jump, you will always follow it.

137
00:08:17,490 --> 00:08:23,750
But much more interesting for complex tasks is to make decisions what to calculate next.

138
00:08:23,750 --> 00:08:27,319
And Most operations on registers, like addition and subtraction, have the

139
00:08:27,319 --> 00:08:32,820
side effect of altering status flags, like "the last value computed resulted in zero". 

140
00:08:32,820 --> 00:08:37,810
There are just a few status flags, and they usually live in a special register.

141
00:08:37,810 --> 00:08:43,980
So for example when we earlier added 3 to the 5 with the ‘add eax, 3’ the result

142
00:08:43,980 --> 00:08:47,980
was bigger than zero, so the zero flag would have been not set.

143
00:08:47,980 --> 00:08:49,220
or simply 0.

144
00:08:49,220 --> 00:08:56,250
But when we subtract 8 from that with ‘sub eax, 8’, the result will be 0 and thus enabling

145
00:08:56,250 --> 00:08:59,260
the zero flag, setting it to 1.

146
00:08:59,260 --> 00:09:03,425
And branches are just GOTOs that are predicated on a status flag, like,，

147
00:09:03,425 --> 00:09:08,290

 "GOTO this address only if the last arithmetic operation resulted in zero".

148
00:09:08,290 --> 00:09:13,630
In x86 assembly that would be the ‘je’ instruction.

149
00:09:13,630 --> 00:09:17,890
Sounds weird, but how would you test if two values are equal?

150
00:09:17,890 --> 00:09:23,392
You can simply subtract them and when their result is 0, they were equal and thus set the zero flag. 

151
00:09:23,392 --> 00:09:23,430
You can simply subtract them and when their result is 0, they were equal and thus set the zero flag. 

152
00:09:23,430 --> 00:09:29,485
So it makes sense to call the ‘branch if zero flag is set’ simply ‘jump if equal’.

153
00:09:29,485 --> 00:09:29,560

154
00:09:29,560 --> 00:09:34,500
A CALL is just an unconditional GOTO that pushes the next address on the stack, so a

155
00:09:34,500 --> 00:09:40,170
RET instruction can later pop it off and keep going where the CALL left off.

156
00:09:40,170 --> 00:09:44,220
So earlier I explained how the push and pop instruction works.

157
00:09:44,220 --> 00:09:48,360
So a very clever usage of the stack is this call instruction.

158
00:09:48,360 --> 00:09:50,860
Let’s say in C you want to call a function.

159
00:09:50,860 --> 00:09:52,750
How would you do that in assembler?

160
00:09:52,750 --> 00:09:57,600
Especially because a function might be used in multiple places, so you always want to

161
00:09:57,600 --> 00:09:59,840
jump back where you came from.

162
00:09:59,840 --> 00:10:05,550
If you would just use the ‘jmp’ instruction, you would have to specify the exact address.

163
00:10:05,550 --> 00:10:09,330
So what you can do is use the ‘call’ instruction instead.

164
00:10:09,330 --> 00:10:14,220
This will push the instruction pointer of the next instruction on to the stack.

165
00:10:14,220 --> 00:10:19,190
And when the function you jumped to finishes, it will execute the ‘ret’ instruction.

166
00:10:19,190 --> 00:10:24,710
And ret will pop the current value on top of the stack into the instruction pointer again. 

167
00:10:24,710 --> 00:10:26,330
So like a `pop eip`.

168
00:10:26,330 --> 00:10:30,790
So we can continue executing where we originally came from.

169
00:10:30,790 --> 00:10:34,580
And before we finish this video,I just want to make clear, that the assembler instructions

170
00:10:34,580 --> 00:10:36,080
are actually just numbers.

171
00:10:36,080 --> 00:10:42,270
As you know a computer can only store 0 and 1s, and we generally represent those as numbers.

172
00:10:42,270 --> 00:10:45,730
So assembler code doesn’t actually say ‘mov eax, 5’.

173
00:10:45,730 --> 00:10:51,170
It will actually ‘B8 05 00 00 00’.

174
00:10:51,170 --> 00:11:00,782
And hex B8 refers to `mov eax`, and the remaining numbers are available for the number you want to move into eax. 

175
00:11:00,782 --> 00:11:00,790
So when the hardware reads this number, it knows that it has to move the following number in it’s eax register. 

176
00:11:00,790 --> 00:11:07,105
So when the hardware reads this number, it knows that it has to move the following number in it’s eax register. 

177
00:11:07,105 --> 00:11:07,120

178
00:11:07,120 --> 00:11:13,650
And a disassembler is a software that takes this number B8 and makes readable text out of it for us 

179
00:11:13,650 --> 00:11:16,310
to easier read assembler.

180
00:11:16,310 --> 00:11:19,800
If you want to try this out in practice, you can go to microcorruption.com.

181
00:11:19,800 --> 00:11:22,800
And then you have to use a debugger to solve different challenges.

182
00:11:22,800 --> 00:11:26,630
They also have a nice tutorial introduction to that debugger.

183
00:11:26,630 --> 00:11:31,000
And even though it’s not a real x86 gdb, it has exactly the same concepts.

184
00:11:31,000 --> 00:11:36,800
And understanding concepts is way more valuable than mastering the technique. In my opinion. 

185
00:11:36,800 --> 00:11:41,350
In the next video we will use this knowledge to do a practical example where 

186
00:11:41,350 --> 00:11:43,575
we will crack a small license-check program.

