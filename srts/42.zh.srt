1
00:00:00,149 --> 00:00:05,899
The topic of this video is very special to me because it's the slogan of this channel.

2
00:00:05,900 --> 00:00:11,320
“探索奇怪的机器”。所以在这段视频中，我想介绍一台奇怪的机器是什么

3
00:00:11,320 --> 00:00:17,610
并用它来解释面向返回的编程。但让我们从头开始。拜托

4
00:00:17,611 --> 00:00:23,171
忘记术语“面向返回的编程和奇怪的机器”。让我们从一些事情开始

5
00:00:23,170 --> 00:00:27,120
else.

6
00:00:27,119 --> 00:00:36,019
我真的想给你看看我做的这个非常奇怪的编程语言。这真的是真的

7
00:00:36,020 --> 00:00:40,340
terrible language. But let me show you some example programs.

8
00:00:40,340 --> 00:00:45,900
这是一个简单的你好世界。在这种编程语言中，首先必须初始化

9
00:00:45,900 --> 00:00:51,010
程序，然后你可以开始写实际的指令。所以这里我们设置变量

10
00:00:51,010 --> 00:00:56,740
四到弦地狱。然后我们把变量4存储在内存中

11
00:00:56,740 --> 00:01:02,020
位置1。然后我们把变量4设为空间w o，

12
00:01:02,020 --> 00:01:07,740
并将变量4再次存储在内存位置2中。最后，我们将变量4设置为

13
00:01:07,740 --> 00:01:13,090
RLD！并将该值存储在内存位置
3.

14
00:01:13,090 --> 00:01:16,180
酷！接下来我们要打印它。我们已经做到了

15
00:01:16,180 --> 00:01:22,120
为printf准备两个参数。第一个参数，即目的地

16
00:01:22,120 --> 00:01:27,630
变量，设置为内存位置1。存储器位置是连续存储器，

17
00:01:27,630 --> 00:01:32,270
所以从位置1打印将打印整个字符串。第二个参数

18
00:01:32,270 --> 00:01:37,450
printf将被设置为0。它只是一个Hello World字符串的打印件。不打印

19
00:01:37,450 --> 00:01:40,550
format modifiers and parameters here.

20
00:01:40,550 --> 00:01:46,200
最后我们离开。总之，语言有点难听，但有点道理，对吧？

21
00:01:46,200 --> 00:01:49,800
很简单。我们来运行这个程序吧！

22
00:01:49,799 --> 00:01:56,669
首先，我们必须用我编写的这个python编译脚本来编译它。python编译.py

23
00:01:56,670 --> 00:02:02,800
helloworld.weird, that's the source code, and the name of the outfile, so helloworld.binary.

24
00:02:02,799 --> 00:02:09,059
让我们快速查看文本编辑器中生成的二进制文件。开始的时候

25
00:02:09,060 --> 00:02:16,280
可读字符，1，123和许多AAAAA。但我们也可以找到我们的“你好世界”片段

26
00:02:16,280 --> 00:02:23,630
in there. HELL o WO RLD. The other values are just jibberish.

27
00:02:23,629 --> 00:02:28,879
但让我们开始吧！要运行它，只需cat，所以打印二进制文件并通过管道

28
00:02:28,879 --> 00:02:36,109
output into the interpreter, called invoice. Okay, I know the output is really confusing.

29
00:02:36,109 --> 00:02:41,399
but that's just part of the weird invoice program. so just ignore that invoicing menu.

30
00:02:41,400 --> 00:02:46,030
因为一路向下，在底部我们可以找到我们的输出！世界你好！

31
00:02:46,030 --> 00:02:47,030
令人惊叹的！

32
00:02:47,030 --> 00:02:52,620
我再给你举几个例子。这是一个简单的echo程序。它读到

33
00:02:52,620 --> 00:02:58,970
从标准输入到内存位置1的字符串。然后用

34
00:02:58,969 --> 00:03:05,149
内存1用于打印该字符串的位置。我们可以通过首先编译它来尝试这个方法，

35
00:03:05,150 --> 00:03:09,890
and then we have to output the binary and pipe it into the input of the invoice program.

36
00:03:09,890 --> 00:03:14,210
但不仅如此，我们还应该执行cat，这样输入就不会关闭，我们可以

37
00:03:14,209 --> 00:03:18,549
向程序发送更多输入。只是一些Linux命令行foo，不用担心

38
00:03:18,549 --> 00:03:24,269
关于它。但事实是，当我们执行这个时，程序等待输入，我们可以输入一些

39
00:03:24,269 --> 00:03:28,379
在中，输出在这里！它奏效了！！！！请再忽略一下发票上的问题。

40
00:03:28,379 --> 00:03:29,559
menu around it.

41
00:03:29,560 --> 00:03:33,800
Let's do another example. I'm really proud of this one.

42
00:03:33,799 --> 00:03:39,099
这将把一个字符串读入内存位置1。然后执行字符串为整数

43
00:03:39,099 --> 00:03:45,169
在这个价值上。所以我们必须输入一个数字。结果，所以原始整数

44
00:03:45,169 --> 00:03:49,339
在结果变量中。然后我们用

45
00:03:49,340 --> 00:03:54,750
零，加上结果，我们输入的数字。然后我们把这个值存储到

46
00:03:54,749 --> 00:03:57,319
memory location 2.

47
00:03:57,319 --> 00:04:02,369
然后我们读取另一个数字作为字符串，并将该字符串也转换为整数。现在

48
00:04:02,371 --> 00:04:07,801
我们将内存位置2的旧值加载回变量4，然后添加

49
00:04:07,799 --> 00:04:12,339
the new converted integer in result to the variable 4.

50
00:04:12,340 --> 00:04:17,210
然后我们准备printf，但这次我们有两个参数。第一个是

51
00:04:17,209 --> 00:04:23,189
设置格式字符串。编程语言有一些这样的硬编码格式字符串

52
00:04:23,190 --> 00:04:30,160
这里是字符串1。作为第二个参数，我们有变量4。酷。让我们试试看！！！！

53
00:04:30,160 --> 00:04:36,820
We compile the sum program. And execute it again with cat. Then we enter the first number.

54
00:04:36,820 --> 00:04:41,050
Then the second number. And we get the calculated sum output.

55
00:04:41,050 --> 00:04:46,980
可以。。。你可能会问自己这个奇怪的编程语言是怎么回事。为什么？

56
00:04:46,980 --> 00:04:53,350
我在这里展示这个吗？好。。。我展示它的唯一原因是，因为我需要你

57
00:04:53,349 --> 00:04:59,179
完全同意，这是一种“编程语言”，对吧？我们可以写程序，

58
00:04:59,180 --> 00:05:04,950
然后我们可以以某种方式编译它们，然后执行它们。简单…而且非常

59
00:05:04,950 --> 00:05:06,830
weird looking.

60
00:05:06,830 --> 00:05:12,560
让我们快速看一下发票程序。实际上是一个规则的简单C

61
00:05:12,560 --> 00:05:18,080
程序。当我们单独执行它时，我们可以例如添加发票，输入金额

62
00:05:18,080 --> 00:05:24,120
in euro and add a comment. We can add a few more to just get a feeling for the program.

63
00:05:24,120 --> 00:05:29,830
然后可以选择计算所有发票的总和等选项。或者我们可以最终确定

64
00:05:29,830 --> 00:05:35,300
and exit. After entering our name we get a nice list of our invoices.

65
00:05:35,300 --> 00:05:43,110
Soooo…等待。。。什么？这是发票管理系统？那么这个节目怎么办

66
00:05:43,110 --> 00:05:48,580
执行这些其他程序？笏？这没有任何意义？

67
00:05:48,580 --> 00:05:53,890
让我们再来看看我们编译的程序的二进制代码。我们知道这是作为

68
00:05:53,889 --> 00:06:00,009
输入到发票程序，所以让我们尝试复制它。也许我们也会运行它

69
00:06:00,009 --> 00:06:06,189
用GDB。所以运行发票程序。然后我们选择1。添加发票。它要求

70
00:06:06,189 --> 00:06:12,559
我们输入123。然后是所有的AAAAA…让我们复制这些并添加

71
00:06:12,560 --> 00:06:18,130
最后还有一点数据。繁荣！分割错误？Rip，指令

72
00:06:18,130 --> 00:06:26,090
指针是42424242，所以是bbbb。我们导致了缓冲区溢出并重写了返回

73
00:06:26,090 --> 00:06:28,980
堆栈上的指针。巴姆！

74
00:06:28,979 --> 00:06:33,729
也许你现在觉得，啊…这只是一个缓冲区溢出，我们的程序

75
00:06:33,729 --> 00:06:39,599
汇编程序中的shellcode。但是没有！当您检查安全标志时，您会看到

76
00:06:39,599 --> 00:06:45,029
使用了不可执行的标志。查看内存布局，您还可以看到

77
00:06:45,030 --> 00:06:52,320
堆栈或堆不可执行。那么我们如何执行这些程序，即使我们不能

78
00:06:52,319 --> 00:06:55,659
将汇编程序作为shellcode注入？

79
00:06:55,659 --> 00:07:01,589
为了回答这个问题，我想让Sergey Bratus介绍一下奇怪机器的概念。

80
00:07:01,590 --> 00:07:05,200
from his talk "What hacker research taught me".

81
00:07:05,199 --> 00:07:15,919
Lesson 2, is what I call "composition creates weird machines" parallel universes of computers.

82
00:07:15,919 --> 00:07:26,129
任何复杂的系统都会投射出微小的阴影。在这些阴影中只有一个

83
00:07:26,129 --> 00:07:32,599
是你想要的。这就是您工作的开发环境。其他都是

84
00:07:32,600 --> 00:07:41,440
a weird machine. Whose instructions are actually combinations of your well designed features.

85
00:07:41,439 --> 00:07:52,709
但它会运行攻击者的代码。做我们定义的破坏你的

86
00:07:52,710 --> 00:07:58,650
信任假设。导致设计人员完全意想不到的行为

87
00:07:58,650 --> 00:07:59,690
the machine.

88
00:07:59,690 --> 00:08:09,100
So think of stack overflows. Think of heap overflows which are a bit more interesting.

89
00:08:09,099 --> 00:08:18,899
在每种情况下，您都有一个正在执行指令的实际机器组件

90
00:08:18,900 --> 00:08:28,050
利用精心设计的输入可以触发。你不打算在

91
00:08:28,050 --> 00:08:35,270
that fashion. It's a whole universe of weird machines.

92
00:08:35,270 --> 00:08:41,230
因此，从这个角度来看，开发利用是通过精心设计的

93
00:08:41,230 --> 00:08:48,540
经常输入。所以这里有一个1997年的案例研究

94
00:08:48,540 --> 00:08:56,530
一种称为“回归到libc”的技术，被学术界称为“回归导向”。

95
00:08:56,530 --> 00:09:03,760
programming. And it took about 10 years to propagate.

96
00:09:03,760 --> 00:09:09,770
这一系列技术中的所有工作都是由已经存在的代码片段完成的。

97
00:09:09,770 --> 00:09:15,720
在可信代码中。因此，没有引入新的不受信任的可执行代码。没有新的攻击者代码是

98
00:09:15,720 --> 00:09:22,330
介绍。所有的操纵。所有的活动都是由机器的部件完成的。

99
00:09:22,330 --> 00:09:30,310
you thought were your friends. Well no, they are traitors, lying and wait.

100
00:09:30,310 --> 00:09:40,540
2008年，当学术界最终对这一技术品牌有了一个坚定的理解时，它被命名为，

101
00:09:40,540 --> 00:09:51,010
恶意计算，将其与恶意代码区分开来-这就是您的漏洞所在

102
00:09:51,010 --> 00:09:52,680
(assembly shellcode) is.

103
00:09:52,680 --> 00:09:58,390
奇怪的机器的概念是如此的美丽，以至于实现对

104
00:09:58,390 --> 00:10:04,100
me. Thus it became the mantra ar slogan of my channel.

105
00:10:04,100 --> 00:10:10,310
面向返回的编程是使用奇怪机器的一个例子。还有奇怪的机器

106
00:10:10,310 --> 00:10:16,470
我们已经在这里实施了发票计划。发票程序执行了一个

107
00:10:16,470 --> 00:10:23,060
预定的机器，发票管理系统，也实现了无止境的数量

108
00:10:23,060 --> 00:10:29,580
堆栈缓冲区溢出导致的奇怪机器。开发人员设计了一台奇怪的机器

109
00:10:29,580 --> 00:10:37,410
without even knowing it. A weird machine so powerful that it can execute basically anything.

110
00:10:37,410 --> 00:10:44,090
So powerful we can create a programming language that only runs on this single weird machine.

111
00:10:44,090 --> 00:10:49,330
这不是很神奇吗？记住，我们不注射

112
00:10:49,330 --> 00:10:56,130
任意汇编程序指令-我们这里没有shellcode。我们正在使用这项技术

113
00:10:56,130 --> 00:11:03,000
实现任意执行的面向返回的编程。这太奇怪了。和

114
00:11:03,000 --> 00:11:05,680
it's so beautiful at the same time.

115
00:11:05,680 --> 00:11:10,450
在下一个视频中，我想仔细看看我写的那些奇怪的程序，以及

116
00:11:10,450 --> 00:11:15,930
编译器的功能，以及执行的精确性。如果你还没有

117
00:11:15,930 --> 00:11:21,560
猜对了，让我给你一个小笑话，你可以称之为“说明”。

118
00:11:21,560 --> 00:11:27,040
“小工具”*传情动漫**传情动漫*。所以下一个视频我们将学习如何面向返回的编程

119
00:11:27,040 --> 00:11:28,140
works.

120
00:11:28,140 --> 00:11:31,610
但同时，请看我下面链接的对话，并阅读我的论文

121
00:11:31,610 --> 00:11:36,250
有联系。对我来说，它们属于最重要的计算机科学和黑客技术，或者

122
00:11:36,250 --> 00:11:37,440
IT security papers.

123
00:11:37,440 --> 00:11:37,700
网址：https://www.cs.dartmouth.edu/~sergey/hc/rss-hacker-research.pdf

