
421
00:00:00,149 --> 00:00:05,899
这个视频的主题非常特别
因为这是这个频道的口号。

2
00:00:05,900 --> 00:00:11,320
"探索奇怪的机器"。所以在这个视频里
我想介绍一下什么是奇怪的机器

3
00:00:11,320 --> 00:00:17,610
并用它来解释面向返回的编程。
但让我们从头开始。拜托

4
00:00:17,611 --> 00:00:23,171
忘记术语面向返回编程
还有奇怪的机器。让我们从一些事情开始

5
00:00:23,170 --> 00:00:27,120
否则。

6
00:00:27,119 --> 00:00:36,019
我真的很想让你知道这很奇怪
我做的程序设计语言。这真的是真的

7
00:00:36,020 --> 00:00:40,340
糟糕的语言。但是我给你看一些
示例程序。

8
00:00:40,340 --> 00:00:45,900
这是一个简单的你好世界。在这个程序中
您首先必须初始化的语言

9
00:00:45,900 --> 00:00:51,010
程序，然后你可以开始写实际的
指令。所以这里我们设置变量

10
00:00:51,010 --> 00:00:56,740
四到弦地狱。
然后我们把变量4存储在内存中

11
00:00:56,740 --> 00:01:02,020
位置1。
然后我们把变量4设为空间w o，

12
00:01:02,020 --> 00:01:07,740
将变量4再次存储在内存位置
2。最后，我们将变量4设置为

13
00:01:07,740 --> 00:01:13,090
RLD！并将该值存储在内存位置
3.

14
00:01:13,090 --> 00:01:16,180
酷！
接下来我们要打印它。我们已经做到了

15
00:01:16,180 --> 00:01:22,120
为printf准备两个参数。
第一个参数，即目的地

16
00:01:22,120 --> 00:01:27,630
变量，设置为内存位置1。
存储器位置是连续存储器，

17
00:01:27,630 --> 00:01:32,270
因此从位置1打印将打印
整个字符串…第二个参数

18
00:01:32,270 --> 00:01:37,450
printf将被设置为0。只是一个
hello world字符串的printf。不打印

19
00:01:37,450 --> 00:01:40,550
这里是格式修改器和参数。

20
00:01:40,550 --> 00:01:46,200
最后我们离开。总之有点难看
语言，但有点道理，对吗？

21
00:01:46,200 --> 00:01:49,800
很简单。
我们来运行这个程序吧！

22
00:01:49,799 --> 00:01:56,669
首先我们必须用这个python编译它
编译我写的脚本。python编译.py

23
00:01:56,670 --> 00:02:02,800
很奇怪，这是源代码，
和外文件的名称，所以helloworld.binary。

24
00:02:02,799 --> 00:02:09,059
让我们快速看看生成的二进制文件
在文本编辑器中。开始的时候

25
00:02:09,060 --> 00:02:16,280
可读字符，1，123和许多AAAAA。
但我们也可以找到我们的"你好世界"片段

26
00:02:16,280 --> 00:02:23,630
在那里。见鬼去吧。其他价值观
只是在逃避。

27
00:02:23,629 --> 00:02:28,879
但让我们开始吧！要运行它，你必须简单地
cat，所以打印二进制文件并通过管道

28
00:02:28,879 --> 00:02:36,109
输出到解释器中，称为发票。
好吧，我知道输出很混乱。

29
00:02:36,109 --> 00:02:41,399
但这只是奇怪的发票的一部分
程序。所以忽略开发票菜单。

30
00:02:41,400 --> 00:02:46,030
因为一直到下面
我们可以找到我们的输出！世界你好！

31
00:02:46,030 --> 00:02:47,030
令人惊叹的！

32
00:02:47,030 --> 00:02:52,620
我再给你举几个例子。这个
这是一个简单的回声程序。它读到

33
00:02:52,620 --> 00:02:58,970
从标准输入到内存位置的字符串
1。然后用

34
00:02:58,969 --> 00:03:05,149
内存1用于打印该字符串的位置。阿盖恩
我们可以先把它编译一下，

35
00:03:05,150 --> 00:03:09,890
然后我们必须输出二进制文件，
将其导入到发票程序的输入中。

36
00:03:09,890 --> 00:03:14,210
但不仅如此，我们还应该执行
这样输入就不会关闭，我们可以

37
00:03:14,209 --> 00:03:18,549
发送更多我们输入到程序的输入。
只是一些Linux命令行foo，不用担心

38
00:03:18,549 --> 00:03:24,269
关于它。但事实是，当我们执行这项任务时，
程序等待输入，我们可以输入

39
00:03:24,269 --> 00:03:28,379
在中，输出在这里！它奏效了！！！！和
拜托，还是不要理会发票

40
00:03:28,379 --> 00:03:29,559
菜单在它周围。

41
00:03:29,560 --> 00:03:33,800
让我们再举一个例子。我真的很自豪
这一个。

42
00:03:33,799 --> 00:03:39,099
这将把一个字符串读取到内存位置
1。然后它将执行字符串为整数

43
00:03:39,099 --> 00:03:45,169
在这个价值上。所以我们必须输入一个数字。
结果，所以原始整数

44
00:03:45,169 --> 00:03:49,339
在结果变量中。
然后我们用

45
00:03:49,340 --> 00:03:54,750
零，再加上结果，所以我们
进入它。然后我们把这个值存储到

46
00:03:54,749 --> 00:03:57,319
内存位置2。

47
00:03:57,319 --> 00:04:02,369
然后我们读另一个数字作为字符串
将该字符串也转换为整数。现在

48
00:04:02,371 --> 00:04:07,801
我们从内存位置加载旧值
2回到变量4，然后我们加上

49
00:04:07,799 --> 00:04:12,339
结果中的新转换整数
变量4。

50
00:04:12,340 --> 00:04:17,210
然后我们准备打印稿，但这次
我们有两个参数。第一个是

51
00:04:17,209 --> 00:04:23,189
设置格式字符串。程序设计语言
有一些这样的硬编码格式字符串

52
00:04:23,190 --> 00:04:30,160
这里是字符串1。作为第二个参数，
我们有变量4。酷。让我们试试看！！！！

53
00:04:30,160 --> 00:04:36,820
我们编制了SUM程序。并执行它
又是猫。然后我们输入第一个数字。

54
00:04:36,820 --> 00:04:41,050
然后是第二个号码。我们得到了计算结果
求和输出。

55
00:04:41,050 --> 00:04:46,980
可以。。。你可能会问自己什么是
使用这种奇怪的编程语言。为什么？

56
00:04:46,980 --> 00:04:53,350
我在这里展示这个吗？好。。。唯一原因
我展示它的原因是，因为我需要你

57
00:04:53,349 --> 00:04:59,179
完全同意，这是一个"程序设计"
语言"，对吧？我们可以写程序，而且

58
00:04:59,180 --> 00:05:04,950
然后我们可以以某种方式编译它们，然后
他们被处决了。简单…而且非常

59
00:05:04,950 --> 00:05:06,830
看起来怪怪的。

60
00:05:06,830 --> 00:05:12,560
所以让我们快速看一下发票
程序。它实际上是一个规则的简单C

61
00:05:12,560 --> 00:05:18,080
程序。当我们单独执行它的时候
例如，可以添加发票，输入金额

62
00:05:18,080 --> 00:05:24,120
并添加评论。我们可以增加一些
更多的只是为了给程序带来感觉。

63
00:05:24,120 --> 00:05:29,830
然后可以选择计算等选项
所有发票的总和。或者我们可以最后确定

64
00:05:29,830 --> 00:05:35,300
然后退出。输入我们的名字后，我们得到一个
我们的发票清单很好。

65
00:05:35,300 --> 00:05:43,110
Soooo…等待。。。什么？这是发票
管理系统？那么这个程序怎么办

66
00:05:43,110 --> 00:05:48,580
执行这些其他程序？笏？那不
有道理吗？

67
00:05:48,580 --> 00:05:53,890
让我们再来看看我们的
编译的程序。我们知道这是作为

68
00:05:53,889 --> 00:06:00,009
输入到发票程序，所以我们只需
试着复制它。也许我们也会经营它

69
00:06:00,009 --> 00:06:06,189
用GDB。所以运行发票程序。然后
我们选择了1个。添加发票。它要求

70
00:06:06,189 --> 00:06:12,559
我们输入123。然后就来了
这是AAAAA的…让我们复制这些并添加

71
00:06:12,560 --> 00:06:18,130
最后还有一点数据。
繁荣！分割错误？Rip，指令

72
00:06:18,130 --> 00:06:26,090
指针是42424242，所以bbbb。我们已经造成
缓冲区溢出并重写返回

73
00:06:26,090 --> 00:06:28,980
堆栈上的指针。巴姆！

74
00:06:28,979 --> 00:06:33,729
也许你现在认为，啊…这只是
缓冲区溢出，我们的程序

75
00:06:33,729 --> 00:06:39,599
汇编程序中的shellcode。但是没有！当你
检查安全标志，您会看到

76
00:06:39,599 --> 00:06:45,029
使用了不可执行的标志。看着
内存布局还可以看到

77
00:06:45,030 --> 00:06:52,320
堆栈或堆不可执行。所以怎样才能
我们执行这些程序，即使我们不能

78
00:06:52,319 --> 00:06:55,659
将汇编程序作为shellcode注入？

79
00:06:55,659 --> 00:07:01,589
为了回答这个问题，我想要谢尔盖
Bratus将介绍奇怪机器的概念

80
00:07:01,590 --> 00:07:05,200
从他所说的"黑客研究所教的
"我"。

81
00:07:05,199 --> 00:07:15,919
第二课，我所说的"构图创造"
奇怪的机器"计算机的平行宇宙"。

82
00:07:15,919 --> 00:07:26,129
任何复杂的系统都是铸造的
迷你阴影。在这些阴影中只有一个

83
00:07:26,129 --> 00:07:32,599
是你想要的。这就是发展
你工作的环境。其他都是

84
00:07:32,600 --> 00:07:41,440
一台奇怪的机器。实际上是谁的指令
您精心设计的功能组合。

85
00:07:41,439 --> 00:07:52,709
但它会运行攻击者的代码。并且做
正是我们定义的破坏你的

86
00:07:52,710 --> 00:07:58,650
信任假设。导致行为
完全出乎意料

87
00:07:58,650 --> 00:07:59,690
机器。

88
00:07:59,690 --> 00:08:09,100
所以想想堆栈溢出。思考堆
更有趣的溢出。

89
00:08:09,099 --> 00:08:18,899
在每种情况下，您都有
正在执行指令的实际计算机

90
00:08:18,900 --> 00:08:28,050
利用精心设计的输入可以触发。
你不打算在

91
00:08:28,050 --> 00:08:35,270
那种时尚。整个宇宙都很奇怪
机器。

92
00:08:35,270 --> 00:08:41,230
所以剥削是从这个角度来看的，
通过精心设计的程序设计那台奇怪的机器

93
00:08:41,230 --> 00:08:48,540
最常输入。
所以这里有一个1997年的案例研究

94
00:08:48,540 --> 00:08:56,530
发明了一种称为回归libc的技术
学术界现在称之为回归导向

95
00:08:56,530 --> 00:09:03,760
编程。大约用了10年
传播。

96
00:09:03,760 --> 00:09:09,770
这一系列技术中的所有工作
由已经存在的代码片段完成

97
00:09:09,770 --> 00:09:15,720
在可信代码中。因此没有新的不受信任的可执行文件
介绍了代码。没有新的攻击者代码是

98
00:09:15,720 --> 00:09:22,330
介绍。所有的操纵。所有的
活动由机器的部件完成

99
00:09:22,330 --> 00:09:30,310
你以为是你的朋友。嗯，不，他们
都是叛徒，撒谎和等待。

100
00:09:30,310 --> 00:09:40,540
2008年，学术界终于有了一个坚定的理解
这一技术品牌被称为，

101
00:09:40,540 --> 00:09:51,010
恶意计算，将其与
恶意代码-这就是您的漏洞所在

102
00:09:51,010 --> 00:09:52,680
（程序集外壳代码）是。

103
00:09:52,680 --> 00:09:58,390
怪机器的概念太美了
这一认识对

104
00:09:58,390 --> 00:10:04,100
我。因此，它成了
我的频道。

105
00:10:04,100 --> 00:10:10,310
面向返回的编程就是一个例子
使用一台奇怪的机器。还有奇怪的机器

106
00:10:10,310 --> 00:10:16,470
我们已经在发票上执行了
程序。发票程序执行了一个

107
00:10:16,470 --> 00:10:23,060
预定的机器，发票管理系统，
但也实施了无数的

108
00:10:23,060 --> 00:10:29,580
堆栈缓冲区溢出导致的奇怪机器。
开发人员设计了一台奇怪的机器

109
00:10:29,580 --> 00:10:37,410
甚至不知道。一个奇怪的机器所以
功能强大，基本上可以执行任何操作。

110
00:10:37,410 --> 00:10:44,090
如此强大，我们可以创建一种编程语言
只在这台奇怪的机器上运行。

111
00:10:44,090 --> 00:10:49,330
这不是很神奇吗？
记住，我们不注射

112
00:10:49,330 --> 00:10:56,130
任意汇编指令-我们不
这里有shellcode。我们正在使用这项技术

113
00:10:56,130 --> 00:11:03,000
实现面向返回的编程
任意执行。这太奇怪了。和

114
00:11:03,000 --> 00:11:05,680
同时又很漂亮。

115
00:11:05,680 --> 00:11:10,450
在下一个视频中，我想看得更近一些
我写的那些奇怪的程序，还有

116
00:11:10,450 --> 00:11:15,930
编译器做什么，以及这到底有多精确
执行。如果你还没有

117
00:11:15,930 --> 00:11:21,560
猜对了，让我给你个小笑话，
实际上，你可以称之为"说明"。

118
00:11:21,560 --> 00:11:27,040
"小工具"*传情动漫**传情动漫*。所以下一个视频
我们将学习如何面向返回编程

119
00:11:27,040 --> 00:11:28,140
作品。

120
00:11:28,140 --> 00:11:31,610
但与此同时，请去看会谈
我在下面链接并阅读了我的论文

121
00:11:31,610 --> 00:11:36,250
有联系。对我来说，它们属于最
重要的计算机科学和黑客或

122
00:11:36,250 --> 00:11:37,440
IT安全文件。

123
00:11:37,440 --> 00:11:37,700
网址：https://www.cs.dartmouth.edu/~sergey/hc/rss-hacker-research.pdf

