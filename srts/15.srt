1
00:00:06,230 --> 00:00:09,050
Let’s move on to exploit-exercises stack
level 5.

2
00:00:09,050 --> 00:00:13,430
You should have watched the previous videos
to understand how we got here.

3
00:00:13,430 --> 00:00:14,530
The challenge description says

4
00:00:14,530 --> 00:00:20,240
Stack5 is a standard buffer overflow, this
time introducing shellcode.

5
00:00:20,240 --> 00:00:21,260
And the hints are:

6
00:00:21,260 --> 00:00:25,200
that, it might be easier to use someone elses
shellcode.

7
00:00:25,199 --> 00:00:27,179
That is also what we will do.

8
00:00:27,180 --> 00:00:28,180
And

9
00:00:28,180 --> 00:00:33,580
If debugging the shellcode, use the “int3”
instruction with the opcode hex CC, to stop

10
00:00:33,579 --> 00:00:37,049
the program executing and return to the debugger.

11
00:00:37,050 --> 00:00:38,360
And that is very helpful.

12
00:00:38,360 --> 00:00:41,760
Ok, let’s have a look at this code.

13
00:00:41,760 --> 00:00:42,950
It is surprisingly small.

14
00:00:42,949 --> 00:00:48,309
There is just one function call to gets(),
which we know allows us to overwrite data

15
00:00:48,309 --> 00:00:49,839
on the stack.

16
00:00:49,840 --> 00:00:54,680
So how do we get from no functionality of
the program, to a root shell?

17
00:00:54,680 --> 00:01:01,920
So put on your wizard's hat, because we will
do some magic.

18
00:01:01,920 --> 00:01:07,360
Let’s open this program in gdb, and let’s
just throw a long string against it.

19
00:01:07,360 --> 00:01:10,820
To do that let’s already prepare our exploit
script.

20
00:01:10,820 --> 00:01:14,900
So first we want to find the offset that allows
us to control the instruction pointer.

21
00:01:14,900 --> 00:01:17,800
I’d like to use a simple pattern like the
alphabet.

22
00:01:17,800 --> 00:01:21,770
So I create this exploit variable and assign
the long string to it, and then print that.

23
00:01:21,770 --> 00:01:26,840
Now redirect the output of this script into
a file, which we then can use as input for

24
00:01:26,840 --> 00:01:28,350
gdb.

25
00:01:28,350 --> 00:01:32,150
Before we execute the program, let’s create
a breakpoint at the return of main.

26
00:01:32,150 --> 00:01:36,970
And let’s define a hook, like we have done
in a previous video.

27
00:01:36,970 --> 00:01:41,610
Define hook stop, and we want to display the
current instruction that will be executed

28
00:01:41,610 --> 00:01:47,190
next, so examine one instruction at the location
of eip.

29
00:01:47,190 --> 00:01:51,390
And then examine 8 words as hex from the stack.

30
00:01:51,390 --> 00:01:52,890
And end.

31
00:01:52,890 --> 00:01:56,450
Then execute it, and we hit the breakpoint
at the return.

32
00:01:56,450 --> 00:01:59,790
The next line shows us how the stack looks
like right now.

33
00:01:59,790 --> 00:02:05,270
And when we execute the ret, we will jump
to the address that was on the stack before.

34
00:02:05,270 --> 00:02:08,390
So no execute it again with the alphabet.

35
00:02:08,390 --> 00:02:12,890
We are at the return again, and we can see
that we have overwritten stuff on the stack.

36
00:02:12,890 --> 00:02:18,470
So now we try to return to address hex 54545454.

37
00:02:18,469 --> 00:02:21,719
Which is obviously invalid, so we get a Segmentation
Fault.

38
00:02:21,719 --> 00:02:26,459
And with examine as string, we can see that
we have overwritten the return pointer with

39
00:02:26,459 --> 00:02:31,419
T’s.

40
00:02:31,420 --> 00:02:34,270
So let’s update our exploit script.

41
00:02:34,269 --> 00:02:35,819
This will be our padding.

42
00:02:35,819 --> 00:02:40,119
And we create the variable eip, which we can
use to control the instruction pointer and

43
00:02:40,120 --> 00:02:42,280
jump anywhere we want.

44
00:02:42,280 --> 00:02:46,400
And I use struct to create a binary string
from the address again.

45
00:02:46,400 --> 00:02:48,750
So struct.pack.

46
00:02:48,749 --> 00:02:50,269
But where do we want to jump to?

47
00:02:50,269 --> 00:02:55,089
We don’t have any win() function like in
previous levels.

48
00:02:55,090 --> 00:02:57,220
Do you have any idea where we could jump to?

49
00:02:57,219 --> 00:03:04,589
I think I will give you a second to think
about this.

50
00:03:04,590 --> 00:03:13,040
Right, we can just jump to the stack where
we control data.

51
00:03:13,040 --> 00:03:16,290
So obviously we could place some assembler
code there.

52
00:03:16,290 --> 00:03:18,320
Now let’s find a good address.

53
00:03:18,319 --> 00:03:22,089
We could just jump right after the instruction
pointer we control.

54
00:03:22,090 --> 00:03:27,020
To do that just run again, execute the ret
and have a look at the stack pointer.

55
00:03:27,019 --> 00:03:29,999
So that is the address we want to jump to.

56
00:03:30,000 --> 00:03:35,820
And now we have to append code that we want
to execute after the return pointer, so why

57
00:03:35,819 --> 00:03:41,809
not use the opcode CC, the int3, they were
suggesting in the challenge description.

58
00:03:41,810 --> 00:03:45,340
Let’s also quickly have a look at the intel
instruction reference.

59
00:03:45,340 --> 00:03:47,800
Let’s search for “Int 3”.

60
00:03:47,799 --> 00:03:50,469
Ok mmhh… call itnerrupt procedure.

61
00:03:50,469 --> 00:03:52,159
what else do we find.

62
00:03:52,160 --> 00:03:56,570
In this table about general exceptions it
calls this instruction breakpoint?

63
00:03:56,569 --> 00:03:59,109
Huuu, that’s interesting.

64
00:03:59,110 --> 00:04:02,160
Ok and here is the description of it.

65
00:04:02,159 --> 00:04:04,399
Interrupt number 3, traps to debugger.

66
00:04:04,400 --> 00:04:06,390
And down here it reads:

67
00:04:06,389 --> 00:04:11,819
The INT 3 instruction is a special one byte
opcode (CC) that is intended for calling the

68
00:04:11,819 --> 00:04:13,579
debug exception handler.

69
00:04:13,579 --> 00:04:18,399
(This one byte form is valuable because it
can be used to replace the first byte of any

70
00:04:18,400 --> 00:04:23,000
instruction with a breakpoint, including other
one byte instructions, without over-writing

71
00:04:23,000 --> 00:04:24,050
other code).

72
00:04:24,050 --> 00:04:25,050
wooooh.

73
00:04:25,050 --> 00:04:26,510
What does that mean?

74
00:04:26,510 --> 00:04:29,020
Well, how do you think gdb works?

75
00:04:29,020 --> 00:04:31,500
Or any other debugger for that matter?

76
00:04:31,500 --> 00:04:34,220
How can you just stop the CPU from executing
something.

77
00:04:34,220 --> 00:04:36,200
Or just step one instruction?

78
00:04:36,200 --> 00:04:40,630
Actually a debugger can just use the INT 3
instruction.

79
00:04:40,630 --> 00:04:42,570
Let’s make an example.

80
00:04:42,570 --> 00:04:45,810
We just created a breakpoint at this ret.

81
00:04:45,810 --> 00:04:51,080
What we actually did was, we replaced this
return instruction in memory with int 3.

82
00:04:51,080 --> 00:04:54,110
And when the CPU reached this instruction,
an exception was raised.

83
00:04:54,110 --> 00:05:00,010
Or in hardware terms an interrupt got triggered,
which stopped the CPU from continuing excecuting

84
00:05:00,010 --> 00:05:07,140
this and called an interrupt handler (similar
to how a syscall caused an interrupt and execution

85
00:05:07,140 --> 00:05:08,140
continued somewhere else).

86
00:05:08,140 --> 00:05:12,180
And we can now decide how we want to handle
this exception.

87
00:05:12,180 --> 00:05:16,990
And if we are a debugger we would now replace
this INT 3 instruction again with the original

88
00:05:16,990 --> 00:05:18,920
value, the return instruction.

89
00:05:18,920 --> 00:05:22,920
That can also be used as an anti reversing
technique.

90
00:05:22,920 --> 00:05:26,780
Because a regular application will not use
the CC instruction.

91
00:05:26,780 --> 00:05:31,890
So a malware might constantly scan itself
for the CC opcode, and if it finds it, it

92
00:05:31,890 --> 00:05:36,590
knows that somebody attached a debugger and
tried to set a breakpoint.

93
00:05:36,590 --> 00:05:38,220
And now we will use the CC in our payload.

94
00:05:38,220 --> 00:05:39,220
So let’s append a couple of CCs after the
overwritten return pointer.

95
00:05:39,220 --> 00:05:41,890
Don’t forget to write the output of the
script into the exploit file.

96
00:05:41,890 --> 00:05:44,040
And then test this in gdb.

97
00:05:44,040 --> 00:05:45,740
Ok run again.

98
00:05:45,740 --> 00:05:49,800
We can see that we stopped at the ret and
we see the address where we would return to.

99
00:05:49,800 --> 00:05:56,200
And when we continue now, we pop the instruction
pointer value from the stack, thus continue

100
00:05:56,200 --> 00:06:02,500
excecuting on the stack, where we have our
INT 3 instrucitons, and as you can see, gdb

101
00:06:02,500 --> 00:06:07,560
stopped because it received a signal SIGTRAP,
a trace/breakpoint trap.

102
00:06:07,560 --> 00:06:08,560
Cool.

103
00:06:08,560 --> 00:06:13,220
This way we know that we have code execution,
because we successfully injected an assembler

104
00:06:13,220 --> 00:06:14,930
instruction.

105
00:06:14,930 --> 00:06:17,360
Now does that work without gdb too?

106
00:06:17,360 --> 00:06:19,480
Let’s try it…

107
00:06:19,480 --> 00:06:22,430
But we get an illegal instruction?

108
00:06:22,430 --> 00:06:24,630
That is not what we should see.

109
00:06:24,630 --> 00:06:26,240
We should get the breakpoint message.

110
00:06:26,240 --> 00:06:31,060
Let’s open it in gdb here and try it again.

111
00:06:31,060 --> 00:06:32,460
Still illegal instruction.

112
00:06:32,460 --> 00:06:39,880
Let’s set the hooks and the breakpoints
like in the other gdb session.

113
00:06:39,880 --> 00:06:41,370
Ok run.

114
00:06:41,370 --> 00:06:42,660
mhmh…

115
00:06:42,660 --> 00:06:45,060
The addresses on the stack are not the same.

116
00:06:45,060 --> 00:06:47,220
Why are they different?

117
00:06:47,220 --> 00:06:49,550
Let’s do something crazy.

118
00:06:49,550 --> 00:06:50,710
Print the whole stack.

119
00:06:50,710 --> 00:06:53,060
I just print a thousand strings or something.

120
00:06:53,060 --> 00:06:55,250
Let’s se what we get.

121
00:06:55,250 --> 00:06:57,130
Ok first we have some gibebrish.

122
00:06:57,130 --> 00:06:58,270
Let’s go further.

123
00:06:58,270 --> 00:06:59,270
UUUh… see.

124
00:06:59,270 --> 00:07:00,980
Now we get some interesting stuff.

125
00:07:00,980 --> 00:07:04,160
Let’s do the same in the other gdb session.

126
00:07:04,160 --> 00:07:06,380
This looks like the environment variables.

127
00:07:06,380 --> 00:07:11,150
For example here us the USER environment variable
that we have used in a previous programming

128
00:07:11,150 --> 00:07:12,150
video.

129
00:07:12,150 --> 00:07:16,400
Mh and when you look at the addresses, they
are still diferent.

130
00:07:16,400 --> 00:07:17,400
So let’s look a bit further down.

131
00:07:17,400 --> 00:07:21,630
mh! down here they are the same.

132
00:07:21,630 --> 00:07:26,540
So between here and the environemnt variables
above there mus be something different.

133
00:07:26,540 --> 00:07:31,710
And when you look closely, you can see that
the PWD environment variable, the current

134
00:07:31,710 --> 00:07:33,610
working directory is different.

135
00:07:33,610 --> 00:07:35,960
They have a different length.

136
00:07:35,960 --> 00:07:41,010
So obviously the one execution environment
needs more space on the stack to store this

137
00:07:41,010 --> 00:07:42,010
path.

138
00:07:42,010 --> 00:07:44,060
And thus pushing the stack further up.

139
00:07:44,060 --> 00:07:48,170
No wonder that the stack addresses are not
the same anymore.

140
00:07:48,170 --> 00:07:50,340
So how can we cope with that?

141
00:07:50,340 --> 00:07:54,290
There are a couple of techniques that you
can use to get a bit more control over the

142
00:07:54,290 --> 00:07:55,290
stack.

143
00:07:55,290 --> 00:07:59,140
For example by removing all environment variables
before executing a binary.

144
00:07:59,140 --> 00:08:03,550
But there is another very easy but effective
trick.

145
00:08:03,550 --> 00:08:04,690
here is a hint:

146
00:08:04,690 --> 00:08:08,260
nop, nop, nop, nop, nop

147
00:08:08,260 --> 00:08:10,280
Riiiight… a nop slide…

148
00:08:10,280 --> 00:08:13,300
Let’s just add a looooot of NOP instructions.

149
00:08:13,300 --> 00:08:16,050
A Nop instruction performs no operation.

150
00:08:16,050 --> 00:08:17,980
And it has the opcode hex 90.

151
00:08:17,980 --> 00:08:22,310
And instead of picking a very specific stack
address, let’s just pick one that we hope

152
00:08:22,310 --> 00:08:24,150
hits our nops.

153
00:08:24,150 --> 00:08:25,580
So run again.

154
00:08:25,580 --> 00:08:28,710
Now we can see we have a lot of NOPs on the
stack.

155
00:08:28,710 --> 00:08:32,700
And the address we will jump to points somewhere
else further down.

156
00:08:32,700 --> 00:08:36,930
If we look at more of the stack, we can see
that it points almost right in the middle

157
00:08:36,930 --> 00:08:39,990
of the nops.

158
00:08:39,990 --> 00:08:42,740
So let’s just single step forwards.

159
00:08:42,740 --> 00:08:48,030
And now we happily slide down the nop slide
until we reach the bottom with our traps!

160
00:08:48,029 --> 00:08:49,219
Boom.

161
00:08:49,220 --> 00:08:50,410
Cool.

162
00:08:50,410 --> 00:08:53,780
And that also works now outside of gdb.

163
00:08:53,779 --> 00:08:56,959
Now instead of CC, we want to execute something
useful.

164
00:08:56,960 --> 00:08:59,390
So let’s look for some shellcode.

165
00:08:59,389 --> 00:09:04,259
As the challenge description said, it’s
best to reuse shellcode from other people.

166
00:09:04,259 --> 00:09:08,639
I really like the collection of shellcode
from shellstorm.

167
00:09:08,640 --> 00:09:12,660
Shellstorm has a lot of different kind of
shellcode, for a lot of different system.

168
00:09:12,660 --> 00:09:16,280
So we are looking for a Linux Intel 32bit
shellcode.

169
00:09:16,279 --> 00:09:21,809
FreeBSD, Linux on ARM, 64bit, and here we
have 32bit.

170
00:09:21,810 --> 00:09:24,360
They all have a short description and do different
stuff.

171
00:09:24,360 --> 00:09:28,540
But we are looking for a simple execve that
will execute a shell.

172
00:09:28,540 --> 00:09:31,160
So, why not take this one.

173
00:09:31,160 --> 00:09:35,310
If you look at the assembler code, what it
does is basically just pushing some values

174
00:09:35,310 --> 00:09:40,730
on the stack, which are infact just a string
that is the path /bin/sh.

175
00:09:40,730 --> 00:09:42,960
And then calls execve.

176
00:09:42,959 --> 00:09:46,699
Copy the bytes into the python exploit script
as payload and we can throw it against the

177
00:09:46,699 --> 00:09:52,559
program.

178
00:09:52,560 --> 00:09:59,600
mhmh… nothing happens.

179
00:09:59,600 --> 00:10:00,600
Does it not work?

180
00:10:00,600 --> 00:10:03,930
Let’s add the CC at the start of the payload
if we still hit it.

181
00:10:03,931 --> 00:10:07,711
It should work.

182
00:10:07,709 --> 00:10:12,029
Remove the CC againa and try it in gdb. let’s
single step.

183
00:10:12,029 --> 00:10:13,549
We are sliding down the nop slide.

184
00:10:13,550 --> 00:10:14,550
All seems fine.

185
00:10:14,550 --> 00:10:15,960
And now comes the shellcode.

186
00:10:15,959 --> 00:10:20,059
And it says: “Executing new program, /bin/dash”.

187
00:10:20,060 --> 00:10:23,010
That first sounds weird, but is correct.

188
00:10:23,010 --> 00:10:25,180
/bin/sh just points to /bin/dash.

189
00:10:25,180 --> 00:10:27,970
So why the hell does it not work?

190
00:10:27,970 --> 00:10:28,970
Also on a side note.

191
00:10:28,970 --> 00:10:30,520
This gdb session is no broken.

192
00:10:30,520 --> 00:10:34,090
Because execve, replaces the current program
with another one.

193
00:10:34,089 --> 00:10:35,909
So stack5 got replaced by /bin/dash.

194
00:10:35,910 --> 00:10:39,490
And you can see that when you try to execute
it again.

195
00:10:39,490 --> 00:10:41,950
So you would have to load stack5 again with
file.

196
00:10:41,949 --> 00:10:42,949
Ok.

197
00:10:42,949 --> 00:10:45,339
So what’s the issue then?

198
00:10:45,339 --> 00:10:46,979
This is one of the things I got nuts.

199
00:10:46,980 --> 00:10:52,070
When I first got stuck like this I spend houuurs
trying to figure out what is happening.

200
00:10:52,069 --> 00:10:57,579
As much as I want to see anybody else suffer
like me, I tell you what the problem is.

201
00:10:57,579 --> 00:11:01,459
A shell you execute, wants some input, right?

202
00:11:01,459 --> 00:11:02,759
From standard input.

203
00:11:02,759 --> 00:11:03,759
But!.

204
00:11:03,759 --> 00:11:09,309
We used a program and redirected it’s stdoutput
into the stdinput of this program.

205
00:11:09,309 --> 00:11:12,389
And when the program was done it closed that
pipe.

206
00:11:12,389 --> 00:11:16,299
So now the shell is executed, but doesn’t
have any input.

207
00:11:16,300 --> 00:11:17,310
Because it’s closed.

208
00:11:17,310 --> 00:11:19,490
So it will just exit.

209
00:11:19,490 --> 00:11:22,960
And there is a neat trick to get basically
around that.

210
00:11:22,959 --> 00:11:28,989
When you use cat without parameters, it simply
redirect it’s stdinput to the standard output.

211
00:11:28,990 --> 00:11:30,130
See like here.

212
00:11:30,130 --> 00:11:34,280
You type something in, and it get’s reflected
out.

213
00:11:34,279 --> 00:11:38,859
Now you can chain programs together on one
line, for example with semicolon.

214
00:11:38,860 --> 00:11:43,930
So we can first print the output of the exploit,
and afterwards cat is executed, so we can

215
00:11:43,930 --> 00:11:45,730
enter new input.

216
00:11:45,730 --> 00:11:50,270
And if we group that now with some brackets,
and redirect their combined output into the

217
00:11:50,270 --> 00:11:55,560
stack level, the exploit will first run and
execute a shell, and then cat will take over

218
00:11:55,559 --> 00:11:59,459
and we can simply relay input via cat to the
shell.

219
00:11:59,459 --> 00:12:01,709
BAM! it works.

220
00:12:01,709 --> 00:12:06,599
We have an ugly shell, and we can verify our
identity with whoami, or id.

221
00:12:06,600 --> 00:12:09,260
So now we escalated privileges to root.

222
00:12:09,259 --> 00:12:11,239
Damn. feels so good.

223
00:12:11,240 --> 00:12:12,350
It’s just beautiful.

