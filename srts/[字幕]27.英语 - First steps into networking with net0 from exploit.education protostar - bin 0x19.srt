1
00:00:00,260 --> 00:00:04,900
The last few videos were already getting really
difficult to follow and required a lot of

2
00:00:04,899 --> 00:00:07,919
concentration and patience to understand them.

3
00:00:07,920 --> 00:00:12,020
So I’m happy that we can now move on to
the networking challenges from exploit-exercises

4
00:00:12,020 --> 00:00:19,120
protostar, which will be a lot easier because
we have to establish some basics first.

5
00:00:19,119 --> 00:00:26,149
Let’s have quick look at networking level
0.

6
00:00:26,150 --> 00:00:31,380
The description says you have to convert strings
to little endian integers.

7
00:00:31,380 --> 00:00:35,830
And this level is very easy, but to fully
understand what’s going on, the code is

8
00:00:35,829 --> 00:00:36,899
not quite enough.

9
00:00:36,899 --> 00:00:38,749
I show you why.

10
00:00:38,750 --> 00:00:44,920
So main calls a function background_process
and passes it a name and the user and group

11
00:00:44,920 --> 00:00:46,570
ID it will run with.

12
00:00:46,569 --> 00:00:50,509
But this function is not a common libc function.

13
00:00:50,510 --> 00:00:56,010
You can also check /etc/passwd for the user
id 999 and you will notice there is no such

14
00:00:56,010 --> 00:00:57,010
user.

15
00:00:57,010 --> 00:01:01,170
This might seem weird but just don’t think
so abstractly about computers.

16
00:01:01,170 --> 00:01:04,260
What does it mean to have a user on a linux
system?

17
00:01:04,260 --> 00:01:09,810
In the end, a user is just an ID, a number
in memory, and for example an owner of a file

18
00:01:09,810 --> 00:01:13,750
just means that this file has this number
as owner set.

19
00:01:13,750 --> 00:01:19,320
Now if the user is listed here in the /etc/passwd
file, linux will be so nice and display the

20
00:01:19,320 --> 00:01:24,270
name instead of the number, but under the
hood it is still just an integer.

21
00:01:24,270 --> 00:01:28,730
So even though there is no name assigned to
that ID, you are still free to use it.

22
00:01:28,730 --> 00:01:30,750
Anyway, back to the code.

23
00:01:30,750 --> 00:01:36,430
The other functions such as serve_forever
and set_io are also not known functions.

24
00:01:36,430 --> 00:01:42,200
And when you look at the includes, you will
notice that it references a common.c file.

25
00:01:42,200 --> 00:01:46,820
So the author of this challenge implemented
a lot of the code in a different file and

26
00:01:46,820 --> 00:01:48,910
we don’t know what it does.

27
00:01:48,910 --> 00:01:52,170
But one function is here, and that is the
run() function.

28
00:01:52,170 --> 00:01:55,690
You can see that it is called at the end of
main().

29
00:01:55,690 --> 00:02:01,460
Run generated a random number, tells us that
you should send that number as little endian.

30
00:02:01,460 --> 00:02:06,350
Then performs a read from a filedescriptor,
in this case from standard input, interprets

31
00:02:06,350 --> 00:02:11,500
this input as a number and compares if it’s
the same as the random number before.

32
00:02:11,500 --> 00:02:12,840
So just a simple test.

33
00:02:12,840 --> 00:02:18,320
As I said earlier, we could solve the challenge
without knowing these unknown functionsbelow

34
00:02:18,319 --> 00:02:23,229
, because just reading the comments and function
names tells us everything we need to know,

35
00:02:23,230 --> 00:02:28,620
but as you know, we are not satisfied on this
channel when we ignore underlying concepts.

36
00:02:28,620 --> 00:02:30,810
We want to understand computers better.

37
00:02:30,810 --> 00:02:36,350
And these functions implement two interesting
concepts that are mentioned here, one is running

38
00:02:36,349 --> 00:02:40,609
the process as a daemon, and the other one
is about networking and sockets.

39
00:02:40,609 --> 00:02:43,469
So how can we figure out what it does?

40
00:02:43,469 --> 00:02:48,469
Well we know already everything we need, to
be able to reverse engineer this.

41
00:02:48,469 --> 00:02:52,579
So let’s start by exploring the behaviour
of the program before digging deeper.

42
00:02:52,579 --> 00:02:55,119
When you try to run the program, nothing happens.

43
00:02:55,120 --> 00:03:01,270
But when you look at the running processes
you can see that net0 is already running.

44
00:03:01,269 --> 00:03:05,889
So let’s quickly switch to the root user
so we cann kill that process and start it

45
00:03:05,890 --> 00:03:07,160
ourselves.

46
00:03:07,159 --> 00:03:10,399
The default root password for this VM is “godmode”.

47
00:03:10,400 --> 00:03:14,950
Now we can kill net0 and we can verify that
it is not running anymore.

48
00:03:14,950 --> 00:03:17,570
So, let’s execute it again.

49
00:03:17,569 --> 00:03:19,389
Nothing happens?

50
00:03:19,390 --> 00:03:22,470
But if we check the processes we can see that
it’s running again.

51
00:03:22,469 --> 00:03:23,469
So what happened?

52
00:03:23,469 --> 00:03:27,089
Let’s kill it again and start it with strace.

53
00:03:27,090 --> 00:03:30,770
So it finishes with an exit but what happens
before?

54
00:03:30,769 --> 00:03:35,869
It seems to open a net0.pid file with write
permissions.

55
00:03:35,870 --> 00:03:41,920
Then it changes the user and group id to 999
with set effective uid and gid.

56
00:03:41,920 --> 00:03:45,360
So this means the process drops it’s root
permissions, which is uid 1 down to user with

57
00:03:45,359 --> 00:03:46,359
id 999.

58
00:03:46,359 --> 00:03:47,459
After that it calls clone().

59
00:03:47,459 --> 00:03:51,799
The manpages says that clone creates a new
process similar to fork.

60
00:03:51,799 --> 00:03:57,339
So this will spawn a new process as a clone,
a copy, of itself.

61
00:03:57,340 --> 00:04:02,570
And the return value is the process ID of
this new process, which is equal to the value

62
00:04:02,569 --> 00:04:04,639
written into the .pid file.

63
00:04:04,640 --> 00:04:09,510
So that file just helps you keeping track
of the new process you created.

64
00:04:09,510 --> 00:04:14,920
And after that the parent process exits and
leaves the child process orphaned.

65
00:04:14,920 --> 00:04:19,530
This is literally referred to as an orphaned
process and because we did this intentionally

66
00:04:19,530 --> 00:04:22,160
we also refer to this now as a daemon.

67
00:04:22,160 --> 00:04:24,390
It’s now a background process.

68
00:04:24,390 --> 00:04:30,320
So what we can do is, we can run strace with
the -f flag, to follow child processes created

69
00:04:30,320 --> 00:04:32,240
instead of staying in the parent process.

70
00:04:32,240 --> 00:04:37,050
When we do that, we see that after the clone
we attached to the new process and in the

71
00:04:37,050 --> 00:04:39,670
background the old process exits.

72
00:04:39,670 --> 00:04:44,490
Then we change directory and open up /dev/null,
which is another special pseudo file that

73
00:04:44,490 --> 00:04:46,560
acts like a blackhole.

74
00:04:46,560 --> 00:04:52,330
And then we dup the stdinput, stdoutput and
stderror of this process, which basically

75
00:04:52,330 --> 00:04:56,510
means we bend all these standard streams to
point into the blackhole.

76
00:04:56,510 --> 00:04:58,920
Basically we just throw away anything.

77
00:04:58,920 --> 00:05:04,110
And then we write the child’s process id
to the .pid file from earlier which had filedescriptor

78
00:05:04,110 --> 00:05:05,410
number 3.

79
00:05:05,410 --> 00:05:08,350
Now the fun part starts, a new socket is created.

80
00:05:08,350 --> 00:05:13,020
A socket is used for network communications
and you can choose what kind of socket you

81
00:05:13,020 --> 00:05:15,870
want with those flags and settings.

82
00:05:15,870 --> 00:05:21,190
But most importantly is then the call to bind,
which attempts to bind this process here to

83
00:05:21,190 --> 00:05:23,620
the port 2999.

84
00:05:23,620 --> 00:05:28,970
Which means that if the operating system receives
a packet that want’s to establish a connection

85
00:05:28,970 --> 00:05:33,680
with this process, it will do so and then
forward the packet with data inside to the

86
00:05:33,680 --> 00:05:34,680
process.

87
00:05:34,680 --> 00:05:40,070
But!, this function call fails because the
address and port is already in use by another

88
00:05:40,070 --> 00:05:41,070
process.

89
00:05:41,070 --> 00:05:44,840
Which makes sense because we called net0 already
way earlier.

90
00:05:44,840 --> 00:05:47,570
So let’s kill the process again and retry
this.

91
00:05:47,570 --> 00:05:48,570
OKAY!

92
00:05:48,570 --> 00:05:49,570
This looks great.

93
00:05:49,570 --> 00:05:53,940
Now we listen on the port we opened and are
waiting for a packet to arrive with the accept

94
00:05:53,940 --> 00:05:54,940
syscall.

95
00:05:54,940 --> 00:06:00,120
So let’s open a second terminal and use
netstat to find this listening process.

96
00:06:00,120 --> 00:06:01,510
And here it is.

97
00:06:01,510 --> 00:06:05,460
On port 2999 the process net0 is listening.

98
00:06:05,460 --> 00:06:06,460
Cool.

99
00:06:06,460 --> 00:06:10,580
Now let’s use netcat to establish a TCP
connection with this port.

100
00:06:10,580 --> 00:06:15,790
This will cause the accept call to return,
because a new connection got established.

101
00:06:15,790 --> 00:06:21,570
And immediatly after accept you see another
call to clone, which creates another process

102
00:06:21,570 --> 00:06:23,940
to now handle this server-client connection.

103
00:06:23,940 --> 00:06:28,580
This way another user can also establish a
connection and doesn’t have to wait until

104
00:06:28,580 --> 00:06:33,010
you are done, because you have now your own
dedicated process.

105
00:06:33,010 --> 00:06:36,970
Also accept returned a new filedescriptor
that references this socket.

106
00:06:36,970 --> 00:06:43,320
So like with regular files you can now perform
read and write with this filedescriptor, like

107
00:06:43,320 --> 00:06:45,030
you would with any other file.

108
00:06:45,030 --> 00:06:51,890
The kernel underneath makes sure to send the
data you write as a TCP packet to the client.

109
00:06:51,890 --> 00:06:56,230
And when it receives data it will make sure
that you can read it from this socket.

110
00:06:56,230 --> 00:07:01,800
So now it will change the std input, output
and error streams from /dev/null to this new

111
00:07:01,800 --> 00:07:02,800
filedescriptor.

112
00:07:02,800 --> 00:07:07,790
And the program can then just read from stdinput
and will read the data you sent it.

113
00:07:07,790 --> 00:07:10,090
And that is what the run function does.

114
00:07:10,090 --> 00:07:16,430
If you compare run with the last two syscalls
we first have a write to stdout which came

115
00:07:16,430 --> 00:07:22,750
from this printf here, and then an fread from
stdin and this is where we are right now.

116
00:07:22,750 --> 00:07:28,180
When we now type a line into netcat, netcat
will send a packet with this text through

117
00:07:28,180 --> 00:07:30,810
the network to the program, the server.

118
00:07:30,810 --> 00:07:35,920
And on the server side you can see that it
read the string you sent to it, and then it

119
00:07:35,921 --> 00:07:38,591
performed the write telling you that it is
the wrong number.

120
00:07:38,590 --> 00:07:41,890
That’s the failed printf in run().

121
00:07:41,890 --> 00:07:45,000
So let’s summarize what the hidden code
is doing.

122
00:07:45,000 --> 00:07:50,220
It first deamonizes by cloning itself and
killing the parent, to become an orphan.

123
00:07:50,220 --> 00:07:54,580
Then it starts listening on port 2999 for
TCP connections.

124
00:07:54,580 --> 00:07:59,430
Once a connection is established, and we will
have a detailed look at the TCP protocol some

125
00:07:59,431 --> 00:08:06,401
other time, it will create another clone of
the process to handle this established connection.

126
00:08:06,400 --> 00:08:11,030
While the parent is ready again to accept
another connection in parallel.

127
00:08:11,030 --> 00:08:16,430
The child process that handles the connection
is now basically just calling run().

128
00:08:16,430 --> 00:08:22,010
So in simple terms you can say, the program
runs as a background process that executes

129
00:08:22,010 --> 00:08:24,580
run() for every client that connects to it.

130
00:08:24,580 --> 00:08:25,580
Awesome!

131
00:08:25,580 --> 00:08:26,990
We understood that.

132
00:08:26,990 --> 00:08:28,840
Now let’s solve the challenge.

133
00:08:28,840 --> 00:08:31,530
First of all we need to get the string representation
of that number.

134
00:08:31,530 --> 00:08:37,200
We can use python for that, specifically the
struct package - which we already used before.

135
00:08:37,200 --> 00:08:41,850
So with struct.pack we can convert a number
to the byte string representation.

136
00:08:41,849 --> 00:08:47,259
But as you can see, the resulting string doesn’t
use characters we can type with the keyboard.

137
00:08:47,260 --> 00:08:53,200
We can print these byte values with echo and
-e, but simply piping this into nc doesn’t

138
00:08:53,200 --> 00:08:55,080
work, because the number is randomized.

139
00:08:55,080 --> 00:08:56,880
But we can use a simple trick.

140
00:08:56,880 --> 00:09:04,210
We can use echo -e, but inside of the quotes
we use backticks to execute cat with a minus,

141
00:09:04,210 --> 00:09:10,390
which simply redirects anything we type to
the output again, and the output is then placed

142
00:09:10,390 --> 00:09:12,160
in the quotes of echo.

143
00:09:12,160 --> 00:09:18,420
So when we now pipe that into netcat, we see
the number and cat is waiting for input, we

144
00:09:18,420 --> 00:09:23,000
use python to convert the number and then
we simply paste the escape string back into

145
00:09:23,000 --> 00:09:29,130
the other terminal, hit enter and then use
CTRL+D, to indicate we are done with input,

146
00:09:29,130 --> 00:09:32,650
which closes cat and echo will send the string
to netcat.

147
00:09:32,650 --> 00:09:35,830
And that works, we get the sucess “thank
you sir/madam message”.

