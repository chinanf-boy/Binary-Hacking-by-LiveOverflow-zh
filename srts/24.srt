1
00:00:00,380 --> 00:00:06,770
A very common issue that we still constantly
encounter is shown in heap level 2 of exploit-exercises.com.

2
00:00:06,770 --> 00:00:12,780
This is a classic use-after-free vulnerability.

3
00:00:12,780 --> 00:00:19,530
Let’s try to understand the code first.

4
00:00:19,529 --> 00:00:22,599
We have here a big while loop inside of main.

5
00:00:22,599 --> 00:00:28,779
In each round it prints the variable auth,
which is a pointer to an object of this auth

6
00:00:28,779 --> 00:00:30,459
struct up here.

7
00:00:30,460 --> 00:00:36,260
And auth has the attributes name which is
a string up to 32 characters and an integer.

8
00:00:36,260 --> 00:00:41,330
And the other variable that is printed is
a char pointer service, which can point to

9
00:00:41,330 --> 00:00:42,410
a string in memory.

10
00:00:42,410 --> 00:00:46,400
So both of these are addresses - pointers.

11
00:00:46,400 --> 00:00:48,970
Then we read a line from standard input.

12
00:00:48,970 --> 00:00:53,620
Maximum 128 bytes, so this is a secure fgets
read.

13
00:00:53,620 --> 00:00:55,610
No buffer overflow.

14
00:00:55,610 --> 00:00:59,990
Afterwards we have a couple of ifs that check
if the input line is one of the following

15
00:00:59,989 --> 00:01:00,989
commands.

16
00:01:00,989 --> 00:01:03,869
Either “auth”, “reset”, “service”
or “login”.

17
00:01:03,870 --> 00:01:08,190
Let’s execute the program as well and then
let’s talk about each command.

18
00:01:08,189 --> 00:01:12,639
When we first start the program, both the
auth and the service pointer are null.

19
00:01:12,640 --> 00:01:13,980
Now we wait for input.

20
00:01:13,979 --> 00:01:16,489
Let’s have a look at the “auth” command.

21
00:01:16,490 --> 00:01:22,960
When we type auth, it will allocate the size
of the auth struct, so that should be 32byte

22
00:01:22,960 --> 00:01:25,790
for the name + 4 byte for the integer.

23
00:01:25,789 --> 00:01:29,379
Then the whole allocated memory is overwritten
with zeroes.

24
00:01:29,380 --> 00:01:35,080
This makes sense because if on the heap, data
is constantly allocated and freed, then a

25
00:01:35,079 --> 00:01:38,329
newly allocated area can have old data in
there.

26
00:01:38,329 --> 00:01:41,259
A free does not zero out the memory.

27
00:01:41,259 --> 00:01:44,349
So here it’s zeroes out on allocation.

28
00:01:44,350 --> 00:01:48,650
Afterwards the length of the input line is
checked, so it doesn’t exceed the 32 bytes

29
00:01:48,649 --> 00:01:51,579
available in the auth struct for the name.

30
00:01:51,579 --> 00:01:56,209
And if that is safe, the characters after
the auth command are copied to the name of

31
00:01:56,209 --> 00:01:57,209
the auth object.

32
00:01:57,209 --> 00:02:00,799
Let’s try that, let’s authenticate as
admin.

33
00:02:00,799 --> 00:02:05,089
Cool, as we can see the variable auth contains
now an address.

34
00:02:05,090 --> 00:02:08,260
This is where the auth object is on the heap.

35
00:02:08,259 --> 00:02:12,539
Now the last command is “login”, which
checks if the integer of the auth object is

36
00:02:12,540 --> 00:02:15,850
not zero, and if that’s the case we sucessfully
logged in.

37
00:02:15,850 --> 00:02:20,170
Otherwise, if it’s zero, then it tells us
to enter a password.

38
00:02:20,170 --> 00:02:23,330
Though in this case there is not more functionality
than that.

39
00:02:23,330 --> 00:02:28,300
but just imagine that you are trying to login
as admin, without knowing my password.

40
00:02:28,300 --> 00:02:33,250
So somehow our goal is to set the integer
to a value, and then we are authenticated.

41
00:02:33,250 --> 00:02:37,780
At the moment it seems impossible, because
the integer auth is never set anywhere, but

42
00:02:37,780 --> 00:02:42,290
we have learned from the beginning, that there
are bugs that allow us to modify variables.

43
00:02:42,290 --> 00:02:46,460
Another command here is reset, which will
free the auth object on the heap.

44
00:02:46,460 --> 00:02:49,240
And this is actually where the issue is.

45
00:02:49,240 --> 00:02:54,460
You notice when we reset the login process,
it frees the auth object, but as you can see

46
00:02:54,460 --> 00:02:59,370
the auth variable is not reset to zero, it
still contains the pointer into the heap where

47
00:02:59,370 --> 00:03:01,690
the object was before.

48
00:03:01,690 --> 00:03:06,110
And when we for example login now, it will
check the name attribute of that object.

49
00:03:06,110 --> 00:03:10,260
Well, it hasn’t changed so we are still
unauthenticated.

50
00:03:10,260 --> 00:03:15,680
But the login command will “use” the variable
auth after we just freed it.

51
00:03:15,680 --> 00:03:16,680
“Use-after-free”.

52
00:03:16,680 --> 00:03:17,680
Get it?

53
00:03:17,680 --> 00:03:23,070
Now the last command here is service, which
will perform a strdup, a string dublication,

54
00:03:23,070 --> 00:03:25,160
of the characters after the service command.

55
00:03:25,160 --> 00:03:29,110
So for example we can specify that we want
to use the hack service.

56
00:03:29,110 --> 00:03:32,900
And now we also have an address in the service
variable.

57
00:03:32,900 --> 00:03:36,150
And strangely it’s the same one as auth.

58
00:03:36,150 --> 00:03:37,900
That is weird.

59
00:03:37,900 --> 00:03:39,680
So what does strdup do?

60
00:03:39,680 --> 00:03:41,730
Let’s read the man page.

61
00:03:41,730 --> 00:03:46,820
strdup returns a pointer to a new string which
is a dublicate of the string s.

62
00:03:46,820 --> 00:03:52,050
The memory for the new string is obtained
with malloc, and can be freed with free.

63
00:03:52,050 --> 00:03:56,710
Ahhh. so it’s just a convinient function
that allocates the length of the string we

64
00:03:56,710 --> 00:03:59,400
pass to it, and copies it there.

65
00:03:59,400 --> 00:04:03,240
So it will also call malloc and thus allocate
stuff on the heap.

66
00:04:03,240 --> 00:04:07,880
And you can already guess why service got
the same address as auth, because auth was

67
00:04:07,880 --> 00:04:11,950
freed, there was free space, and service got
that free space there.

68
00:04:11,950 --> 00:04:14,650
Let’s look at this in gdb.

69
00:04:14,650 --> 00:04:16,690
First we set the assembler syntax to intel.

70
00:04:16,690 --> 00:04:18,460
And then we disassemble main.

71
00:04:18,459 --> 00:04:23,379
Let’s first run it and use auth once, so
we performed at least one malloc.

72
00:04:23,380 --> 00:04:27,860
Then press control+c and check the address
of the heap with info proc mappings.

73
00:04:27,860 --> 00:04:32,120
Now we can print 20 words from the heap with
examine.

74
00:04:32,120 --> 00:04:35,930
Also because this application has still all
the symbols and stuff inside of the binary,

75
00:04:35,930 --> 00:04:40,940
gdb also knows that auth is from the type
struct auth, which we can print pretty again.

76
00:04:40,940 --> 00:04:44,940
And we can see here the string name and the
auth integer.

77
00:04:44,940 --> 00:04:47,750
We can do the same for the service string.

78
00:04:47,750 --> 00:04:51,250
Now let’s create a breakpoint before the
printf.

79
00:04:51,250 --> 00:04:57,440
And with command we can type what (gdb) commands
shall be executed when we hit this breakpoint.

80
00:04:57,440 --> 00:05:00,910
We can use echo to print some strings to make
it all look more pretty.

81
00:05:00,910 --> 00:05:02,630
First we want to print the heap.

82
00:05:02,630 --> 00:05:03,810
We echo a line.

83
00:05:03,810 --> 00:05:06,410
Then we want to print the auth variable.

84
00:05:06,410 --> 00:05:07,410
Another line.

85
00:05:07,410 --> 00:05:08,410
And the service variable.

86
00:05:08,410 --> 00:05:09,780
At the end we continue automatically.

87
00:05:09,780 --> 00:05:12,930
Finsih the command sequence with end.

88
00:05:12,930 --> 00:05:15,030
Now let’s rerun this binary.

89
00:05:15,030 --> 00:05:19,330
Ok at first we get some memory errors because
the heap doesn’t exist yet, so let’s malloc

90
00:05:19,330 --> 00:05:23,750
our first value by authenticating with “auth”
as admin.

91
00:05:23,750 --> 00:05:28,930
Also let’s disable gdbs pagination so we
always print everything and don’t get the

92
00:05:28,930 --> 00:05:31,880
“type &lt;return&gt; to continue” dialog.
set pagination off

93
00:05:31,880 --> 00:05:35,150
Now we can see here our heap.

94
00:05:35,150 --> 00:05:38,730
Like we expect we have here a chunk with our
string name admin.

95
00:05:38,730 --> 00:05:39,730
Buuuuut.

96
00:05:39,730 --> 00:05:40,730
Something is weird.

97
00:05:40,730 --> 00:05:46,970
Why is the length of this chunk only hex 10,
that is only 8 bytes after you subtract the

98
00:05:46,970 --> 00:05:48,050
8 byte chunk headers….

99
00:05:48,050 --> 00:05:51,900
Shouldn’t it be 32byt name + the integer?

100
00:05:51,900 --> 00:05:53,840
What’s going on?

101
00:05:53,840 --> 00:05:57,550
Well this is not that important for the solution,
but this is what happens if you write shitty

102
00:05:57,550 --> 00:05:59,810
code, and name everything auth.

103
00:05:59,810 --> 00:06:03,810
The struct is called auth, the struct auth
pointer is called auth and the integer in

104
00:06:03,810 --> 00:06:05,120
here is called auth.

105
00:06:05,120 --> 00:06:10,210
And when the programmer calculated the size
of auth, it calculated the size of the variable

106
00:06:10,210 --> 00:06:11,870
auth, not the struct auth.

107
00:06:11,870 --> 00:06:16,060
Thus it’s only 4 byte - but malloc aligned
it to 8 bytes.

108
00:06:16,060 --> 00:06:17,060
Gosh.

109
00:06:17,060 --> 00:06:18,060
People.

110
00:06:18,060 --> 00:06:19,090
Please name your variables better.

111
00:06:19,090 --> 00:06:21,500
This is how bugs and security issues are created.

112
00:06:21,500 --> 00:06:24,630
Anyhow, let’s ignore that for now.

113
00:06:24,630 --> 00:06:26,920
Earlier we were wondering how the free works.

114
00:06:26,919 --> 00:06:31,439
So let’s free the auth object with reset,
and pay attention to what changes.

115
00:06:31,440 --> 00:06:32,610
Ok lol.

116
00:06:32,610 --> 00:06:34,410
Basically nothing changed.

117
00:06:34,410 --> 00:06:38,610
Except that the first word of the chunk data
got replaced with 0.

118
00:06:38,610 --> 00:06:42,650
That’s because this first word in a free
chunk is defined as the previous free chunk

119
00:06:42,650 --> 00:06:43,870
address.

120
00:06:43,870 --> 00:06:46,890
Because free chunks are a linked list.

121
00:06:46,890 --> 00:06:50,670
But we don’t have another free chunk in
this list, thus it’s null.

122
00:06:50,669 --> 00:06:54,639
So really not much happened, other than the
malloc algorithm knows that the free heap

123
00:06:54,639 --> 00:06:58,739
starts again at the beginning and it doesn’t
care if there are still leftover values on

124
00:06:58,740 --> 00:07:03,060
the heap, as long as the metadata like the
previous address pointer are correct.

125
00:07:03,060 --> 00:07:06,430
Thus it only changed that particular value.

126
00:07:06,430 --> 00:07:10,990
Anyhow, we can now see that the auth object
still exists with the pointer into the heap

127
00:07:10,990 --> 00:07:11,990
here.

128
00:07:11,990 --> 00:07:15,560
But the name is now empty with nulls, and
the integer is also still null.

129
00:07:15,560 --> 00:07:16,560
But.

130
00:07:16,560 --> 00:07:19,540
Let’s use service to allocate a string on
the heap.

131
00:07:19,540 --> 00:07:22,300
Let’s allocate just some recognizable characters.

132
00:07:22,300 --> 00:07:23,860
Like AAA.

133
00:07:23,860 --> 00:07:28,700
Note only 3 As, because the code is shitty
and it also takes the space before the As.

134
00:07:28,700 --> 00:07:31,300
Here on the heap we can see that the string
got allocated.

135
00:07:31,300 --> 00:07:35,430
And we see that the name of the auth object
has now some different values.

136
00:07:35,430 --> 00:07:38,940
Now let’s allocate a new string with service.

137
00:07:38,940 --> 00:07:40,110
BBB.

138
00:07:40,110 --> 00:07:42,150
And another one with CCC.

139
00:07:42,150 --> 00:07:44,690
We see the heap slowly filling up.

140
00:07:44,690 --> 00:07:45,690
And huh!

141
00:07:45,690 --> 00:07:46,690
What’s that.

142
00:07:46,690 --> 00:07:49,490
Suddenly the auth integer has a huge value.

143
00:07:49,490 --> 00:07:53,970
That’s because it points into the heap where
the CCC is stored.

144
00:07:53,970 --> 00:07:57,640
And if we now login, then we get the message
that we are already logged in.

145
00:07:57,640 --> 00:07:58,640
Awesome!

146
00:07:58,640 --> 00:08:02,580
I have to say this level is so horribly broken.

147
00:08:02,580 --> 00:08:07,050
As I mentioned before the code is so shitty
that it allocates the wrong size for the auth

148
00:08:07,050 --> 00:08:08,050
object.

149
00:08:08,050 --> 00:08:09,050
The space is too small.

150
00:08:09,050 --> 00:08:10,280
I show you.

151
00:08:10,280 --> 00:08:12,980
Let’s restart it and auth again as admin.

152
00:08:12,979 --> 00:08:16,569
Now simply enter a along service string.

153
00:08:16,570 --> 00:08:18,950
And boom, we also overwrite the integer.

154
00:08:18,949 --> 00:08:20,999
And we get the logged in message.

155
00:08:21,000 --> 00:08:26,220
So we didn’t have to free the auth object
with reset to solve it, but I wanted to introduce

156
00:08:26,220 --> 00:08:29,740
the term use-after-free and that was also
kinda the intended challenge.

