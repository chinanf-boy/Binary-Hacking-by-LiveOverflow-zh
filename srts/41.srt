1
00:00:00,280 --> 00:00:04,640
In this video we will cover heap level 0 from exploit-exercises.com/protostar.

2
00:00:04,640 --> 00:00:10,470
It’s the heap exploitation introductory challenge and is very easy.

3
00:00:10,469 --> 00:00:17,129
We again compile this on a Ubuntu 16.04 LTS version, so basically a modern system, to

4
00:00:17,130 --> 00:00:20,120
see if or how it’s still exploitable.

5
00:00:20,120 --> 00:00:24,630
And spoiler alert, nothing changed for this challenge, it’s super straight forward.

6
00:00:24,630 --> 00:00:29,230
But I have a special idea for this video and even if it’s a bit easy for you, you might

7
00:00:29,230 --> 00:00:38,520
want to checkout what else we learn at the end.

8
00:00:38,520 --> 00:00:43,410
In the previous videos of this series I usually create the exploit and then think of a way

9
00:00:43,409 --> 00:00:45,909
how to explain and show it to you.

10
00:00:45,910 --> 00:00:50,980
But this is so simple, that I thought it would be cool if I would instead record myself solving

11
00:00:50,980 --> 00:00:54,070
it, kind of like a blind solve or a speedrun.

12
00:00:54,070 --> 00:00:58,540
But I didn’t try to be super fast but it was quite straight forward and I include all

13
00:00:58,539 --> 00:01:01,109
the mistakes and pauses I made.

14
00:01:01,109 --> 00:01:04,969
And now we will step through the video and I explain to you what I have been thinking

15
00:01:04,970 --> 00:01:08,380
in different moments and point out some other things.

16
00:01:08,380 --> 00:01:12,520
In the top right corner you can also see a timer that will keep track of how long it

17
00:01:12,520 --> 00:01:14,400
took me in real time.

18
00:01:14,399 --> 00:01:17,789
But before we start doing the exploit let’s have a look at the code again.

19
00:01:17,789 --> 00:01:21,259
There are two functions winner() and nowinner().

20
00:01:21,259 --> 00:01:23,789
And obviously we have to somehow call winner().

21
00:01:23,789 --> 00:01:29,989
We can also see there are two structs that get space allocated for them on the heap.

22
00:01:29,990 --> 00:01:34,860
And this fp construct here looks complex, but you can ignore that weirdness because

23
00:01:34,859 --> 00:01:38,059
when you look in the code it’s clear what it does.

24
00:01:38,060 --> 00:01:40,500
We set fp to nowinner.

25
00:01:40,500 --> 00:01:45,380
Notice how nowinner has no parantheses, this means it’s not being called.

26
00:01:45,380 --> 00:01:50,830
This is literally the function pointer and adding paraentheses would cause a call.

27
00:01:50,829 --> 00:01:54,579
And then later we have those paraentheses for fp.

28
00:01:54,579 --> 00:02:00,229
And fp has been set to point to nowinner, so nowinner is executed().

29
00:02:00,229 --> 00:02:05,179
And our goal is it to somehow use the strcpy, which will overflow the name buffer which

30
00:02:05,179 --> 00:02:09,699
is only 64byte large and overwrite the function pointer.

31
00:02:09,700 --> 00:02:12,310
So sounds easy.

32
00:02:12,310 --> 00:02:15,010
I start by opening up the binary in gdb.

33
00:02:15,010 --> 00:02:21,310
And do a first test execution, but I run into a segfault which startled me for a few seconds,

34
00:02:21,310 --> 00:02:25,010
but then I realized I forgot the argument parameter again.

35
00:02:25,010 --> 00:02:29,010
The strcpy uses the first argument to copy into name.

36
00:02:29,010 --> 00:02:32,080
Ok now we had a clean execution.

37
00:02:32,080 --> 00:02:35,720
Now I want to set a good breakpoint so I disassemble main.

38
00:02:35,720 --> 00:02:39,910
I’m quickly scanning the assembler code here, mainly looking at the different function

39
00:02:39,910 --> 00:02:43,890
calls to figure out what corresponds to what in the C code.

40
00:02:43,890 --> 00:02:49,490
And at first I was thinking about setting a breakpoint before or after the strcpy, to

41
00:02:49,490 --> 00:02:55,030
catch the before and after of the overflow, but in the last moment then figured that I

42
00:02:55,030 --> 00:03:00,370
probably don’t need to look at it this closely, and I can simply go to the magic position

43
00:03:00,370 --> 00:03:01,370
right away.

44
00:03:01,370 --> 00:03:03,370
The call rdx.

45
00:03:03,370 --> 00:03:07,050
This is calling the function pointer that contains nowinner().

46
00:03:07,050 --> 00:03:11,490
Ok, so I execute it again and we hit the breakpoint.

47
00:03:11,489 --> 00:03:15,879
Now this challenge is about a heap overflow, so I first check the virtual memory map of

48
00:03:15,879 --> 00:03:18,149
the process with vmmap.

49
00:03:18,150 --> 00:03:22,520
Here you can see in which memory regions we have the binary itself with the code and data

50
00:03:22,520 --> 00:03:27,150
segments, we can also see where the stack is and where shared libraries like libc are

51
00:03:27,150 --> 00:03:30,580
loaded too, and we also have the heap here.

52
00:03:30,580 --> 00:03:34,370
So obviously I want to check out how the heap looks like.

53
00:03:34,370 --> 00:03:38,050
Examine 32 64bit hex values from the start of the heap.

54
00:03:38,050 --> 00:03:43,900
I immediately look for the name we entered as an argument, which was “AAAA”, so here

55
00:03:43,900 --> 00:03:44,900
they are.

56
00:03:44,900 --> 00:03:47,910
And I also immediately look for the function pointer.

57
00:03:47,909 --> 00:03:50,039
This looks like an address.

58
00:03:50,040 --> 00:03:53,180
Quick sanity check with the disassemble command.

59
00:03:53,180 --> 00:03:58,100
Here is a puts call using this address as a paremter, and so that is our nowinner string.

60
00:03:58,099 --> 00:04:00,439
So yep, that’s nowinner.

61
00:04:00,439 --> 00:04:04,639
So now we want to overwrite that with winner, so we need that address.

62
00:04:04,640 --> 00:04:06,220
Here it is.

63
00:04:06,219 --> 00:04:10,839
Next I need to figure out how much we have to overflow, to do that I simply look at the

64
00:04:10,840 --> 00:04:13,280
addresses to the left.

65
00:04:13,280 --> 00:04:20,680
Address of the start of the name ends in 0x10, and the function pointer is ath 0x60.

66
00:04:20,680 --> 00:04:23,710
So we have an offset of 0x50.

67
00:04:23,710 --> 00:04:28,220
So now I’m feeling confident and actually drop out of gdb and hope to have a working

68
00:04:28,220 --> 00:04:30,080
exploit right away.

69
00:04:30,080 --> 00:04:34,550
So I start by writing a short python inline script to print the exploit string.

70
00:04:34,550 --> 00:04:39,520
Essentially we need a couple of characters as padding to reach the function pointer and

71
00:04:39,520 --> 00:04:41,520
so I print a few As.

72
00:04:41,520 --> 00:04:47,690
Quick check again how many that was, 0x60-0x10 so we need 0x50.

73
00:04:47,690 --> 00:04:50,240
After that we need the address of winner.

74
00:04:50,240 --> 00:04:52,610
So 0x40, OOPS!

75
00:04:52,610 --> 00:04:56,620
Almost made a mistake - this stil happens to me sometime, we obviously have to start

76
00:04:56,620 --> 00:05:00,290
with 0xf6, 0x05 and then 0x40.

77
00:05:00,290 --> 00:05:01,980
Because of the endianess.

78
00:05:01,979 --> 00:05:06,789
Now for a sanity and debugging step I pipe that output into hexdump to see if it is what

79
00:05:06,790 --> 00:05:07,890
I expect.

80
00:05:07,889 --> 00:05:13,039
But then I notice a 0x0a at the end, and that’s a newline.

81
00:05:13,040 --> 00:05:16,950
Python print will add a newline at the end which we don’t want.

82
00:05:16,949 --> 00:05:22,069
So now I change the script to use the sys module instead in order to directly write

83
00:05:22,069 --> 00:05:25,429
a string to stdout, so we don’t have a newline.

84
00:05:25,430 --> 00:05:29,570
And I verify that again with hexdump.

85
00:05:29,569 --> 00:05:35,809
And then I’m basically done and try it on the target binary.

86
00:05:35,810 --> 00:05:43,730
So the input is passed as argument, so I use backticks to execute the inner python command,

87
00:05:43,729 --> 00:05:49,479
and the output is then basically replaced by it and placed here as the arguments.

88
00:05:49,479 --> 00:05:50,659
Level passed!

89
00:05:50,660 --> 00:05:51,660
Awesome!

90
00:05:51,660 --> 00:05:54,480
I executed the winner function().

91
00:05:54,479 --> 00:05:57,049
You see this was super simple.

92
00:05:57,050 --> 00:06:01,550
So when I was writing this script with the commentary of my recording, I noticed a small

93
00:06:01,550 --> 00:06:03,890
detail that I didn’t think about.

94
00:06:03,889 --> 00:06:06,239
And I actually never thought about before.

95
00:06:06,240 --> 00:06:08,510
So here is the heap output again.

96
00:06:08,509 --> 00:06:10,449
Do you see this data down here?

97
00:06:10,449 --> 00:06:12,079
That is clearly ascii.

98
00:06:12,080 --> 00:06:17,520
And that’s weird, in our program we did not allocate any string like this on the heap.

99
00:06:17,520 --> 00:06:19,260
So how did this happen?

100
00:06:19,259 --> 00:06:24,629
When you look at this ascii text, then you will realize it’s in fact the printf output.

101
00:06:24,630 --> 00:06:26,270
But why is that on the heap?

102
00:06:26,270 --> 00:06:28,090
Let’s investigate.

103
00:06:28,090 --> 00:06:31,300
First I thought we could checkout valgrind.

104
00:06:31,300 --> 00:06:35,120
Valgrind is an instrumentation framework for building dynamic analysis tools.

105
00:06:35,120 --> 00:06:39,540
There are Valgrind tools that can automatically detect many memory management and threading

106
00:06:39,540 --> 00:06:41,770
bugs, and profile your programs in detail.

107
00:06:41,770 --> 00:06:45,750
I really should use valgrind more often, I use it wayy to little.

108
00:06:45,750 --> 00:06:50,470
But here is for example the valgrind output with tracing mallocs enabled.

109
00:06:50,470 --> 00:06:52,660
And then we run our heap0 level.

110
00:06:52,660 --> 00:06:58,160
And we can indeed see here our two mallocs of the structs we do, but also a malloc we

111
00:06:58,160 --> 00:07:00,440
didn’t do of 1024.

112
00:07:00,440 --> 00:07:04,140
That’s also the only memory that is freed again.

113
00:07:04,139 --> 00:07:06,659
The mallocs we do have no free.

114
00:07:06,660 --> 00:07:08,780
So why is that happening?

115
00:07:08,780 --> 00:07:11,400
Another interesting output is strace.

116
00:07:11,400 --> 00:07:13,280
Strace traces syscalls.

117
00:07:13,280 --> 00:07:18,340
And while we don’t see mallocs here, because malloc is just some algorithm and memory managment

118
00:07:18,340 --> 00:07:24,740
implemented in libc, we can see the brk syscall, which gets the memory from the operating system

119
00:07:24,740 --> 00:07:26,190
in the first place.

120
00:07:26,190 --> 00:07:30,750
So this is where we get memory that will then be used by libc for the heap.

121
00:07:30,750 --> 00:07:36,590
So if malloc is a libc function, we can also checkout ltrace, which traces linked dynamic

122
00:07:36,590 --> 00:07:38,430
library function calls.

123
00:07:38,430 --> 00:07:42,740
But oddly enough we only see two mallocs for the two structs.

124
00:07:42,740 --> 00:07:45,610
Nothing about the mysterious third malloc.

125
00:07:45,610 --> 00:07:50,100
It might not be immediately obvious, but that is actually already a really good hint that

126
00:07:50,099 --> 00:07:55,399
the mysterious malloc did not happen from a dynamically linked library call.

127
00:07:55,400 --> 00:08:00,520
Which means, this malloc must have been executed for example by libc itself.

128
00:08:00,520 --> 00:08:05,910
And valgrind is a bit smarter and also traces these internal mallocs.

129
00:08:05,909 --> 00:08:11,759
For the third test I create a simple program that calls puts, so it prints a string.

130
00:08:11,760 --> 00:08:16,490
Because we know the heap did contain the printf output so it must have to do something with

131
00:08:16,490 --> 00:08:17,540
that.

132
00:08:17,539 --> 00:08:22,199
And then we can debug that program and set a breakpoint on brk.

133
00:08:22,199 --> 00:08:26,389
Remember brk is the syscall that is called when a program requests additional virtual

134
00:08:26,389 --> 00:08:30,049
memory, and so this is called when the heap is set up.

135
00:08:30,050 --> 00:08:33,640
And the heap is not always setup, only if it is required.

136
00:08:33,640 --> 00:08:40,250
So if we assume printf or puts calls malloc, it would have to setup the heap first.

137
00:08:40,250 --> 00:08:44,630
Now that’s also why I created this small test program, because the original heap0 has

138
00:08:44,630 --> 00:08:49,380
obviously regular mallocs before the printf, which makes it a bit annoying, so this is

139
00:08:49,380 --> 00:08:51,280
a clean example.

140
00:08:51,280 --> 00:08:56,760
On a second note, when you set a breakpoint with a symbol name like brk, there has to

141
00:08:56,760 --> 00:08:58,300
be a symbol name for it.

142
00:08:58,300 --> 00:09:01,070
And a syscall doesn’t have a symbol name.

143
00:09:01,070 --> 00:09:05,900
A syscall is an asembler interrup instruction with a number as paramter to indicate which

144
00:09:05,900 --> 00:09:08,460
syscall you want.

145
00:09:08,460 --> 00:09:12,310
But there is a brk symbol, but it’s not initially found.

146
00:09:12,310 --> 00:09:17,560
You first have to execute the program in order to load the dynamic library libc, which does

147
00:09:17,560 --> 00:09:19,840
contain a brk symbol.

148
00:09:19,840 --> 00:09:25,400
And infact that is a regular function as a wrapper around the brk syscall.

149
00:09:25,400 --> 00:09:30,580
So anything inside of libc would not directly do the syscall interrupt, it would call the

150
00:09:30,580 --> 00:09:32,780
internal brk function.

151
00:09:32,780 --> 00:09:37,070
So that;s why we can easily set a breakpoint like this.

152
00:09:37,070 --> 00:09:41,460
Long story short we can now continue and hit that breakpoint and then examine the function

153
00:09:41,460 --> 00:09:47,420
backtrace which tells us which functions have been called that lead to this brk call.

154
00:09:47,420 --> 00:09:49,480
I clean that up a bit.

155
00:09:49,480 --> 00:09:50,480
So here we go.

156
00:09:50,480 --> 00:09:53,500
And as you can see it starts with IO_puts.

157
00:09:53,500 --> 00:09:58,210
You can also look at the libc code for that stuff, I just pulled up some mirror of libc

158
00:09:58,210 --> 00:10:01,410
on github, and you can read the code there.

159
00:10:01,410 --> 00:10:06,290
The reason why the function is not called puts, but IO_puts, eventhough we only use

160
00:10:06,290 --> 00:10:10,990
puts when we call it, has to do with a lot of C macros in libc.

161
00:10:10,990 --> 00:10:13,860
I find it really difficult to read that code.

162
00:10:13,860 --> 00:10:20,520
For example we know that the next function has the symbol name _IO_new_file_xsputn, but

163
00:10:20,520 --> 00:10:22,770
that doesn’t show up in the C code.

164
00:10:22,770 --> 00:10:29,060
But there is this similarely called IO_sputn, which when you look that up leads to a macro

165
00:10:29,060 --> 00:10:32,530
that says that it’s actually IO_Xsputn.

166
00:10:32,530 --> 00:10:39,660
Which itself is another macro that is JUMP2 with __xsputn as the first argument , and

167
00:10:39,660 --> 00:10:41,530
JUMP2 is obviously another macro.

168
00:10:41,530 --> 00:10:43,750
And it just keeps going like that.

169
00:10:43,750 --> 00:10:45,510
Feel free to do that on your own.

170
00:10:45,510 --> 00:10:50,610
But if we trust our trace we can see that at some point it calls doallocbuffer.

171
00:10:50,610 --> 00:10:54,780
And there is also a comment saying: “Allocate a buffer if needed”.

172
00:10:54,780 --> 00:11:00,690
So this 1024 byte malloc has to do with the standard output buffer.

173
00:11:00,690 --> 00:11:06,460
A printf doesn’t immediatly result in a syscall write, but libc implements a lot of

174
00:11:06,460 --> 00:11:11,750
stuff like this in order to achieve higher performances by buffering output instead of

175
00:11:11,750 --> 00:11:16,950
waiting for files, or writing a few bigger chunks instead of a lot of small pieces.

176
00:11:16,950 --> 00:11:17,950
Yeah.

177
00:11:17,950 --> 00:11:20,750
I would consider this a solved mystery.

178
00:11:20,750 --> 00:11:23,750
Just a little excursion into the inner workings of programs.

179
00:11:23,750 --> 00:11:25,230
I hope you liked that.

180
00:11:25,230 --> 00:11:25,730
See you next week.

