1
00:00:00,089 --> 00:00:05,279
让我们从当前Ubuntu上的漏洞攻击练习Protostar中查看格式级别4

2
00:00:05,280 --> 00:00:06,280
machine.

3
00:00:06,280 --> 00:00:10,640
这一次，我想，我们不是从一开始就建立起完整的开发，而是

4
00:00:10,640 --> 00:00:16,090
利用我们为32位Linux映像开发的旧漏洞，看看它是否仍然存在

5
00:00:16,090 --> 00:00:17,090
works.

6
00:00:17,090 --> 00:00:29,940
Probably it won’t but then we debug it and slowly make it work on this 64bit ubuntu.

7
00:00:29,939 --> 00:00:32,579
Okay so here is the source code again.

8
00:00:32,580 --> 00:00:39,860
We have a 512 byte large buffer on the stack, which is used to read data from standard input.

9
00:00:39,860 --> 00:00:45,270
But it only reads up to 512 bytes, so there is no buffer overflow.

10
00:00:45,270 --> 00:00:50,970
But then this buffer is passed directly to printf, so we have a format string exploit.

11
00:00:50,970 --> 00:00:57,350
Our goal is it to redirect code execution to the hello() function.

12
00:00:57,350 --> 00:01:01,530
注意，在printf（）之后，我们如何找到一个出口？

13
00:01:01,530 --> 00:01:07,450
好吧，这是故意放在这里的，因为退出是libc的一部分，所以会有一个全球性的

14
00:01:07,450 --> 00:01:11,440
offset table entry for it which we can overwrite.

15
00:01:11,439 --> 00:01:17,179
Then when we call exit here, our overwritten function would be executed instead.

16
00:01:17,179 --> 00:01:21,839
So it’s actually a pretty straight forward format string exploit.

17
00:01:21,840 --> 00:01:26,070
Just write to the exit GOT entry the address of hello and you are done.

18
00:01:26,069 --> 00:01:32,829
Hello() and the GOT table have fixed addresses and are not affected by ASLR.

19
00:01:32,829 --> 00:01:37,259
At least on this ubuntu version because of the default compiler options.

20
00:01:37,259 --> 00:01:43,979
I received several comments that wrote that on their system they default to PIE.

21
00:01:43,979 --> 00:01:49,329
所以这里的got地址和函数会受到aslr的影响，然后我不

22
00:01:49,329 --> 00:01:53,039
think these simple cases are exploitable anymore.

23
00:01:53,040 --> 00:01:57,880
我们需要一个更复杂的例子，更多的交互，在这里

24
00:01:57,880 --> 00:02:01,140
first can leak values to defeat aslr.

25
00:02:01,139 --> 00:02:03,059
But we will slowly get there, over time.

26
00:02:03,060 --> 00:02:06,270
Let’s not rush too quickly into those topics.

27
00:02:06,270 --> 00:02:11,560
So we compile this now on our ubuntu machine and we get the old exploit code.

28
00:02:11,560 --> 00:02:14,380
伙计，这是第0x13集…

29
00:02:14,379 --> 00:02:20,319
August 2016… holy shit that is a long time ago.

30
00:02:20,319 --> 00:02:27,249
When I started I thought I would have very quickly a complete series on all the basics...

31
00:02:27,250 --> 00:02:30,480
我们还没有到达ROP和ASLR。嗯…

32
00:02:30,480 --> 00:02:31,480
Goddamit.

33
00:02:31,480 --> 00:02:32,480
Anyway.

34
00:02:32,480 --> 00:02:34,890
Let’s copy that python code.

35
00:02:34,890 --> 00:02:35,950
Looks good.

36
00:02:35,950 --> 00:02:42,010
现在我把它写进一个文件--exp，然后我们可以用format4启动gdb并执行

37
00:02:42,010 --> 00:02:43,100
it.

38
00:02:43,099 --> 00:02:48,159
Run and then we pipe in the exp file as input to the program.

39
00:02:48,159 --> 00:02:54,479
Uh we print a lot of character, that looks good but we get a segfault.

40
00:02:54,480 --> 00:03:02,130
We are attempting to write the value in r15, 0x84b4 to the address in rax.

41
00:03:02,129 --> 00:03:04,529
And rax is obviously wrong.

42
00:03:04,530 --> 00:03:06,470
0x58 is X.

43
00:03:06,469 --> 00:03:10,599
So this is the %n part of the exploit.

44
00:03:10,599 --> 00:03:14,869
0x84B4是已经打印的字符数，即这里的所有空格，

45
00:03:14,870 --> 00:03:21,440
and it tried to write to the 4th value, and that turned out to be not the address anymore.

46
00:03:21,440 --> 00:03:23,470
So two things.

47
00:03:23,469 --> 00:03:29,029
首先，显然我们用%n编写的字符数量是错误的，我们

48
00:03:29,030 --> 00:03:31,790
don’t even know yet what we want to write.

49
00:03:31,790 --> 00:03:36,960
And most importantly, we are not writing to the address we have specified in the exploit.

50
00:03:36,959 --> 00:03:41,009
Now with the format string offset we hit our padding.

51
00:03:41,010 --> 00:03:45,550
Okay so let’s use this opportunity and get the correct addresses first.

52
00:03:45,549 --> 00:03:50,899
We need the address of the exit GOT entry, we do this by looking where it is called.

53
00:03:50,900 --> 00:03:56,260
然后我们简单地分解几个跳转到got入口的指令，这就是plt

54
00:03:56,260 --> 00:03:58,010
the procedure linkage table.

55
00:03:58,010 --> 00:04:01,300
And here it references the exit GOT entry.

56
00:04:01,299 --> 00:04:05,889
你可以看到它会跳到写在那里的任何地址，所以我们必须覆盖

57
00:04:05,889 --> 00:04:08,519
this with the address of hello.

58
00:04:08,519 --> 00:04:10,899
And here is the address of hello.

59
00:04:10,900 --> 00:04:16,890
您可以再次看到，只有当前出口的最后2个字节获得了入口和我们想要的

60
00:04:16,889 --> 00:04:18,919
hello address are different.

61
00:04:18,919 --> 00:04:23,869
Which means we only have to overwrite those last two bytes.

62
00:04:23,870 --> 00:04:28,450
所以让我们把这两个新地址放在我们的漏洞代码中，我们也可以扔掉

63
00:04:28,450 --> 00:04:29,560
the old format modifiers.

64
00:04:29,560 --> 00:04:30,700
The amount of characters we print is wrong and the offset doesn’t match anymore either.

65
00:04:30,699 --> 00:04:35,899
And instead we just add a bunch of %p, to find our new stack offset.

66
00:04:35,900 --> 00:04:42,450
So we write it again to a file, start gdb and pipe the file in as input.

67
00:04:42,450 --> 00:04:45,920
嗯…没有实际输出？

68
00:04:45,920 --> 00:04:47,580
就像一个@和一个倒勾？

69
00:04:47,580 --> 00:04:51,830
我们用%p泄露的地址在哪里？

70
00:04:51,830 --> 00:04:56,300
这些小事情真的很让人沮丧

71
00:04:56,300 --> 00:04:58,750
me when I was preparing this episode.

72
00:04:58,750 --> 00:05:01,860
I was going crazy trying to understand what the heck is happening.

73
00:05:01,860 --> 00:05:07,330
I’m just executing it over and over again, hoping the computer would do something else.

74
00:05:07,330 --> 00:05:13,390
I’m debugging it to break before the printf and see that my input is passed to printf.

75
00:05:13,389 --> 00:05:14,839
But no output.

76
00:05:14,840 --> 00:05:18,170
该死的Ghnana工作！

77
00:05:18,169 --> 00:05:19,209
But it will not.

78
00:05:19,210 --> 00:05:23,320
If it’s not doing what i want it to do, I made a mistake.

79
00:05:23,319 --> 00:05:24,489
I am the problem.

80
00:05:24,490 --> 00:05:30,860
我需要冷静下来，退后一步，想办法弄清楚我的蠢货。

81
00:05:30,860 --> 00:05:32,230
mistake.

82
00:05:32,229 --> 00:05:35,229
So what exactly is the output we get.

83
00:05:35,229 --> 00:05:41,879
I pipe the exploit output into hexdump and see that it stops after three characters.

84
00:05:41,879 --> 00:05:44,699
And that is our address but cut off.

85
00:05:44,699 --> 00:05:48,829
The other address and the format string is missing.

86
00:05:48,830 --> 00:05:55,800
But when I then also did the hexdump of the exploit I noticed the obvious mistake.

87
00:05:55,800 --> 00:05:58,300
The address has a null byte.

88
00:05:58,300 --> 00:06:00,950
And printf stops at a null-byte.

89
00:06:00,949 --> 00:06:01,949
Strings are null-terminated.

90
00:06:01,949 --> 00:06:04,699
Godam I’m so dumb.

91
00:06:04,699 --> 00:06:10,679
这不是32位攻击的问题，因为我们的地址也有4个字节

92
00:06:10,680 --> 00:06:13,370
and thus no null-byte.

93
00:06:13,370 --> 00:06:16,380
Now on 64bit the default address is only 3 bytes.

94
00:06:16,379 --> 00:06:22,109
So our next step is - we move the address at the end of our exploit.

95
00:06:22,110 --> 00:06:25,100
They still get placed on the stack with the nullbytes.

96
00:06:25,099 --> 00:06:27,159
fgets will read nullbytes.

97
00:06:27,159 --> 00:06:31,379
Just the printf format vulnerability part must not have a null-byte.

98
00:06:31,379 --> 00:06:37,139
当我们把它移到末尾时，我们希望它在一个固定的位置，所以我们将填充添加到

99
00:06:37,140 --> 00:06:41,720
我们的格式字符串，然后确保在

100
00:06:41,720 --> 00:06:42,720
end.

101
00:06:42,720 --> 00:06:48,220
We are on 64bit, so we have 2 times 8 bytes, so we need 16 characters.

102
00:06:48,220 --> 00:06:49,470
Looks good.

103
00:06:49,470 --> 00:06:53,120
So we try that intput into format4.

104
00:06:53,120 --> 00:06:54,910
Looks good, we print values now.

105
00:06:54,909 --> 00:06:56,519
But I can’t find our address.

106
00:06:56,520 --> 00:06:59,920
Let’s actually have a lot more %p.

107
00:06:59,919 --> 00:07:04,139
How about 100, that fits easily in the 512 bytes.

108
00:07:04,139 --> 00:07:06,949
Ok so where are they.

109
00:07:06,950 --> 00:07:08,610
他们在这儿？

110
00:07:08,610 --> 00:07:10,070
But that doesn’t look good.

111
00:07:10,069 --> 00:07:13,639
They should be two individual values.

112
00:07:13,639 --> 00:07:15,289
But it’s pretty clear what happened.

113
00:07:15,289 --> 00:07:19,709
We forgot to also encode the addresses for 64bit.

114
00:07:19,710 --> 00:07:26,240
Struct pack I packs the integer in 4 bytes, but we want it packed in 8 bytes.

115
00:07:26,240 --> 00:07:28,470
So let’s try it again.

116
00:07:28,470 --> 00:07:29,470
Here they are.

117
00:07:29,470 --> 00:07:30,830
This looks good.

118
00:07:30,830 --> 00:07:32,250
Now let’s find their offset.

119
00:07:32,250 --> 00:07:34,570
We can just count how much to the end.

120
00:07:34,569 --> 00:07:36,389
And then subtract from 100.

121
00:07:36,389 --> 00:07:40,509
So at offset 68 we should find the address.

122
00:07:40,510 --> 00:07:41,510
And yes indeed.

123
00:07:41,510 --> 00:07:42,960
There it is.

124
00:07:42,960 --> 00:07:48,160
So now, we just have to print the correct amount of characters to write the two bytes.

125
00:07:48,159 --> 00:07:52,019
Actually, we don’t need two writes, we should be able to do that in one.

126
00:07:52,020 --> 00:07:57,000
So we add another format string with a padding of the amount of characters we want to write.

127
00:07:57,000 --> 00:08:02,350
That would be 0x676, minus the characters we already printed before that.

128
00:08:02,349 --> 00:08:03,419
So basically minus 8.

129
00:08:03,419 --> 00:08:07,999
然后我们还应该删除%n前面的空格，这将是另一个字符

130
00:08:08,000 --> 00:08:09,000
printed.

131
00:08:09,000 --> 00:08:10,000
所以现在应该可以了，对吧？

132
00:08:10,000 --> 00:08:12,060
让我们将%p更改为%n并尝试它！

133
00:08:12,060 --> 00:08:13,300
Segmentation fault.

134
00:08:13,300 --> 00:08:14,340
该死的…

135
00:08:14,340 --> 00:08:18,940
So when I was recording all of this I really thought it should work right away.

136
00:08:18,940 --> 00:08:21,210
But then I got the segmentation fault.

137
00:08:21,210 --> 00:08:22,350
Really confused me.

138
00:08:22,349 --> 00:08:25,299
And that would be again something I could obsess about.

139
00:08:25,300 --> 00:08:27,320
为什么会这样？

140
00:08:27,319 --> 00:08:31,519
但在我停止录音并开始写下我刚刚做的事情之后，

141
00:08:31,520 --> 00:08:32,520
the script.

142
00:08:32,520 --> 00:08:33,970
I realized my mistake.

143
00:08:33,970 --> 00:08:35,730
当我写下%n

144
00:08:35,730 --> 00:08:39,570
I realized I wrote a whole integer.

145
00:08:39,570 --> 00:08:44,970
But I meant to write only two bytes, so I would have required %hn.

146
00:08:44,970 --> 00:08:47,000
We should be able to verify this with gdb.

147
00:08:47,000 --> 00:08:48,480
Let’s check it out.

148
00:08:48,480 --> 00:08:49,900
Yes there it is.

149
00:08:49,900 --> 00:08:52,460
Segfault at address 0x676.

150
00:08:52,460 --> 00:08:57,320
我们写了一个整数，所以我们重写了已经存储的更高字节。

151
00:08:57,320 --> 00:08:59,130
in the GOT.

152
00:08:59,130 --> 00:09:01,520
So let’s change it to %hn.

153
00:09:01,520 --> 00:09:03,890
To write half a word or whatever that means.

154
00:09:03,890 --> 00:09:05,780
It writes two bytes.

155
00:09:05,780 --> 00:09:09,450
那很管用！代码执行重定向！你赢了

156
00:09:09,450 --> 00:09:13,300
You see the exploit is different from the original 32bit version.

157
00:09:13,300 --> 00:09:20,210
It required quite some changes but it also kinda is still the same thing.

158
00:09:20,210 --> 00:09:22,350
Definitely not a hard challenge on a modern system.

159
00:09:22,350 --> 00:09:25,130
As long as you don’t compile it with PIE.

