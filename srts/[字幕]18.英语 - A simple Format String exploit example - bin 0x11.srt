1
00:00:07,109 --> 00:00:12,739
In this episode we will have a look at format
level 1 from exploit-exercises protostar.

2
00:00:12,740 --> 00:00:17,390
This class of vulnerability is weird, but
was mind blowing to me, when I first saw it.

3
00:00:17,390 --> 00:00:18,770
So first of all...

4
00:00:18,770 --> 00:00:20,770
What are format strings?

5
00:00:20,770 --> 00:00:25,090
Probably the most known function in C is printf.

6
00:00:25,090 --> 00:00:27,890
Printf prints formatted data to stdout.

7
00:00:27,890 --> 00:00:32,390
In my “programming in C” video I have
used printf to print a name that a user can

8
00:00:32,390 --> 00:00:33,660
supply.

9
00:00:33,660 --> 00:00:36,140
The parameters for printf() are the following.

10
00:00:36,140 --> 00:00:39,180
The first parameter is the so called “format
string”.

11
00:00:39,180 --> 00:00:42,240
In that early video that was “Knock, knock.”

12
00:00:42,240 --> 00:00:43,390
percentage ‘S’.

13
00:00:43,390 --> 00:00:46,840
And as a second parameter we used argv[1].

14
00:00:46,840 --> 00:00:48,740
Which contains a string.

15
00:00:48,739 --> 00:00:54,459
So printf read the format string and found
the percentage ‘S’ which means, that at

16
00:00:54,460 --> 00:00:56,150
this position belongs a string.

17
00:00:56,149 --> 00:01:03,379
So it takes the first supplied variable, in
this case argv[1] and places the string there.

18
00:01:03,380 --> 00:01:07,970
Format strings support a lot of different
types of variables, for example %d, which

19
00:01:07,970 --> 00:01:09,740
is a signed decimal integer.

20
00:01:09,740 --> 00:01:12,210
Or %x, to display a number in hex.

21
00:01:12,210 --> 00:01:14,570
And you can do even more than that.

22
00:01:14,570 --> 00:01:19,220
For example if you specify a number between
the percentage and the specifier you can tell

23
00:01:19,220 --> 00:01:21,130
to what size it should be padded.

24
00:01:21,130 --> 00:01:27,750
And you can for example prepend a 0 to that
number, to pad the result with zeroes.

25
00:01:27,750 --> 00:01:30,900
Format string functions like that exist also
in other languages.

26
00:01:30,900 --> 00:01:33,800
For example you can use pretty much the same
features in python.

27
00:01:33,799 --> 00:01:34,799
Print.

28
00:01:34,799 --> 00:01:39,659
A format string, with percentage and then
the variables afterwards with another percentage

29
00:01:39,659 --> 00:01:40,659
sign.

30
00:01:40,659 --> 00:01:44,249
Or better use the format function which has
a slightly different syntax.

31
00:01:44,250 --> 00:01:46,100
But in the end it’s all the same.

32
00:01:46,100 --> 00:01:48,050
And now you wonder.

33
00:01:48,049 --> 00:01:53,069
How the hell can something, that just prints
text, be exploited?

34
00:01:53,070 --> 00:01:56,760
So let’s have a look at the source code
of format level 1.

35
00:01:56,759 --> 00:02:01,689
Main calls the function vuln with the string
from argv[1].

36
00:02:01,689 --> 00:02:04,289
And that string is placed in printf.

37
00:02:04,290 --> 00:02:09,600
And then we have a global variable target,
which is checked if it got modified.

38
00:02:09,599 --> 00:02:13,949
So pretty similar to the early stack buffer
overflow challenges.

39
00:02:13,950 --> 00:02:16,480
We need to manipulate this value.

40
00:02:16,480 --> 00:02:20,410
But how can we manipulate a variable in memory
with printf?

41
00:02:20,410 --> 00:02:21,410
Well.

42
00:02:21,410 --> 00:02:24,200
Let’s do this step by step.

43
00:02:24,200 --> 00:02:27,230
Let’s first execute the program.

44
00:02:27,230 --> 00:02:32,020
As you can see, it will simply print whatever
we supply in argv[1].

45
00:02:32,020 --> 00:02:33,230
That looks simple.

46
00:02:33,230 --> 00:02:35,840
But there is one small thing you should notice.

47
00:02:35,840 --> 00:02:38,930
Which parameter of the printf() does the attacker
control?...

48
00:02:38,930 --> 00:02:43,090
It’s not the second parameter like in the
programming in C video.

49
00:02:43,090 --> 00:02:44,570
It’s the first parameter.

50
00:02:44,569 --> 00:02:45,679
The format string.

51
00:02:45,680 --> 00:02:46,680
Soooo…

52
00:02:46,680 --> 00:02:48,910
Can we just use some percentage syntax?

53
00:02:48,910 --> 00:02:50,010
Let’s try.

54
00:02:50,010 --> 00:02:52,360
Let’s enter a format string.

55
00:02:52,360 --> 00:02:53,360
Test ‘%d’.

56
00:02:53,360 --> 00:02:54,800
Oh damn.

57
00:02:54,800 --> 00:02:56,050
it printed a number.

58
00:02:56,050 --> 00:02:57,050
Weird.

59
00:02:57,050 --> 00:02:58,050
Let’s add some more!

60
00:02:58,050 --> 00:02:59,460
Woha. more numbers.

61
00:02:59,459 --> 00:03:03,739
Let’s print them as hex instead of signed
decimal numbers.

62
00:03:03,739 --> 00:03:05,069
That looks more familiar.

63
00:03:05,069 --> 00:03:08,449
Remember the videos where we were looking
at the stack?

64
00:03:08,450 --> 00:03:12,890
Do those values starting with bffff remind
you of something?

65
00:03:12,890 --> 00:03:15,100
Those were stack addresses.

66
00:03:15,100 --> 00:03:17,350
So what are we printing here?

67
00:03:17,349 --> 00:03:22,049
If you have watched the previous episode about
reversing C, you know how functions are being

68
00:03:22,050 --> 00:03:23,050
called.

69
00:03:23,050 --> 00:03:24,610
Especially in 32bit.

70
00:03:24,610 --> 00:03:29,330
The parameters are simply placed on to the
stack, and then the function is called.

71
00:03:29,330 --> 00:03:34,350
So if you would use printf normally, your
variables that you want to print would be

72
00:03:34,350 --> 00:03:36,500
placed on the stack.

73
00:03:36,500 --> 00:03:42,240
Well now there are no variables being placed
on the stack, so what values are you reading?

74
00:03:42,240 --> 00:03:46,530
Obviously you are reading whatever printf
can find on the stack.

75
00:03:46,530 --> 00:03:49,040
So any value on the stack.

76
00:03:49,040 --> 00:03:51,600
So what can you do with that?

77
00:03:51,600 --> 00:03:54,330
First of all, it is a memory leak vulnerability.

78
00:03:54,330 --> 00:03:57,050
You can leak all kinds of stuff from the stack.

79
00:03:57,050 --> 00:04:02,160
Imagine you had a program with ASLR, meaning
that the location of the stack in memory is

80
00:04:02,159 --> 00:04:03,159
random.

81
00:04:03,159 --> 00:04:06,079
And you don’t know where it is, but you
need the address for a buffer overflow to

82
00:04:06,080 --> 00:04:07,740
jump to shellcode.

83
00:04:07,739 --> 00:04:12,759
With this here, you can leak values from the
process memory, more specifically from the

84
00:04:12,760 --> 00:04:16,520
stack, and thus possibly leaking stack addresses.

85
00:04:16,519 --> 00:04:19,809
Which can then be used in a second step for
a buffer overflow.

86
00:04:19,810 --> 00:04:25,520
In a recent CTF which I played there was an
exploitable challenge where I used a format

87
00:04:25,520 --> 00:04:28,800
string vulnerability to leak the stack canary.

88
00:04:28,800 --> 00:04:32,850
I will do a video about exploit mitigations
at another point, but the stack canary is

89
00:04:32,849 --> 00:04:36,279
a random value which protects from buffer
overflows.

90
00:04:36,280 --> 00:04:40,060
If I can get this number, I can defeat this
protection.

91
00:04:40,060 --> 00:04:41,410
Which I did.

92
00:04:41,409 --> 00:04:46,789
So at first leaking som weird values from
a process memory doesn’t sound like much,

93
00:04:46,789 --> 00:04:50,649
but there are many examples you could come
up with, where disclosing some memory could

94
00:04:50,650 --> 00:04:52,760
help exploiting a target.

95
00:04:52,759 --> 00:04:58,059
After all, bugs like heartbleed were “just”
leaking some memory and it was awful.

96
00:04:58,059 --> 00:05:00,219
Ok but in our particular case.

97
00:05:00,219 --> 00:05:02,999
How can we use that to modify a value.

98
00:05:02,999 --> 00:05:06,409
At the moment it only looks like we can leak
values from the stack.

99
00:05:06,409 --> 00:05:08,029
Let’s have a look at the printf manpage.

100
00:05:08,029 --> 00:05:09,699
man 3 printf.

101
00:05:09,699 --> 00:05:14,009
And let’s scroll to the well known BUGS
section.

102
00:05:14,009 --> 00:05:17,389
It says here,
“if something comes from untrusted user

103
00:05:17,389 --> 00:05:24,159
input, it may contain %n, causing the printf()
call to write to memory and creating a security

104
00:05:24,159 --> 00:05:27,599
hole“
And a little bit further up the specifier

105
00:05:27,599 --> 00:05:29,069
‘n’ is explained as:

106
00:05:29,069 --> 00:05:34,719
n The number of characters written so far
is stored into the integer indicated by the

107
00:05:34,719 --> 00:05:39,099
int * (or variant) pointer argument.

108
00:05:39,099 --> 00:05:44,509
So percentage ‘n’ writes the amount of
characters that were already printed, into

109
00:05:44,509 --> 00:05:46,079
a variable.

110
00:05:46,080 --> 00:05:48,990
And a variable is just some area in memory.

111
00:05:48,990 --> 00:05:52,900
And we know that to specify where that area
is, we need use a pointer.

112
00:05:52,900 --> 00:05:57,960
Or if we just look at the assembler code,
a pointer is simply an address, so that printf

113
00:05:57,960 --> 00:06:00,020
knows where to write the result.

114
00:06:00,020 --> 00:06:05,030
So if you were to write a legit C program
with %n, you would place a pointer to an integer

115
00:06:05,030 --> 00:06:11,140
variable as a parameter to printf, or in assembler
this would simply be putting the address of

116
00:06:11,139 --> 00:06:14,169
the variable onto the stack.

117
00:06:14,169 --> 00:06:19,549
This means, that whatever value is on the
stack, is used as a location where printf

118
00:06:19,550 --> 00:06:20,550
will write to.

119
00:06:20,550 --> 00:06:23,320
Now you can basically solve this challenge
alone.

120
00:06:23,319 --> 00:06:26,169
We need to write a value in target.

121
00:06:26,169 --> 00:06:30,949
So let’s use objdump -t to find all symbols
from this binary.

122
00:06:30,949 --> 00:06:33,579
And here is the address of the target variable.

123
00:06:33,580 --> 00:06:38,690
Now, when we want printf to write something
at this location, we have to find this address

124
00:06:38,689 --> 00:06:39,689
on the stack.

125
00:06:39,689 --> 00:06:40,959
Let’s start investigating.

126
00:06:40,960 --> 00:06:48,070
I will use python and a one line script directly
from the commandline via -c to help me with

127
00:06:48,069 --> 00:06:49,949
printing a test string.

128
00:06:49,949 --> 00:06:52,489
For example 10 hex numbers.

129
00:06:52,490 --> 00:06:54,100
Mh.

130
00:06:54,099 --> 00:06:58,719
Maybe I want to seperate them.

131
00:06:58,719 --> 00:07:01,739
Doesn’t look like the address is here.

132
00:07:01,740 --> 00:07:03,730
Maybe if we print more values from the stack.

133
00:07:03,729 --> 00:07:04,729
Nope.

134
00:07:04,729 --> 00:07:05,729
Not here.

135
00:07:05,729 --> 00:07:06,729
Maybe more?

136
00:07:06,729 --> 00:07:07,729
Wait a minute.

137
00:07:07,729 --> 00:07:09,299
What is that weird pattern.

138
00:07:09,300 --> 00:07:13,310
From the values of those hex values it could
be ascii.

139
00:07:13,309 --> 00:07:16,209
hex 20 is a space afterall.

140
00:07:16,210 --> 00:07:20,270
With python we can quickly convert those hex
values to a ascii characters.

141
00:07:20,270 --> 00:07:21,510
And wooohh..

142
00:07:21,509 --> 00:07:22,509
%x?

143
00:07:22,509 --> 00:07:24,839
That loooks like our string that we have supplied.

144
00:07:24,839 --> 00:07:26,139
Let’s test that.

145
00:07:26,139 --> 00:07:31,179
Let’s add some capital As, because we can
recognize those ascii values easily.

146
00:07:31,180 --> 00:07:34,290
Now we just have to look for 4141414141.

147
00:07:34,289 --> 00:07:36,049
And indeed.

148
00:07:36,050 --> 00:07:37,140
there are our As.

149
00:07:37,139 --> 00:07:38,649
And that makes sense.

150
00:07:38,650 --> 00:07:42,890
Because the program arguments are simply stored
on the stack, like the environment variables

151
00:07:42,889 --> 00:07:44,189
and other stuff.

152
00:07:44,189 --> 00:07:45,189
Cool.

153
00:07:45,189 --> 00:07:51,139
This means we can simply place the address
from the target on the stack ourselves, by

154
00:07:51,139 --> 00:07:53,549
adding it to our string.

155
00:07:53,550 --> 00:07:59,380
So get the address again for target, and then
we can add the address in our string.

156
00:07:59,379 --> 00:08:03,569
Maybe wrap it in some As and Bs, so we can
find it in the output easily.

157
00:08:03,569 --> 00:08:04,689
Uhhh. yes.

158
00:08:04,689 --> 00:08:06,369
There it is.

159
00:08:06,369 --> 00:08:07,369
cool!

160
00:08:07,369 --> 00:08:13,459
So in theory, we just have to replace the
%x that was printing this address with %n

161
00:08:13,459 --> 00:08:46,439
to instead write to this 

162
00:08:46,440 --> 00:08:49,930
address location.

163
00:08:49,930 --> 00:08:54,690
You could do it more intelligently, but I
will just figure it out with trial and error.

164
00:08:54,690 --> 00:08:59,130
You have to be careful, because remember from
our previous videos where the stack was shifting

165
00:08:59,130 --> 00:09:01,690
around because of stuff like environment variables?

166
00:09:01,690 --> 00:09:06,330
The different length program argument that
we supply, moves around the stack as well.

167
00:09:06,329 --> 00:09:10,479
So you might have to fiddle around quite a
bit until you just get it right.

168
00:09:10,480 --> 00:09:13,110
Ok that took a bit, but looks cool.

169
00:09:13,110 --> 00:09:16,410
The last %x seems to reference our address
now.

170
00:09:16,410 --> 00:09:22,220
And when we replace the x with the n, to write
to that address we modified the target.

171
00:09:22,220 --> 00:09:27,540
And you can imagine, that if we can write
anywhere in memory, we could overwrite things

172
00:09:27,540 --> 00:09:30,330
to redirect code execution as well.

173
00:09:30,330 --> 00:09:32,570
So that will be the case in later levels.

174
00:09:32,569 --> 00:09:36,059
Just a small tip for when you work on format
string exploits.

175
00:09:36,060 --> 00:09:39,050
It makes sense to keep your attack string
always the same length.

176
00:09:39,050 --> 00:09:41,490
Then you don’t have to fiddle around much.

177
00:09:41,490 --> 00:09:45,500
Just use a python script that always extends
or cuts the string at like 500 characters

178
00:09:45,500 --> 00:09:46,500
or something.

179
00:09:46,500 --> 00:09:49,290
And then you have enough space to play around
and the stack doesn’t move around.

