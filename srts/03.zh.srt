1
00:00:06,180 --> 00:00:11,300
为了能够在软件中发现安全问题，
人们必须理解软件是如何编写的。

2
00:00:11,300 --> 00:00:15,850
探索不同的编程非常有帮助
了解其差异的语言

3
00:00:15,850 --> 00:00:20,230
以及相似之处，并进入这一特殊领域
思维方式。

4
00:00:20,230 --> 00:00:25,110
通常当我使用一个软件时，我会想象
其中某一部分可能已经实现

5
00:00:25,110 --> 00:00:30,630
-这让我想到了软件架构
以及开发商可能遇到的困难

6
00:00:30,630 --> 00:00:35,910
可能有，这有助于发现
可以利用。

7
00:00:35,910 --> 00:00:40,460
当我年轻的时候，我用编程来写
用于浏览器游戏或简单游戏的损坏计算器

8
00:00:40,460 --> 00:00:45,600
我们可以在局域网聚会上使用的聊天程序
沟通。现在我用编程

9
00:00:45,600 --> 00:00:50,010
更多地作为解决其他问题的工具或
帮助我完成重复性的任务。

10
00:00:50,010 --> 00:00:54,640
想了解一下编程是什么样的，
我们将看一个非常简单的程序

11
00:00:54,640 --> 00:01:00,470
在非常老的和低级的层次上实施
语言C，在下一个视频中，我们使用

12
00:01:00,469 --> 00:01:05,819
更现代的脚本语言python。你
会注意到很多相似之处

13
00:01:05,820 --> 00:01:10,880
在结构上，也有多不同
语法看起来像。

14
00:01:10,880 --> 00:01:15,510
让我先告诉你我们的小节目
会的。要执行它，你只需

15
00:01:15,510 --> 00:01:19,960
输入路径。因为我们是同一个人
文件夹我们必须用

16
00:01:19,960 --> 00:01:24,800
“dot”，它是当前
位置。也许你想知道为什么

17
00:01:24,800 --> 00:01:30,000
其他程序如“ls”不需要
执行它们的完整路径。

18
00:01:30,000 --> 00:01:35,920
原因是当您输入命令时，
或者一般来说，一个程序的名字，

19
00:01:35,920 --> 00:01:41,020
shell将查看配置的路径
环境变量，其中包含一个列表

20
00:01:41,020 --> 00:01:45,920
查找程序的目录。
有许多不同的环境变量

21
00:01:45,920 --> 00:01:50,490
都有他们的目的，但因为我们
只对我们可以使用的路径感兴趣

22
00:01:50,490 --> 00:01:56,790
将env的输出重定向到
另一个名为grep的程序，可以过滤

23
00:01:56,790 --> 00:02:02,250
对于包含“path”的行。
我使用grep过滤其他程序的输出

24
00:02:02,250 --> 00:02:06,430
总是。它是最有用的
工具。

25
00:02:06,430 --> 00:02:11,690
获取路径内容的另一种方法是
使用echo打印变量。

26
00:02:11,690 --> 00:02:17,310
现在让我们用“Wheris”来查找
LS程序的位置，显示

27
00:02:17,309 --> 00:02:25,379
它确实在指定的位置
通过路径。路径由冒号分隔。

28
00:02:25,379 --> 00:02:30,829
如果我们想从
像LS这样的每个位置，我们可以简单地添加

29
00:02:30,829 --> 00:02:34,629
路径变量的当前目录
有出口。

30
00:02:34,629 --> 00:02:40,209
如果你想复制一些东西，这是一个很好的技巧。
在终点站只是为了标记它，然后

31
00:02:40,210 --> 00:02:47,240
按下鼠标滚轮。这将自动
粘贴标记的文本。现在添加用户的

32
00:02:47,239 --> 00:02:52,109
指向路径的主文件夹，然后可以执行
这个节目和其他节目一样。

33
00:02:52,110 --> 00:02:57,420
现在让我们跳进去。

34
00:02:57,419 --> 00:02:59,999
C已经40岁了，尽管
年龄，它仍然使用很多。其强度

35
00:02:59,998 --> 00:03:00,998
它简单吗？我的意思是
不是太多的语言特征，因此

36
00:03:00,998 --> 00:03:03,718
使其易于理解-至少一次
您了解CPU的工作原理。许多初学者

37
00:03:03,719 --> 00:03:09,649
感觉C是硬的，因为它感觉不可靠
一开始水平太低，但你会注意到

38
00:03:09,650 --> 00:03:14,750
在以后的几集里
装配工，这是理解和

39
00:03:14,749 --> 00:03:17,619
想象一下计算机是如何工作的。

40
00:03:17,620 --> 00:03:22,650
我们的目标是看起来像书呆子。所以我们很明显
将使用名为

41
00:03:22,650 --> 00:03:30,390
vim。别开玩笑了，真的很有道理
学习Vim，因为我们实际上非常需要它。

42
00:03:30,389 --> 00:03:39,859
vi已安装。但是Vim（代表
对于vi的改进）更好一点，并且

43
00:03:39,859 --> 00:03:46,099
还没有。但是我们得到了这个好的小
建议安装sudo-apt-get。

44
00:03:46,099 --> 00:03:53,259
需要sudo前缀，因为只有
根用户可以安装新软件。进入

45
00:03:53,260 --> 00:04:00,920
A继续

46
00:04:00,919 --> 00:04:07,379
现在输入vim和要开始编辑的文件名。
在输入之前，必须输入

47
00:04:07,379 --> 00:04:13,669
按I键“插入”模式。注意
在底部的状态栏上，显示

48
00:04:13,669 --> 00:04:19,469
你在做什么。退出插入
模式点击Escape。然后你可以输入命令

49
00:04:19,470 --> 00:04:29,450
使用冒号（如colon w）保存文件
或冒号Q退出。或者简单的冒号w q to

50
00:04:29,449 --> 00:04:33,339
保存并退出。
我们不需要知道更多的功能

51
00:04:33,340 --> 00:04:38,080
比现在更重要，除非我们想
启用语法突出显示和显示行

52
00:04:38,080 --> 00:04:39,080
数字

53
00:04:39,080 --> 00:04:43,440
语法上
设置号码

54
00:04:43,439 --> 00:04:49,969
首先，我们要使用include语句
添加标准I/O（输入输出）功能

55
00:04:49,970 --> 00:04:56,550
我们的计划。接下来我们定义入口函数
它总是被称为“主”。每一个C

56
00:04:56,551 --> 00:05:02,451
程序有这个功能，这就是
我们的程序开始执行。函数

57
00:05:02,450 --> 00:05:07,820
具有名称并包含属于
到这个函数。参数变量

58
00:05:07,819 --> 00:05:14,909
这里定义的是标准化的。第一个参数
是一个称为argc的整数（代表

59
00:05:14,909 --> 00:05:22,149
用于参数计数）。第二个参数
是一个名为argv的列表（它代表参数

60
00:05:22,150 --> 00:05:28,110
向量）。现在我们将使用数组、列表和
矢量作为同义词。所以这些函数参数

61
00:05:28,110 --> 00:05:34,350
是我们能传递给程序的
命令行。想想“猫”

62
00:05:34,350 --> 00:05:40,440
命令。它以文件名作为第一个参数。
如果你自己给猫编程序，

63
00:05:40,439 --> 00:05:44,609
将通过argv访问文件名。

64
00:05:44,610 --> 00:05:51,910
现在我们用printf打印一些东西
函数和字符串作为参数。

65
00:05:51,909 --> 00:05:59,859
反斜杠n是一个特殊字符
表示换行。我们在

66
00:05:59,860 --> 00:06:09,490
最后一个视频已经。
让我们用esc、colon、wq、enter保存这个。

67
00:06:09,490 --> 00:06:15,290
只是一个友好的提醒，读一下手册
有关printf的详细信息。

68
00:06:15,289 --> 00:06:19,919
访问C函数printf的手册
您必须查看

69
00:06:19,919 --> 00:06:27,959
手册。所以男人3打印。

70
00:06:27,960 --> 00:06:33,340
从文本创建程序
编译它。编译器转换文本

71
00:06:33,340 --> 00:06:39,780
可以执行的二进制机器代码
通过CPU。我们可以使用GNU C编译器

72
00:06:39,780 --> 00:06:47,420
海湾合作委员会为此。“gcc”，代码的文件名
和-o指定输出文件名。

73
00:06:47,419 --> 00:06:55,169
哦…我犯了个错误。有冲突
对于ARGV。所以我们马上打电话来解决这个问题

74
00:06:55,170 --> 00:07:02,610
此变量正确argc。
现在你可以执行它了。令人惊叹的！

75
00:07:02,610 --> 00:07:11,790
让我们从一开始就做个好的程序员吧
并使用-wall启用所有警告。现在

76
00:07:11,790 --> 00:07:18,380
我们得到一个警告，在函数的末尾
没有返回值，尽管定义了main

77
00:07:18,379 --> 00:07:25,069
返回整数。所以让我们来修复
通过在末尾添加返回0，0表示

78
00:07:25,069 --> 00:07:30,789
程序没有错误地退出。
你可以按“o”而不是“i”来

79
00:07:30,789 --> 00:07:37,199
在VIM中输入插入模式，该模式自动
在下面新建一行。也许你开始

80
00:07:37,199 --> 00:07:42,769
现在意识到Vim在
你熟悉捷径。

81
00:07:42,770 --> 00:07:45,340
现在它编译得很好！

82
00:07:45,340 --> 00:07:50,140
让这个节目更有趣一点
我们将添加一个if语句。我们说

83
00:07:50,139 --> 00:07:54,989
参数计数必须等于2。和
如果是这样的话，我们会把它打印出来

84
00:07:54,990 --> 00:08:01,670
和以前一样，只是没有固定的名字。
我们可以使用这个格式字符串百分比语法

85
00:08:01,669 --> 00:08:08,059
S表示在这个地方属于
字符串。作为第一个参数，我们指定

86
00:08:08,060 --> 00:08:13,980
这个字符串，它是
参数向量。是的，上面写着，1，但是

87
00:08:13,980 --> 00:08:18,190
它是这个列表中的第二个条目，因为
我们总是从0开始计数。

88
00:08:18,189 --> 00:08:23,959
如果我们没有两个论点，
我们将打印一条错误消息。良好实践

89
00:08:23,960 --> 00:08:30,200
是打印错误消息不符合标准
输出，但标准误差。似乎

90
00:08:30,199 --> 00:08:34,839
现在很奇怪，但你会理解的
未来。而不是打印

91
00:08:34,840 --> 00:08:40,130
第二个论点，因为在其他情况下
我们可能没有，我们将打印第一个

92
00:08:40,130 --> 00:08:50,730
而是参数。我们还将添加退货
1这里，这个表示程序

93
00:08:50,730 --> 00:08:56,750
因错误退出。
编译并测试这个代码。正如你所能

94
00:08:56,750 --> 00:09:01,800
如果你不指定一个参数，
将显示使用错误消息

95
00:09:01,800 --> 00:09:07,610
程序名。壳能传递一切
您在命令行上键入了

96
00:09:07,610 --> 00:09:15,910
程序的空格。这意味着
第一个参数将是您的程序名。

97
00:09:15,910 --> 00:09:22,010
现在，如果设置第二个参数，那么
消息已打印。还要注意，什么时候

98
00:09:22,010 --> 00:09:27,000
你想要一个带空格的字符串，你
必须用引号来表示

99
00:09:27,000 --> 00:09:31,940
它属于一起。
使用美元问号，您可以显示

100
00:09:31,940 --> 00:09:38,130
以前运行的程序的退出代码，其中
是0还是1取决于我们是否

101
00:09:38,130 --> 00:09:40,830
错误与否。

102
00:09:40,829 --> 00:09:45,179
现在，让我们用这个程序来玩一点。
我们已经触及了环境的话题。

103
00:09:45,180 --> 00:09:49,550
变量。如果你再看他们，你
可以找到$user变量，其中包含

104
00:09:49,550 --> 00:09:56,140
您的用户名。所以当我们执行程序时
使用Dollar用户，它将打印LiveOverflow。

105
00:09:56,139 --> 00:09:59,659
但如果我们真的想印美元呢
用户？

106
00:09:59,660 --> 00:10:05,100
为了达到这个目的，我们必须逃离美元。
美元在命令上有特殊的意义

107
00:10:05,100 --> 00:10:11,410
线。当您输入此文本时，shell将
读你输入的内容，一旦它读到

108
00:10:11,410 --> 00:10:16,680
美元，它知道接下来的角色
将是变量的名称。然后它会

109
00:10:16,680 --> 00:10:20,290
查找此变量的值并替换
它。

110
00:10:20,290 --> 00:10:26,790
但如果我们在美元之前用反斜杠，
shell将首先读取反斜杠和

111
00:10:26,790 --> 00:10:32,370
知道吗，如果一美元跟随，它会
不再把它当作一个特殊的角色。

112
00:10:32,370 --> 00:10:38,360
总是受到欢迎不是很酷吗
当你打开一个终端？浏览到您的主文件夹

113
00:10:38,360 --> 00:10:44,590
再次检查那里的点文件。那里
是一个名为bashrc的文件，它是一个特殊的

114
00:10:44,589 --> 00:10:49,919
打开终端后将加载的文件，
它可以包含执行的命令

115
00:10:49,920 --> 00:10:56,960
每一次。在Vim中打开它，然后到底部
将文件转换为插入

116
00:10:56,959 --> 00:11:02,509
带“I”或“O”的模式。
现在我们可以添加前面的export命令，

117
00:11:02,510 --> 00:11:06,110
但因为我们现在了解环境
变量及其识别方法

118
00:11:06,110 --> 00:11:10,960
换了，我们可以用更好的方法
改变路径。

119
00:11:10,959 --> 00:11:17,389
在下一行，我们添加程序
作为参数的用户变量。

120
00:11:17,389 --> 00:11:22,379
退出以进入命令模式，冒号，w save
它。

121
00:11:22,380 --> 00:11:24,580
打开另一个终端，兴奋起来！

122
00:11:24,579 --> 00:11:30,269
很明显，这也会更容易，
只使用echo而不是编译的C

123
00:11:30,270 --> 00:11:35,200
程序。但没关系。我们学到了
某物。作为练习，您应该添加

124
00:11:35,199 --> 00:11:40,659
带Echo和环境的替代版本
变量到bashrc。你也可以修改

125
00:11:40,660 --> 00:11:46,150
VIMRC始终启用语法突出显示
为vim。

126
00:11:46,150 --> 00:11:51,220
我再次删除export命令，因为
我不想把主文件夹放进去

127
00:11:51,220 --> 00:12:00,710
小径。去排队，按D两次
-你必须处于命令模式，所以按Esc键

128
00:12:00,709 --> 00:12:05,479
如果仍处于插入模式。
现在我要用完整的道路

129
00:12:05,480 --> 00:12:05,560
程序。

