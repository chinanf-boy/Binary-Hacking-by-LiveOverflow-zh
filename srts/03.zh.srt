1
00:00:06,180 --> 00:00:11,300
为了能够在软件中，发现安全问题，
人们必须理解软件是如何编写的。

2
00:00:11,300 --> 00:00:15,850
探索不同的编程语言，了解其差异与相似，是非常有帮助的

3
00:00:15,850 --> 00:00:20,230
你要进入这个特殊的(编程)思维方式。

4
00:00:20,230 --> 00:00:25,110
通常，当我使用一个软件时，我会想象其中的某一部分可能是这样实现的

5
00:00:25,110 --> 00:00:30,630
- 这让我去思考软件架构，以及开发者可能遇到的困难

6
00:00:30,630 --> 00:00:35,910
这有助于发现，可以利用的 bug (漏洞)。

7
00:00:35,910 --> 00:00:40,460
当，我还小的时候，我编程不全(功能)的计算器，给那些

8
00:00:40,460 --> 00:00:45,600
浏览器游戏或，我们可以在局域网联接上，使用的简单聊天沟通程序。


9
00:00:45,600 --> 00:00:50,010
现在我更多是，编程解决其他问题，或
帮助我完成重复性任务的一个工具。

10
00:00:50,010 --> 00:00:54,640
想感受，编程是什么样的，
那我们要来看一个，非常简单的程序

11
00:00:54,640 --> 00:01:00,470
现，用在老的，底层的C编程语言来实现
在下一个视频中，我们使用

12
00:01:00,469 --> 00:01:05,819
更现代的脚本语言 python。那时你会注意到很多相似之处

13
00:01:05,820 --> 00:01:10,880
如，在结构上，但也有不同语法(样子)。

14
00:01:10,880 --> 00:01:15,510
让我先告诉你，我们的小程序会做些什么。
要执行它，你只需输入路径。

15
00:01:15,510 --> 00:01:19,960
因为我们是同一个文件夹，我们必须用"dot(点)"作为路径的开头，

16
00:01:19,960 --> 00:01:24,800
代表它是当前位置。也许你想知道为什么

17
00:01:24,800 --> 00:01:30,000
像，其他程序如"ls"，不需要执行它们的完整路径。

18
00:01:30,000 --> 00:01:35,920
原因是，当您输入命令，或者通俗点，一个程序名时，

19
00:01:35,920 --> 00:01:41,020
shell 将查看配置的 'PATH' 环境变量，其中包含一个路径列表

20
00:01:41,020 --> 00:01:45,920
用来查找程序的目录。
会有许多不同的环境变量，

21
00:01:45,920 --> 00:01:50,490
都有他们的目的，但因为我们
只对我们可以使用的 PATH，感兴趣。

22
00:01:50,490 --> 00:01:56,790
所以我们可以通过管道，将 env 的输出重定向到
另一个名为 grep 的程序，

23
00:01:56,790 --> 00:02:02,250
这程序可以过滤"PATH"包含的行。
我总是使用 grep 过滤其他程序的输出

24
00:02:02,250 --> 00:02:06,430
它是最有用的工具。

25
00:02:06,430 --> 00:02:11,690
获取 PATH 内容的另一种方法是
使用 "echo" 打印变量。

26
00:02:11,690 --> 00:02:17,310
现在让我们用 "wheris" 来查找 'ls' 程序的位置，

27
00:02:17,309 --> 00:02:25,379
显示由 PATH 指定的确实位置。这些路径由冒号分隔。

28
00:02:25,379 --> 00:02:30,829
如果我们想像 "ls" 一样，在每个位置都能执行我们的程序，


29
00:02:30,829 --> 00:02:34,629
我们可以通过 "export"，简单地添加当前目录，到 PATH 变量

30
00:02:34,629 --> 00:02:40,209
如果你想在终端，复制一些东西，有个很好的技巧
就是标记它，然后

31
00:02:40,210 --> 00:02:47,240
按下鼠标滚轮。这将自动粘贴标记的文本。

32
00:02:47,239 --> 00:02:52,109
现在添加用户的 home 文件夹到 PATH 变量，
这样你就可以像其他程序一样，执行你的程序

33
00:02:52,110 --> 00:02:57,420
现在让我们跳进去。

34
00:02:57,419 --> 00:02:59,999
C 已经40岁了，尽管年纪大了，但它仍到处都有。

35
00:02:59,998 --> 00:03:00,998
它的优势是简单吗？我的意思是，不太多的语言特征，

36
00:03:00,998 --> 00:03:03,718
因此易于理解 - 至少，在您了解 CPU 的工作原理之后。

37
00:03:03,719 --> 00:03:09,649
许多初学者感觉 C 很难学，因为它让人感觉直观，且一开始，太处于底层了

38
00:03:09,650 --> 00:03:14,750
但你在以后的几集里注意到，C 是非常接近汇编程序的，

39
00:03:14,749 --> 00:03:17,619
这对理解和思考，计算机是如何工作的，有所帮助。

40
00:03:17,620 --> 00:03:22,650
我们的目标是看起来像书呆子。
所以我们很明显，将使用名为 vim 的一个命令行文本编辑器。

41
00:03:22,650 --> 00:03:30,390
玩笑放一边，学习 Vim 真的很有道理
因为我们实际上非常需要它。

42
00:03:30,389 --> 00:03:39,859
vi 已安装。但是 Vim（ vi 的改进）更好一点，

43
00:03:39,859 --> 00:03:46,099
并且还没有安装。但是我们有个好的小建议，就是使用"sudo apt-get"安装。

44
00:03:46,099 --> 00:03:53,259
"sudo" 前缀是需要的，因为只有根用户可以安装新软件。

45
00:03:53,260 --> 00:04:00,920
输入一个 Y 继续

46
00:04:00,919 --> 00:04:07,379
现在输入 vim ，和要开始编辑的文件名。
在输入(在文本编辑器上打字)之前，

47
00:04:07,379 --> 00:04:13,669
必须输入 'i' 按键，进入"插入"模式。注意在底部的状态栏上，

48
00:04:13,669 --> 00:04:19,469
上面会显示你在做什么。退出"插入"模式，点击 'Escape'。
然后嘛，你可以输入命令，像

49
00:04:19,470 --> 00:04:29,450
冒号 加上 w（如":w"）是保存文件
或 冒号加上 q （如":q"）就是退出。或者

50
00:04:29,449 --> 00:04:33,339
冒号加上 w q （如":wq"）就是保存并退出。
现在，我们不需要知道，更多的功能

51
00:04:33,340 --> 00:04:38,080
除非，我们想启用语法高亮和

52
00:04:38,080 --> 00:04:39,080
显示行数

53
00:04:39,080 --> 00:04:43,440
":syntax on" - 高亮
":set number" - 行数

54
00:04:43,439 --> 00:04:49,969
首先，我们(C 语言程序)要使用 'include' 语句，
添加标准 I/O（输入输出）函数到我们的程序

55
00:04:49,970 --> 00:04:56,550
接下来，我们定义入口函数
它总是命名为"main"。

56
00:04:56,551 --> 00:05:02,451
每一个 C 程序都有这个函数，而这就是我们程序开始要执行的。

57
00:05:02,450 --> 00:05:07,820
一个函数具有一个名称，并包含属于这个函数的封闭代码。

58
00:05:07,819 --> 00:05:14,909
这里定义的参数变量是标准化的。第一个参数，是一个称为 'argc' 的整数（代表用于参数计数）。

59
00:05:14,909 --> 00:05:22,149
第二个参数，是一个名为 'argv' 的列表（它代表参数向量）。

60
00:05:22,150 --> 00:05:28,110
现在，我们将数组、列表和向量，看作同个意思。

61
00:05:28,110 --> 00:05:34,350
所以，这些函数参数正是(在命令行上)传递给我们程序的。

62
00:05:34,350 --> 00:05:40,440
想想 "cat" 命令。它后跟一个文件名，作为第一个参数。


63
00:05:40,439 --> 00:05:44,609
如果你要编写 "cat" 的程序，你可以通过 "argv" 访问文件名。

64
00:05:44,610 --> 00:05:51,910
现在（回到 C 程序），我们用 "printf"函数，和一个字符串作为参数，打印一些东西。

65
00:05:51,909 --> 00:05:59,859
反斜杠n ('\n') 是一个特殊字符，表示为换行符。

66
00:05:59,860 --> 00:06:09,490
我们在上一视频已经看到了。
让我们用保存退出，":wq" Enter。

67
00:06:09,490 --> 00:06:15,290
一个友好的提醒，读一下，有关 'printf' 详细信息的手册。

68
00:06:15,289 --> 00:06:19,919
要访问 C 的 printf 函数的手册，您必须查看第三版的手册

69
00:06:19,919 --> 00:06:27,959
所以，使用"man 3 printf"

70
00:06:27,960 --> 00:06:33,340
要从文本文件，创建出一个程序，你需要编译它。

71
00:06:33,340 --> 00:06:39,780
编译器会将文本转换，二进制机器代码。这些代码能被 CPU 所执行。
现在，我们可以使用 gnu(GNU) C 编译器 - "gcc"

72
00:06:39,780 --> 00:06:47,420
命令："gcc"，后跟代码的文件名，和 "-o" 加上 指定的输出文件名。

73
00:06:47,419 --> 00:06:55,169
哦… 我犯了个错误。"argv" 有冲突。所以我们马上

74
00:06:55,170 --> 00:07:02,610
正确调用 "argc"，来解决这个问题。
现在你可以执行它了。Awesome！

75
00:07:02,610 --> 00:07:11,790
让我们从一开始就做个好的程序员吧，使用 "-Wall" 启用所有警告。

76
00:07:11,790 --> 00:07:18,380
现在我们得到一个警告，在函数的末尾没有返回值，

77
00:07:18,379 --> 00:07:25,069
虽然 "main" 定义了返回整数。
所以，让我们通过在末尾，添加返回 "0" 修复，

78
00:07:25,069 --> 00:07:30,789
"0" 表示程序，没有错误地退出。
（对Vim）你可以按 "o"，而不是 "i"

79
00:07:30,789 --> 00:07:37,199
进入 Vim 的'插入'模式，该模式自动，在下面新建一行。

80
00:07:37,199 --> 00:07:42,769
也许你现在开始，意识到熟悉 Vim 快捷键，会有多强大。

81
00:07:42,770 --> 00:07:45,340
现在，它编译得很好！

82
00:07:45,340 --> 00:07:50,140
为了让这个程序更有趣一点
我们将添加一个 'if' 语句。

83
00:07:50,139 --> 00:07:54,989
我们函数参数计数，必须等于 2。
如果真是这情况，我们会和以前一样，把它打印出来

84
00:07:54,990 --> 00:08:01,670
只是没有固定的名字。
我们可以使用，这个格式字符串(百分比语法)

85
00:08:01,669 --> 00:08:08,059
表示在这个地方属于字符串。
第一个参数字符串，

86
00:08:08,060 --> 00:08:13,980
作为，我们指定的这个参数向量，第二参数的落点。
是的，上面写着，1

87
00:08:13,980 --> 00:08:18,190
但是，它是这个列表中的第二个项，因为
我们总是从 0 开始，计数。

88
00:08:18,189 --> 00:08:23,959
如果我们没有两个参数，
我们将打印一条错误消息。

89
00:08:23,960 --> 00:08:30,200
一条良好实践是打印错误消息到，标准错误流，而不是标准输出流。

90
00:08:30,199 --> 00:08:34,839
似乎现在很奇怪，但未来你会理解的。

91
00:08:34,840 --> 00:08:40,130
而不是打印第二个参数，因为在其他情况(即没有第二参数)下，
我们将打印第一个参数。

92
00:08:40,130 --> 00:08:50,730
这里，我们还将添加一个 1 返回(码)，这个退出码表示

93
00:08:50,730 --> 00:08:56,750
程序因错误退出。
编译并测试这个代码。正如

94
00:08:56,750 --> 00:09:01,800
你所看到的，如果你不指定一个参数，
将显示程序用法错误的消息

95
00:09:01,800 --> 00:09:07,610
shell 能传递一切，您在命令行上键入空格。

96
00:09:07,610 --> 00:09:15,910
这意味着，第一个参数将是您的程序名。

97
00:09:15,910 --> 00:09:22,010
现在，如果设置了第二个参数，那么个性化消息就会打印。

98
00:09:22,010 --> 00:09:27,000
还要注意，若你想要一个带空格的字符串，

99
00:09:27,000 --> 00:09:31,940
你必须用引号来表示，它们(这些字符串)属于一起。
使用美元问号，您可以显示

100
00:09:31,940 --> 00:09:38,130
上一运行程序的退出代码，其中是 0 还是 1

101
00:09:38,130 --> 00:09:40,830
取决于我们是否错误与否。

102
00:09:40,829 --> 00:09:45,179
现在，让我们用这个程序，来玩一下。
我们已经触及了环境变量的话题。

103
00:09:45,180 --> 00:09:49,550
如果你再看他们，你可以找到"$USER"变量，

104
00:09:49,550 --> 00:09:56,140
其包含您的用户名。所以当我们执行程序时，
使用 "$USER"，它将打印 liveoverflow。

105
00:09:56,139 --> 00:09:59,659
但如果我们真的想打印 "$USER" 呢

106
00:09:59,660 --> 00:10:05,100
为了达到这个目的，我们必须转义美元($)符号。
美元在命令行上，有特殊的意义

107
00:10:05,100 --> 00:10:11,410
当您输入此文本时，shell 将读你输入的内容，

108
00:10:11,410 --> 00:10:16,680
一旦它读到美元，它知道接下来的角色
将是变量的名称。

109
00:10:16,680 --> 00:10:20,290
然后它会查找此变量的值，并替换它。

110
00:10:20,290 --> 00:10:26,790
但如果我们在美元之前，用反斜杠，
shell 将首先读取反斜杠，

111
00:10:26,790 --> 00:10:32,370
并知道，若是后跟着一个美元符号，就不再把美元当作一个特殊字符。

112
00:10:32,370 --> 00:10:38,360
当你打开一个终端，总有欢迎文本不是很酷吗？浏览到您的主文件夹

113
00:10:38,360 --> 00:10:44,590
再次查看那里的点文件。那里是一个名为".bashrc"的文件，它是一个特殊文件

114
00:10:44,589 --> 00:10:49,919
在打开终端后，会加载该文件，
也就是说，它可以包含每次打开终端，都能先执行的命令

115
00:10:49,920 --> 00:10:56,960
在Vim中，打开它，然后用"shift + g"滑到底部，

116
00:10:56,959 --> 00:11:02,509
用"i"或"o"进入'插入‘模式。
现在我们可以，添加前面的 "export" 命令，

117
00:11:02,510 --> 00:11:06,110
但因为我们现在了解环境变量，及其识别与替换的方法

118
00:11:06,110 --> 00:11:10,960
我们可以用更好的方法，改变 PATH。

119
00:11:10,959 --> 00:11:17,389
在下一行，我们在程序添加，作为参数的用户变量。

120
00:11:17,389 --> 00:11:22,379
按 'Escape' 进入命令模式，":w" 保存文件。

121
00:11:22,380 --> 00:11:24,580
打开另一个终端，就可以兴奋地看到了！

122
00:11:24,579 --> 00:11:30,269
很明显，只使用 "echo" 而不是编译的C程序，更容易

123
00:11:30,270 --> 00:11:35,200
但没关系。我们学到了东西。作为练习，

124
00:11:35,199 --> 00:11:40,659
您应该添加，"echo" 加上环境变量的替代版本到".bashrc"。

125
00:11:40,660 --> 00:11:46,150
你也可以修改".vimrc"，让 vim 始终启用语法高亮。

126
00:11:46,150 --> 00:11:51,220
我再次删除 "export" 命令，因为我不想把 home 文件夹，放进 PATH

127
00:11:51,220 --> 00:12:00,710
请移动到'export'那行，按两下D - 你必须处于命令模式

128
00:12:00,709 --> 00:12:05,560
所以，如果你仍处于'插入'模式的话，记得按'Esc'回到命令模式。
现在，我不得不用，我们程序的完整路径。